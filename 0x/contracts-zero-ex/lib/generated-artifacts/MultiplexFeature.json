{
    "schemaVersion": "2.0.0",
    "contractName": "MultiplexFeature",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "zeroExAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IEtherTokenV06",
                        "name": "weth",
                        "type": "address"
                    },
                    {
                        "internalType": "contract ILiquidityProviderSandbox",
                        "name": "sandbox",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "uniswapFactory",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "sushiswapFactory",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "uniswapPairInitCodeHash",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "sushiswapPairInitCodeHash",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "bytes32",
                        "name": "orderHash",
                        "type": "bytes32"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "maker",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint64",
                        "name": "expiry",
                        "type": "uint64"
                    }
                ],
                "name": "ExpiredOtcOrder",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "bytes32",
                        "name": "orderHash",
                        "type": "bytes32"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "maker",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint64",
                        "name": "expiry",
                        "type": "uint64"
                    }
                ],
                "name": "ExpiredRfqOrder",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "inputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "provider",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "recipient",
                        "type": "address"
                    }
                ],
                "name": "LiquidityProviderSwap",
                "type": "event"
            },
            {
                "inputs": [],
                "name": "EIP712_DOMAIN_SEPARATOR",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "FEATURE_NAME",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "FEATURE_VERSION",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "inputToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "outputToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "sellAmount",
                                "type": "uint256"
                            },
                            {
                                "components": [
                                    {
                                        "internalType": "enum IMultiplexFeature.MultiplexSubcall",
                                        "name": "id",
                                        "type": "uint8"
                                    },
                                    {
                                        "internalType": "uint256",
                                        "name": "sellAmount",
                                        "type": "uint256"
                                    },
                                    {
                                        "internalType": "bytes",
                                        "name": "data",
                                        "type": "bytes"
                                    }
                                ],
                                "internalType": "struct IMultiplexFeature.BatchSellSubcall[]",
                                "name": "calls",
                                "type": "tuple[]"
                            },
                            {
                                "internalType": "bool",
                                "name": "useSelfBalance",
                                "type": "bool"
                            },
                            {
                                "internalType": "address",
                                "name": "recipient",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct IMultiplexFeature.BatchSellParams",
                        "name": "params",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes",
                        "name": "wrappedCallData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "_batchSellLiquidityProviderExternal",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "boughtAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "inputToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "outputToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "sellAmount",
                                "type": "uint256"
                            },
                            {
                                "components": [
                                    {
                                        "internalType": "enum IMultiplexFeature.MultiplexSubcall",
                                        "name": "id",
                                        "type": "uint8"
                                    },
                                    {
                                        "internalType": "uint256",
                                        "name": "sellAmount",
                                        "type": "uint256"
                                    },
                                    {
                                        "internalType": "bytes",
                                        "name": "data",
                                        "type": "bytes"
                                    }
                                ],
                                "internalType": "struct IMultiplexFeature.BatchSellSubcall[]",
                                "name": "calls",
                                "type": "tuple[]"
                            },
                            {
                                "internalType": "bool",
                                "name": "useSelfBalance",
                                "type": "bool"
                            },
                            {
                                "internalType": "address",
                                "name": "recipient",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct IMultiplexFeature.BatchSellParams",
                        "name": "params",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes",
                        "name": "wrappedCallData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "_batchSellUniswapV2External",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "boughtAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "migrate",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "success",
                        "type": "bytes4"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IMultiplexFeature.MultiplexSubcall",
                                "name": "id",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint256",
                                "name": "sellAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct IMultiplexFeature.BatchSellSubcall[]",
                        "name": "calls",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minBuyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "multiplexBatchSellEthForToken",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "boughtAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IMultiplexFeature.MultiplexSubcall",
                                "name": "id",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint256",
                                "name": "sellAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct IMultiplexFeature.BatchSellSubcall[]",
                        "name": "calls",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minBuyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "multiplexBatchSellTokenForEth",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "boughtAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IMultiplexFeature.MultiplexSubcall",
                                "name": "id",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint256",
                                "name": "sellAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct IMultiplexFeature.BatchSellSubcall[]",
                        "name": "calls",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minBuyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "multiplexBatchSellTokenForToken",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "boughtAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IMultiplexFeature.MultiplexSubcall",
                                "name": "id",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct IMultiplexFeature.MultiHopSellSubcall[]",
                        "name": "calls",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minBuyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "multiplexMultiHopSellEthForToken",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "boughtAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IMultiplexFeature.MultiplexSubcall",
                                "name": "id",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct IMultiplexFeature.MultiHopSellSubcall[]",
                        "name": "calls",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minBuyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "multiplexMultiHopSellTokenForEth",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "boughtAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IMultiplexFeature.MultiplexSubcall",
                                "name": "id",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct IMultiplexFeature.MultiHopSellSubcall[]",
                        "name": "calls",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minBuyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "multiplexMultiHopSellTokenForToken",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "boughtAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "details": "This feature enables efficient batch and multi-hop trades      using different liquidity sources.",
            "kind": "dev",
            "methods": {
                "migrate()": {
                    "details": "Initialize and register this feature.      Should be delegatecalled by `Migrate.migrate()`.",
                    "returns": {
                        "success": "`LibMigrate.SUCCESS` on success."
                    }
                },
                "multiplexBatchSellEthForToken(address,(uint8,uint256,bytes)[],uint256)": {
                    "details": "Sells attached ETH for `outputToken` using the provided      calls.",
                    "params": {
                        "calls": "The calls to use to sell the attached ETH.",
                        "minBuyAmount": "The minimum amount of `outputToken` that        must be bought for this function to not revert.",
                        "outputToken": "The token to buy."
                    },
                    "returns": {
                        "boughtAmount": "The amount of `outputToken` bought."
                    }
                },
                "multiplexBatchSellTokenForEth(address,(uint8,uint256,bytes)[],uint256,uint256)": {
                    "details": "Sells `sellAmount` of the given `inputToken` for ETH      using the provided calls.",
                    "params": {
                        "calls": "The calls to use to sell the input tokens.",
                        "inputToken": "The token to sell.",
                        "minBuyAmount": "The minimum amount of ETH that        must be bought for this function to not revert.",
                        "sellAmount": "The amount of `inputToken` to sell."
                    },
                    "returns": {
                        "boughtAmount": "The amount of ETH bought."
                    }
                },
                "multiplexBatchSellTokenForToken(address,address,(uint8,uint256,bytes)[],uint256,uint256)": {
                    "details": "Sells `sellAmount` of the given `inputToken` for      `outputToken` using the provided calls.",
                    "params": {
                        "calls": "The calls to use to sell the input tokens.",
                        "inputToken": "The token to sell.",
                        "minBuyAmount": "The minimum amount of `outputToken`        that must be bought for this function to not revert.",
                        "outputToken": "The token to buy.",
                        "sellAmount": "The amount of `inputToken` to sell."
                    },
                    "returns": {
                        "boughtAmount": "The amount of `outputToken` bought."
                    }
                },
                "multiplexMultiHopSellEthForToken(address[],(uint8,bytes)[],uint256)": {
                    "details": "Sells attached ETH via the given sequence of tokens      and calls. `tokens[0]` must be WETH.      The last token in `tokens` is the output token that      will ultimately be sent to `msg.sender`",
                    "params": {
                        "calls": "The sequence of calls to use for the sell.",
                        "minBuyAmount": "The minimum amount of output tokens that        must be bought for this function to not revert.",
                        "tokens": "The sequence of tokens to use for the sell,        i.e. `tokens[i]` will be sold for `tokens[i+1]` via        `calls[i]`."
                    },
                    "returns": {
                        "boughtAmount": "The amount of output tokens bought."
                    }
                },
                "multiplexMultiHopSellTokenForEth(address[],(uint8,bytes)[],uint256,uint256)": {
                    "details": "Sells `sellAmount` of the input token (`tokens[0]`)      for ETH via the given sequence of tokens and calls.      The last token in `tokens` must be WETH.",
                    "params": {
                        "calls": "The sequence of calls to use for the sell.",
                        "minBuyAmount": "The minimum amount of ETH that        must be bought for this function to not revert.",
                        "sellAmount": "The amount of `inputToken` to sell.",
                        "tokens": "The sequence of tokens to use for the sell,        i.e. `tokens[i]` will be sold for `tokens[i+1]` via        `calls[i]`."
                    },
                    "returns": {
                        "boughtAmount": "The amount of ETH bought."
                    }
                },
                "multiplexMultiHopSellTokenForToken(address[],(uint8,bytes)[],uint256,uint256)": {
                    "details": "Sells `sellAmount` of the input token (`tokens[0]`)      via the given sequence of tokens and calls.      The last token in `tokens` is the output token that      will ultimately be sent to `msg.sender`",
                    "params": {
                        "calls": "The sequence of calls to use for the sell.",
                        "minBuyAmount": "The minimum amount of output tokens that        must be bought for this function to not revert.",
                        "sellAmount": "The amount of `inputToken` to sell.",
                        "tokens": "The sequence of tokens to use for the sell,        i.e. `tokens[i]` will be sold for `tokens[i+1]` via        `calls[i]`."
                    },
                    "returns": {
                        "boughtAmount": "The amount of output tokens bought."
                    }
                }
            },
            "stateVariables": {
                "FEATURE_NAME": {
                    "details": "Name of this feature."
                },
                "FEATURE_VERSION": {
                    "details": "Version of this feature."
                },
                "HIGH_BIT": {
                    "details": "The highest bit of a uint256 value."
                },
                "LOWER_255_BITS": {
                    "details": "Mask of the lower 255 bits of a uint256 value."
                },
                "WETH": {
                    "details": "The WETH token contract."
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x6101a060405262000014600260008062000143565b610160523480156200002557600080fd5b5060405162005a5438038062005a54833981016040819052620000489162000175565b30606090811b60805285901b6001600160601b03191660a05260405184908490849084908b904690620000e8907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f907f9e5dae0addaf20578aeb5d70341d092b53b4e14480ac5726438fd436df7ba427907f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c908590879060200162000207565b60408051601f19818403018152919052805160209091012060c05250506001600160601b0319606094851b811660e05292841b831661010052610120919091526101405296901b90951661018052506200024c945050505050565b6bffffffff0000000000000000604084901b1667ffffffff00000000602084901b161763ffffffff8216179392505050565b600080600080600080600060e0888a03121562000190578283fd5b87516200019d8162000233565b6020890151909750620001b08162000233565b6040890151909650620001c38162000233565b6060890151909550620001d68162000233565b6080890151909450620001e98162000233565b8093505060a0880151915060c0880151905092959891949750929550565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b6001600160a01b03811681146200024957600080fd5b50565b60805160601c60a05160601c60c05160e05160601c6101005160601c6101205161014051610160516101805160601c615755620002ff6000398061083b52806108d452806109f65280610aa55280610cbe5280610db15280610e4052508061021e525080610f63525080611002525080610f19525080610fb8525080610d8b528061343452508061065f52806125c352508061025a52806104e752806117a75280612d2752806130e552506157556000f3fe6080604052600436106100c75760003560e01c806377725df6116100745780639a2967d21161004e5780639a2967d2146101d4578063dab400f3146101f4578063f35b473314610209576100c7565b806377725df6146101725780637a1eb1b9146101925780638fd3ab80146101b2576100c7565b8063209c02c5116100a5578063209c02c51461012a5780635161b9661461013d5780636ae4b4f714610150576100c7565b8063031b905c146100cc57806308378817146100f75780630f3b31b21461010a575b600080fd5b3480156100d857600080fd5b506100e161021c565b6040516100ee919061480a565b60405180910390f35b6100e1610105366004614277565b610240565b34801561011657600080fd5b506100e1610125366004613e77565b610479565b6100e1610138366004614277565b6104cd565b6100e161014b366004613e0d565b610837565b34801561015c57600080fd5b5061016561098f565b6040516100ee9190614999565b34801561017e57600080fd5b506100e161018d3660046141be565b6109c8565b34801561019e57600080fd5b506100e16101ad366004614205565b610b16565b3480156101be57600080fd5b506101c7610b9d565b6040516100ee9190614849565b3480156101e057600080fd5b506100e16101ef366004613e77565b610cba565b34801561020057600080fd5b506100e1610d89565b6100e1610217366004614178565b610dad565b7f000000000000000000000000000000000000000000000000000000000000000081565b60003073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614156102bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290614dd1565b60405180910390fd5b606060006102cb85870187613ee8565b91509150600282511015801561032c57506102e96020880188613c4b565b73ffffffffffffffffffffffffffffffffffffffff168260008151811061030c57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16145b801561038957506103436040880160208901613c4b565b73ffffffffffffffffffffffffffffffffffffffff168260018451038151811061036957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16145b6103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290614cba565b60006103f4836000815181106103d157fe5b6020026020010151846001815181106103e657fe5b602002602001015184610ecb565b905061040660a0890160808a0161415c565b1561042f5761042a8360008151811061041b57fe5b60200260200101518287611033565b61044f565b61044f8360008151811061043f57fe5b6020026020010151338388611115565b61046b8386848461046660c08e0160a08f01613c4b565b611214565b93505050505b949350505050565b60006104c46040518060a001604052808781526020018581526020018681526020016000151581526020013373ffffffffffffffffffffffffffffffffffffffff168152508361139a565b95945050505050565b60003073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016141561053f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290614f0e565b6000606061054f85870187613c67565b909250905061056460a088016080890161415c565b15610585576105806105796020890189613c4b565b8386611033565b61059d565b61059d6105956020890189613c4b565b338487611115565b60006105af6040890160208a01613c4b565b73ffffffffffffffffffffffffffffffffffffffff166370a082316105da60c08b0160a08c01613c4b565b6040518263ffffffff1660e01b81526004016105f691906147a2565b60206040518083038186803b15801561060e57600080fd5b505afa158015610622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106469190614539565b905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663bb503e218461069260208c018c613c4b565b6106a260408d0160208e01613c4b565b6106b260c08e0160a08f01613c4b565b6000886040518763ffffffff1660e01b81526004016106d696959493929190614906565b600060405180830381600087803b1580156106f057600080fd5b505af1158015610704573d6000803e3d6000fd5b505050506107bc8189602001602081019061071f9190613c4b565b73ffffffffffffffffffffffffffffffffffffffff166370a0823161074a60c08d0160a08e01613c4b565b6040518263ffffffff1660e01b815260040161076691906147a2565b60206040518083038186803b15801561077e57600080fd5b505afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190614539565b9061155b565b93507f40a6ba9513d09e3488135e0e0d10e2d4382b792720155b144cbea89ac9db6d346107ec60208a018a613c4b565b6107fc60408b0160208c01613c4b565b8787878d60a00160208101906108129190613c4b565b604051610824969594939291906147c3565b60405180910390a1505050949350505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168460008151811061087d57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146108d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290614d17565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561093a57600080fd5b505af115801561094e573d6000803e3d6000fd5b50506040805160a081018252888152346020820152908101879052600160608201523360808201526109859350915084905061139a565b90505b9392505050565b6040518060400160405280601081526020017f4d756c7469706c6578466561747572650000000000000000000000000000000081525081565b6000610a656040518060c001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018681526020016000151581526020013073ffffffffffffffffffffffffffffffffffffffff1681525083611584565b6040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610ada90849060040161480a565b600060405180830381600087803b158015610af457600080fd5b505af1158015610b08573d6000803e3d6000fd5b5050505061047133826116c9565b6000610b936040518060c001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018681526020016000151581526020013373ffffffffffffffffffffffffffffffffffffffff1681525083611584565b9695505050505050565b6000610bc87ff35b473300000000000000000000000000000000000000000000000000000000611771565b610bf17f77725df600000000000000000000000000000000000000000000000000000000611771565b610c1a7f7a1eb1b900000000000000000000000000000000000000000000000000000000611771565b610c437f5161b96600000000000000000000000000000000000000000000000000000000611771565b610c6c7f9a2967d200000000000000000000000000000000000000000000000000000000611771565b610c957f0f3b31b200000000000000000000000000000000000000000000000000000000611771565b507f2c64c5ef0000000000000000000000000000000000000000000000000000000090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1685600187510381518110610d0357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610d58576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290614fee565b6040805160a0810182528681526020810185905290810185905260006060820152306080820152610a65908361139a565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015610e1757600080fd5b505af1158015610e2b573d6000803e3d6000fd5b50505050506109856040518060c001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020013481526020018581526020016001151581526020013373ffffffffffffffffffffffffffffffffffffffff1681525083611584565b60008060008473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1610610f0a578486610f0d565b85855b915091508315610fb6577f00000000000000000000000000000000000000000000000000000000000000008282604051602001610f4b9291906146b0565b604051602081830303815290604052805190602001207f0000000000000000000000000000000000000000000000000000000000000000604051602001610f949392919061473c565b6040516020818303038152906040528051906020012060001c92505050610988565b7f00000000000000000000000000000000000000000000000000000000000000008282604051602001610fea9291906146b0565b604051602081830303815290604052805190602001207f0000000000000000000000000000000000000000000000000000000000000000604051602001610f949392919061473c565b73ffffffffffffffffffffffffffffffffffffffff8316301415611083576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290614f91565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152816024820152602081604483600073ffffffffffffffffffffffffffffffffffffffff89165af13d6001835114602082101516811517821691508161110d57806000843e8083fd5b505050505050565b73ffffffffffffffffffffffffffffffffffffffff8416301415611165576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290614f91565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015273ffffffffffffffffffffffffffffffffffffffff83166024820152816044820152602081606483600073ffffffffffffffffffffffffffffffffffffffff8a165af13d6001835114602082101516811517821691508161120b57806000843e8083fd5b50505050505050565b6000805b60018751038110156113905760008088838151811061123357fe5b602002602001015189846001018151811061124a57fe5b6020026020010151915091506112628683838b611804565b93506000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106112a2578560006112a6565b6000865b91509150600060028c510386106112bd57876112de565b6112de848d88600201815181106112d057fe5b60200260200101518c610ecb565b604080516000815260208101918290527f022c0d9f0000000000000000000000000000000000000000000000000000000090915290915073ffffffffffffffffffffffffffffffffffffffff8a169063022c0d9f906113469086908690869060248101615580565b600060405180830381600087803b15801561136057600080fd5b505af1158015611374573d6000803e3d6000fd5b50505050809850869a5050505050508080600101915050611218565b5095945050505050565b604082015151825151600091600101146113e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290614bda565b82518051600091907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061141457fe5b6020026020010151905060008173ffffffffffffffffffffffffffffffffffffffff166370a0823186608001516040518263ffffffff1660e01b815260040161145d91906147a2565b60206040518083038186803b15801561147557600080fd5b505afa158015611489573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ad9190614539565b90506114b7613665565b6114c0866119c2565b90506000611505838573ffffffffffffffffffffffffffffffffffffffff166370a082318a608001516040518263ffffffff1660e01b815260040161076691906147a2565b9050611515818360000151611c15565b945085851015611551576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290614eb1565b5050505092915050565b6000828211156115795761157961157460028585611c2b565b611cd0565b508082035b92915050565b600080836020015173ffffffffffffffffffffffffffffffffffffffff166370a082318560a001516040518263ffffffff1660e01b81526004016115c891906147a2565b60206040518083038186803b1580156115e057600080fd5b505afa1580156115f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116189190614539565b90506116226136b9565b61162b85611cd8565b9050600061167483876020015173ffffffffffffffffffffffffffffffffffffffff166370a082318960a001516040518263ffffffff1660e01b815260040161076691906147a2565b9050611684818360200151611c15565b9350848410156116c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290614a66565b50505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff16826040516116ef9061479f565b60006040518083038185875af1925050503d806000811461172c576040519150601f19603f3d011682016040523d82523d6000602084013e611731565b606091505b505090508061176c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b2906150ce565b505050565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb906117cf9084907f000000000000000000000000000000000000000000000000000000000000000090600401614876565b600060405180830381600087803b1580156117e957600080fd5b505af11580156117fd573d6000803e3d6000fd5b5050505050565b600080821161183f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b29061504b565b6000808673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561188857600080fd5b505afa15801561189c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c091906144bf565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000821180156118f55750600081115b61192b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b29061512b565b6000808673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161061196857828461196b565b83835b9092509050600061197e876103e5611ec0565b9050600061198c8284611ec0565b905060006119a6836119a0876103e8611ec0565b90611ef1565b90508082816119b157fe5b049c9b505050505050505050505050565b6119ca613665565b602082015181526119dc826000611f0d565b73ffffffffffffffffffffffffffffffffffffffff1660208201526060820151158015611a235750602081015173ffffffffffffffffffffffffffffffffffffffff163314155b15611a5457611a548260000151600081518110611a3c57fe5b60200260200101513383602001518560200151611115565b81606001518015611a7f5750602081015173ffffffffffffffffffffffffffffffffffffffff163014155b15611aaf57611aaf8260000151600081518110611a9857fe5b602002602001015182602001518460200151611033565b600060608201525b816040015151816060015114611c1057611acf6136d3565b8260400151826060015181518110611ae357fe5b60200260200101519050611afe838360600151600101611f0d565b73ffffffffffffffffffffffffffffffffffffffff166040830152600381516008811115611b2857fe5b1415611b4257611b3d828483602001516120cd565b611bdf565b600481516008811115611b5157fe5b1415611b6557611b3d828260200151612216565b600581516008811115611b7457fe5b1415611b8957611b3d828483602001516124d1565b600781516008811115611b9857fe5b1415611bad57611b3d8284836020015161270f565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b2906151ae565b50604081015173ffffffffffffffffffffffffffffffffffffffff1660208201526060810180516001019052611ab7565b919050565b6000818310611c245781610988565b5090919050565b606063e946c1bb60e01b848484604051602401611c4a93929190614961565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b611ce06136b9565b60005b8260600151518114611e81576040830151825110611d0057611e81565b611d086136eb565b83606001518281518110611d1857fe5b602002602001015190506000611d3b8260200151866040015186600001516127fa565b9050600182516008811115611d4c57fe5b1415611d6757611d62848684604001518461288c565b611e77565b600282516008811115611d7657fe5b1415611d8c57611d628486846040015184612ade565b600382516008811115611d9b57fe5b1415611db157611d628486846040015184612d21565b600482516008811115611dc057fe5b1415611dd657611d628486846040015184612e91565b600582516008811115611de557fe5b1415611dfb57611d6284868460400151846130df565b600682516008811115611e0a57fe5b1415611e2057611d628486846040015184613137565b600882516008811115611e2f57fe5b1415611e4557611d628486846040015184613288565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b2906149ac565b5050600101611ce3565b506040820151815114611c10576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290614a09565b600082611ecf5750600061157e565b82820282848281611edc57fe5b04146109885761098861157460018686611c2b565b6000828201838110156109885761098861157460008686611c2b565b6000826040015151821415611f2757506080820151612080565b611f2f6136d3565b83604001518381518110611f3f57fe5b6020026020010151905060036008811115611f5657fe5b81516008811115611f6357fe5b1415611fc557606060008260200151806020019051810190611f859190613f38565b91509150611fbc82600081518110611f9957fe5b602002602001015183600181518110611fae57fe5b602002602001015183610ecb565b9350505061207e565b600581516008811115611fd457fe5b1415611ffa578060200151806020019051810190611ff29190613cb5565b50915061207e565b60048151600881111561200957fe5b1480612021575060078151600881111561201f57fe5b145b1561204c578215801561203657508360600151155b1561204357339150612047565b3091505b61207e565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290614b7d565b505b73ffffffffffffffffffffffffffffffffffffffff811661157e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290614d74565b60606000828060200190518101906120e59190613f38565b9150915060028251101580156121525750835160608601518151811061210757fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168260008151811061213257fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16145b80156121be5750836000015185606001516001018151811061217057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168260018451038151811061219e57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16145b6121f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290614b20565b61220d8286600001518388602001518960400151611214565b90945250505050565b600060603073ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff161415612368578351604080860151905130927f4a931ba10000000000000000000000000000000000000000000000000000000092612292928892916000916024016148be565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161231b91906146ea565b6000604051808303816000865af19150503d8060008114612358576040519150601f19603f3d011682016040523d82523d6000602084013e61235d565b606091505b509092509050612478565b8351604080860151905130927f6af479b200000000000000000000000000000000000000000000000000000000926123a8928892916000916024016148be565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161243191906146ea565b600060405180830381855af49150503d806000811461246c576040519150601f19603f3d011682016040523d82523d6000602084013e612471565b606091505b5090925090505b811561249957808060200190518101906124929190614539565b84526124cb565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290614c5d565b50505050565b600082600001518460600151815181106124e757fe5b602002602001015190506000836000015185606001516001018151811061250a57fe5b60200260200101519050600060608480602001905181019061252c9190613cb5565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166370a0823189604001516040518263ffffffff1660e01b815260040161256f91906147a2565b60206040518083038186803b15801561258757600080fd5b505afa15801561259b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125bf9190614539565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bb503e218487878c604001516000886040518763ffffffff1660e01b815260040161262996959493929190614906565b600060405180830381600087803b15801561264357600080fd5b505af1158015612657573d6000803e3d6000fd5b505089516040808c015190517f70a082310000000000000000000000000000000000000000000000000000000081529193506126bb9250849173ffffffffffffffffffffffffffffffffffffffff8916916370a082319161076691906004016147a2565b808a526040808b015190517f40a6ba9513d09e3488135e0e0d10e2d4382b792720155b144cbea89ac9db6d34926126fc928a928a92879290918b91906147c3565b60405180910390a1505050505050505050565b61271761370d565b8180602001905181019061272b9190613f7d565b6060808301919091528351908501518151811061274457fe5b602090810291909101015173ffffffffffffffffffffffffffffffffffffffff168152825160608501518151600190910190811061277e57fe5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16908201528351604082015260608401511515806127be575082606001515b15156080820152604084015173ffffffffffffffffffffffffffffffffffffffff1660a08201526127ee81611cd8565b60200151909352505050565b60007f8000000000000000000000000000000000000000000000000000000000000000808516141561287e57612877670de0b6b3a764000061285e7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff871682611c15565b85028161286757fe5b04612872858561155b565b611c15565b9050610988565b61287784612872858561155b565b612894613741565b61289c613795565b838060200190518101906128b091906143e0565b915091504267ffffffffffffffff1682610100015167ffffffffffffffff16116129355760006128e76128e2846132f9565b613430565b90507fd9ee00a67daf7d99c37893015dc900862c9a02650ef2d318697e502e5fb8bbe281846080015185610100015160405161292593929190614813565b60405180910390a15050506124cb565b846000015173ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff161480156129ab5750846020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff16145b6129e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290614e54565b3063aa6b21cd83836129f287613482565b338a608001518b60a001516040518763ffffffff1660e01b8152600401612a1e969594939291906153e6565b6040805180830381600087803b158015612a3757600080fd5b505af1925050508015612a85575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252612a829181019061450b565b60015b612a8e5761110d565b8751612aac906fffffffffffffffffffffffffffffffff8416611ef1565b88526020880151612acf906fffffffffffffffffffffffffffffffff8316611ef1565b60208901525050505050505050565b612ae66137be565b612aee613795565b83806020019051810190612b029190614315565b91509150846000015173ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff16148015612b7c5750846020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff16145b612bb2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b290614ac3565b60e082015160c01c67ffffffffffffffff42168111612c23576000612bd96128e2856134ae565b90507f5574c085411e1dce1414a21a43f286a7bc07de97b0aa6b9143fd5dca66faa58381856080015184604051612c1293929190614813565b60405180910390a1505050506124cb565b3063e4ba84398484612c3488613482565b338b608001518c60a001516040518763ffffffff1660e01b8152600401612c60969594939291906152f3565b6040805180830381600087803b158015612c7957600080fd5b505af1925050508015612cc7575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252612cc49181019061450b565b60015b612cd05761120b565b8851612cee906fffffffffffffffffffffffffffffffff8416611ef1565b89526020890151612d11906fffffffffffffffffffffffffffffffff8316611ef1565b60208a0152505050505050505050565b600060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630837881760e01b868686604051602401612d799392919061520b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051612e0291906146ea565b600060405180830381855af49150503d8060008114612e3d576040519150601f19603f3d011682016040523d82523d6000602084013e612e42565b606091505b5091509150811561110d57600081806020019051810190612e639190614539565b8751909150612e729085611ef1565b87526020870151612e839082611ef1565b602088015250505050505050565b60006060846080015115612fb45760a085015160405130917f4a931ba10000000000000000000000000000000000000000000000000000000091612ede91889188916000916024016148be565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051612f6791906146ea565b6000604051808303816000865af19150503d8060008114612fa4576040519150601f19603f3d011682016040523d82523d6000602084013e612fa9565b606091505b5090925090506130c3565b60a085015160405130917f6af479b20000000000000000000000000000000000000000000000000000000091612ff391889188916000916024016148be565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161307c91906146ea565b600060405180830381855af49150503d80600081146130b7576040519150601f19603f3d011682016040523d82523d6000602084013e6130bc565b606091505b5090925090505b811561110d57600081806020019051810190612e639190614539565b600060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663209c02c560e01b868686604051602401612d799392919061520b565b61313f613802565b338152835173ffffffffffffffffffffffffffffffffffffffff9081166020808401919091528086015182166040840152606083018490526000608080850191909152860151151560c084015260a086015190911660e083015283516131ac919085018101908501614079565b60a08201526040517f8aa6539b0000000000000000000000000000000000000000000000000000000081523090638aa6539b906131ed9084906004016154dc565b602060405180830381600087803b15801561320757600080fd5b505af1925050508015613255575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261325291810190614539565b60015b61325e576117fd565b855161326a9084611ef1565b8652602086015161327b9082611ef1565b6020870152505050505050565b613290613845565b828060200190518101906132a49190613cfa565b60408301528152602081018290526080808501511515606083015260a085015173ffffffffffffffffffffffffffffffffffffffff169082015260006132e9826119c2565b51865190915061326a9084611ef1565b60006040517fe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da98152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff166080820152608083015173ffffffffffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e083015161010082015261010083015167ffffffffffffffff166101208201526101208301516101408201526101608120915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000082604051602001613465929190614706565b604051602081830303815290604052805190602001209050919050565b60006fffffffffffffffffffffffffffffffff8211156134aa576134aa6115746003846135c3565b5090565b60006040517f2f754524de756ae72459efbe1ec88c19a745639821de528ac3fb88f9e65e35c88152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff166080820152608083015173ffffffffffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e08301516101008201526101208120915050919050565b606063c996af7b60e01b83836040516024016135e0929190614982565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b604051806080016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b604051806040016040528060008152602001600081525090565b60408051808201909152600081526060602082015290565b6040805160608101909152806000815260200160008152602001606081525090565b6040805160c0810182526000808252602082018190529181018290526060808201526080810182905260a081019190915290565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915290565b604080516080810190915280600081526000602082018190526040820181905260609091015290565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a082015260c0810182905260e081019190915290565b6040518060a00160405280606081526020016000815260200160608152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b805161157e81615696565b600082601f8301126138a7578081fd5b81356138ba6138b5826155e2565b6155bb565b8181529150602080830190848101818402860182018710156138db57600080fd5b60005b848110156139035781356138f181615696565b845292820192908201906001016138de565b505050505092915050565b600082601f83011261391e578081fd5b815161392c6138b5826155e2565b81815291506020808301908481018184028601820187101561394d57600080fd5b60005b8481101561390357815161396381615696565b84529282019290820190600101613950565b600082601f830112613985578081fd5b81356139936138b5826155e2565b818152915060208083019084810160005b8481101561390357813587016060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c030112156139e357600080fd5b6139ec816155bb565b858301356139f9816156c6565b815260408381013587830152918301359167ffffffffffffffff831115613a1f57600080fd5b613a2d8c8885870101613b0a565b908201528652505092820192908201906001016139a4565b600082601f830112613a55578081fd5b8135613a636138b5826155e2565b818152915060208083019084810160005b8481101561390357813587016040807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c03011215613ab357600080fd5b613abc816155bb565b613ac88b878501613ba5565b8152908201359067ffffffffffffffff821115613ae457600080fd5b613af28b8784860101613b0a565b81870152865250509282019290820190600101613a74565b600082601f830112613b1a578081fd5b8135613b286138b582615602565b9150808252836020828501011115613b3f57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112613b68578081fd5b8151613b766138b582615602565b9150808252836020828501011115613b8d57600080fd5b613b9e81602084016020860161565d565b5092915050565b803561157e816156c6565b600060808284031215613bc1578081fd5b613bcb60806155bb565b9050815160048110613bdc57600080fd5b8152602082015160ff81168114613bf257600080fd5b80602083015250604082015160408201526060820151606082015292915050565b80516fffffffffffffffffffffffffffffffff8116811461157e57600080fd5b805167ffffffffffffffff8116811461157e57600080fd5b600060208284031215613c5c578081fd5b813561098881615696565b60008060408385031215613c79578081fd5b8235613c8481615696565b9150602083013567ffffffffffffffff811115613c9f578182fd5b613cab85828601613b0a565b9150509250929050565b60008060408385031215613cc7578182fd5b8251613cd281615696565b602084015190925067ffffffffffffffff811115613cee578182fd5b613cab85828601613b58565b60008060408385031215613d0c578182fd5b825167ffffffffffffffff80821115613d23578384fd5b613d2f8683870161390e565b9350602091508185015181811115613d45578384fd5b8501601f81018713613d55578384fd5b8051613d636138b5826155e2565b81815284810190838601875b84811015613dfc578151860160407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828f03011215613dac57898afd5b613db660406155bb565b89820151613dc3816156c6565b8152604082015189811115613dd6578b8cfd5b613de48f8c83860101613b58565b828c0152508552509287019290870190600101613d6f565b50979a909950975050505050505050565b600080600060608486031215613e21578081fd5b833567ffffffffffffffff80821115613e38578283fd5b613e4487838801613897565b94506020860135915080821115613e59578283fd5b50613e6686828701613a45565b925050604084013590509250925092565b60008060008060808587031215613e8c578182fd5b843567ffffffffffffffff80821115613ea3578384fd5b613eaf88838901613897565b95506020870135915080821115613ec4578384fd5b50613ed187828801613a45565b949794965050505060408301359260600135919050565b60008060408385031215613efa578182fd5b823567ffffffffffffffff811115613f10578283fd5b613f1c85828601613897565b9250506020830135613f2d816156b8565b809150509250929050565b60008060408385031215613f4a578182fd5b825167ffffffffffffffff811115613f60578283fd5b613f6c8582860161390e565b9250506020830151613f2d816156b8565b60006020808385031215613f8f578182fd5b825167ffffffffffffffff80821115613fa6578384fd5b818501915085601f830112613fb9578384fd5b8151613fc76138b5826155e2565b81815284810190848601875b8481101561406a57815187016060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838f03011215614011578a8bfd5b61401a816155bb565b8a830151614027816156c6565b81526040838101518c830152918301519189831115614044578c8dfd5b6140528f8d85870101613b58565b90820152865250509287019290870190600101613fd3565b50909998505050505050505050565b6000602080838503121561408b578182fd5b825167ffffffffffffffff808211156140a2578384fd5b818501915085601f8301126140b5578384fd5b81516140c36138b5826155e2565b81815284810190848601875b8481101561406a57815187016040807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838f0301121561410d578a8bfd5b614116816155bb565b8a8301516141238161570d565b8152908201519088821115614136578b8cfd5b6141448e8c84860101613b58565b818c01528652505092870192908701906001016140cf565b60006020828403121561416d578081fd5b8135610988816156b8565b60008060006060848603121561418c578081fd5b833561419781615696565b9250602084013567ffffffffffffffff8111156141b2578182fd5b613e6686828701613975565b600080600080608085870312156141d3578182fd5b84356141de81615696565b9350602085013567ffffffffffffffff8111156141f9578283fd5b613ed187828801613975565b600080600080600060a0868803121561421c578283fd5b853561422781615696565b9450602086013561423781615696565b9350604086013567ffffffffffffffff811115614252578384fd5b61425e88828901613975565b9598949750949560608101359550608001359392505050565b6000806000806060858703121561428c578182fd5b843567ffffffffffffffff808211156142a3578384fd5b9086019060c082890312156142b6578384fd5b909450602086013590808211156142cb578384fd5b818701915087601f8301126142de578384fd5b8135818111156142ec578485fd5b8860208285010111156142fd578485fd5b95986020929092019750949560400135945092505050565b600080828403610180811215614329578283fd5b61010080821215614338578384fd5b614341816155bb565b9150845161434e81615696565b825261435d866020870161388c565b602083015261436f8660408701613c13565b60408301526143818660608701613c13565b6060830152614393866080870161388c565b60808301526143a58660a0870161388c565b60a08301526143b78660c0870161388c565b60c083015260e085015160e08301528193506143d586828701613bb0565b925050509250929050565b6000808284036101c08112156143f4578283fd5b61014080821215614403578384fd5b61440c816155bb565b9150614418868661388c565b8252614427866020870161388c565b60208301526144398660408701613c13565b604083015261444b8660608701613c13565b606083015261445d866080870161388c565b608083015261446f8660a0870161388c565b60a08301526144818660c0870161388c565b60c083015260e085015160e083015261010061449f87828801613c33565b81840152506101208086015181840152508193506143d586828701613bb0565b6000806000606084860312156144d3578081fd5b83516144de816156d3565b60208501519093506144ef816156d3565b60408501519092506145008161570d565b809150509250925092565b6000806040838503121561451d578182fd5b8251614528816156ef565b6020840151909250613f2d816156ef565b60006020828403121561454a578081fd5b5051919050565b600081516009811061455f57fe5b80845250602082015160208401526040820151606060408501526104716060850182614613565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085018081965082840281019150828601855b858110156146005782840389528151805163ffffffff16855285015160408686018190526145ec81870183614613565b9a87019a95505050908401906001016145bc565b5091979650505050505050565b15159052565b6000815180845261462b81602086016020860161565d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b805161466881615689565b825260208181015160ff169083015260408082015190830152606090810151910152565b6fffffffffffffffffffffffffffffffff169052565b67ffffffffffffffff169052565b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606093841b811682529190921b16601482015260280190565b600082516146fc81846020870161565d565b9190910192915050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b7fff00000000000000000000000000000000000000000000000000000000000000815260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830191909152603582015260550190565b90565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff96871681529486166020860152604085019390935260608401919091528316608083015290911660a082015260c00190565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff91909116602083015267ffffffffffffffff16604082015260600190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b6000608082526148d16080830187614613565b60208301959095525060ff92909216604083015273ffffffffffffffffffffffffffffffffffffffff16606090910152919050565b600073ffffffffffffffffffffffffffffffffffffffff80891683528088166020840152808716604084015280861660608401525083608083015260c060a083015261495560c0830184614613565b98975050505050505050565b6060810161496e85615689565b938152602081019290925260409091015290565b6040810161498f84615689565b9281526020015290565b6000602082526109886020830184614613565b60208082526033908201527f4d756c7469706c6578466561747572653a3a5f6578656375746542617463685360408201527f656c6c2f494e56414c49445f53554243414c4c00000000000000000000000000606082015260800190565b60208082526039908201527f4d756c7469706c6578466561747572653a3a5f6578656375746542617463685360408201527f656c6c2f494e434f52524543545f414d4f554e545f534f4c4400000000000000606082015260800190565b60208082526031908201527f4d756c7469706c6578466561747572653a3a5f6d756c7469706c65784261746360408201527f6853656c6c2f554e444552424f55474854000000000000000000000000000000606082015260800190565b60208082526039908201527f4d756c7469706c65784f74633a3a5f626174636853656c6c4f74634f7264657260408201527f2f4f54435f4f524445525f494e56414c49445f544f4b454e5300000000000000606082015260800190565b60208082526039908201527f4d756c7469706c6578556e697377617056323a3a5f6d756c7469486f7053656c60408201527f6c556e697377617056322f494e56414c49445f544f4b454e5300000000000000606082015260800190565b60208082526033908201527f4d756c7469706c6578466561747572653a3a5f636f6d70757465486f7054617260408201527f6765742f494e56414c49445f53554243414c4c00000000000000000000000000606082015260800190565b60208082526041908201527f4d756c7469706c6578466561747572653a3a5f6d756c7469706c65784d756c7460408201527f69486f7053656c6c2f4d49534d4154434845445f41525241595f4c454e47544860608201527f5300000000000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526036908201527f4d756c7469706c6578556e697377617056333a3a5f6d756c7469486f7053656c60408201527f6c556e697377617056332f535741505f4641494c454400000000000000000000606082015260800190565b60208082526036908201527f4d756c7469706c6578556e697377617056323a3a5f626174636853656c6c556e60408201527f697377617056322f494e56414c49445f544f4b454e5300000000000000000000606082015260800190565b6020808252603b908201527f4d756c7469706c6578466561747572653a3a6d756c7469706c65784d756c746960408201527f486f7053656c6c457468466f72546f6b656e2f4e4f545f574554480000000000606082015260800190565b60208082526032908201527f4d756c7469706c6578466561747572653a3a5f636f6d70757465486f7054617260408201527f6765742f5441524745545f49535f4e554c4c0000000000000000000000000000606082015260800190565b60208082526049908201527f4d756c7469706c65784c697175696469747950726f76696465723a3a5f62617460408201527f636853656c6c556e6973776170563245787465726e616c2f4f4e4c595f44454c60608201527f454741544543414c4c0000000000000000000000000000000000000000000000608082015260a00190565b60208082526039908201527f4d756c7469706c65785266713a3a5f626174636853656c6c5266714f7264657260408201527f2f5246515f4f524445525f494e56414c49445f544f4b454e5300000000000000606082015260800190565b60208082526034908201527f4d756c7469706c6578466561747572653a3a5f6d756c7469706c65784d756c7460408201527f69486f7053656c6c2f554e444552424f55474854000000000000000000000000606082015260800190565b60208082526051908201527f4d756c7469706c65784c697175696469747950726f76696465723a3a5f62617460408201527f636853656c6c4c697175696469747950726f766964657245787465726e616c2f60608201527f4f4e4c595f44454c454741544543414c4c000000000000000000000000000000608082015260a00190565b60208082526024908201527f466978696e546f6b656e5370656e6465722f43414e4e4f545f494e564f4b455f60408201527f53454c4600000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252603b908201527f4d756c7469706c6578466561747572653a3a6d756c7469706c65784d756c746960408201527f486f7053656c6c546f6b656e466f724574682f4e4f545f574554480000000000606082015260800190565b60208082526049908201527f4d756c7469706c6578556e697377617056323a3a5f636f6d70757465556e697360408201527f7761704f7574707574416d6f756e742f494e53554646494349454e545f494e5060608201527f55545f414d4f554e540000000000000000000000000000000000000000000000608082015260a00190565b6020808252602e908201527f4d756c7469706c6578466561747572653a3a5f7472616e736665724574682f5460408201527f52414e534645525f4641494c4544000000000000000000000000000000000000606082015260800190565b60208082526046908201527f4d756c7469706c6578556e697377617056323a3a5f636f6d70757465556e697360408201527f7761704f7574707574416d6f756e742f494e53554646494349454e545f4c495160608201527f5549444954590000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526036908201527f4d756c7469706c6578466561747572653a3a5f657865637574654d756c74694860408201527f6f7053656c6c2f494e56414c49445f53554243414c4c00000000000000000000606082015260800190565b60006060825261012082016152208651615644565b6060840152602073ffffffffffffffffffffffffffffffffffffffff81880151166080850152604087015160a0850152606087015160c080860152828151615268818661480a565b9450918301918491508084028201865b828110156152a2578682038452615290828651614551565b94860194938601939150600101615278565b5060808b015195506152b760e089018761460d565b60a08b015195506152cc610100890187614586565b878103858901526152dd818b614613565b9650505050505050826040830152949350505050565b865161020082019061530490615644565b825273ffffffffffffffffffffffffffffffffffffffff602089015116602083015260408801516fffffffffffffffffffffffffffffffff80821660408501528060608b0151166060850152505060808801516153646080840182614586565b5060a088015161537760a0840182614586565b5060c088015161538a60c0840182614586565b5060e088015160e08301526153a361010083018861465d565b6153b161018083018761468c565b6153bf6101a0830186614586565b6153cd6101c083018561460d565b6153db6101e0830184614586565b979650505050505050565b6000610240820190506153fa828951614586565b602088015161540c6020840182614586565b50604088015161541f604084018261468c565b506060880151615432606084018261468c565b5060808801516154456080840182614586565b5060a088015161545860a0840182614586565b5060c088015161546b60c0840182614586565b5060e088015160e083015261010080890151615489828501826146a2565b505061012088810151908301526154a461014083018861465d565b6154b26101c083018761468c565b6154c06101e0830186614586565b6154ce61020083018561460d565b6153db610220830184614586565b60006020825273ffffffffffffffffffffffffffffffffffffffff80845116602084015280602085015116604084015250604083015161551f6060840182614586565b5060608301516080830152608083015160a083015260a08301516101008060c08501526155506101208501836145a0565b915060c085015161556460e086018261460d565b5060e085015161557682860182614586565b5090949350505050565b600085825284602083015273ffffffffffffffffffffffffffffffffffffffff8416604083015260806060830152610b936080830184614613565b60405181810167ffffffffffffffff811182821017156155da57600080fd5b604052919050565b600067ffffffffffffffff8211156155f8578081fd5b5060209081020190565b600067ffffffffffffffff821115615618578081fd5b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b73ffffffffffffffffffffffffffffffffffffffff1690565b60005b83811015615678578181015183820152602001615660565b838111156124cb5750506000910152565b6004811061569357fe5b50565b73ffffffffffffffffffffffffffffffffffffffff8116811461569357600080fd5b801515811461569357600080fd5b6009811061569357600080fd5b6dffffffffffffffffffffffffffff8116811461569357600080fd5b6fffffffffffffffffffffffffffffffff8116811461569357600080fd5b63ffffffff8116811461569357600080fdfea264697066735822122061698ff36f33bc6810ef488849ce415f6c4787aec4c65dc2e15364abd0bbcd9064736f6c634300060c0033",
                "opcodes": "PUSH2 0x1A0 PUSH1 0x40 MSTORE PUSH3 0x14 PUSH1 0x2 PUSH1 0x0 DUP1 PUSH3 0x143 JUMP JUMPDEST PUSH2 0x160 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x5A54 CODESIZE SUB DUP1 PUSH3 0x5A54 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x48 SWAP2 PUSH3 0x175 JUMP JUMPDEST ADDRESS PUSH1 0x60 SWAP1 DUP2 SHL PUSH1 0x80 MSTORE DUP6 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0xA0 MSTORE PUSH1 0x40 MLOAD DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP12 SWAP1 CHAINID SWAP1 PUSH3 0xE8 SWAP1 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F SWAP1 PUSH32 0x9E5DAE0ADDAF20578AEB5D70341D092B53B4E14480AC5726438FD436DF7BA427 SWAP1 PUSH32 0x6C015BD22B4C69690933C1058878EBDFEF31F9AAAE40BBE86D8A09FE1B2972C SWAP1 DUP6 SWAP1 DUP8 SWAP1 PUSH1 0x20 ADD PUSH3 0x207 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0xC0 MSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 SWAP5 DUP6 SHL DUP2 AND PUSH1 0xE0 MSTORE SWAP3 DUP5 SHL DUP4 AND PUSH2 0x100 MSTORE PUSH2 0x120 SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x140 MSTORE SWAP7 SWAP1 SHL SWAP1 SWAP6 AND PUSH2 0x180 MSTORE POP PUSH3 0x24C SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH12 0xFFFFFFFF0000000000000000 PUSH1 0x40 DUP5 SWAP1 SHL AND PUSH8 0xFFFFFFFF00000000 PUSH1 0x20 DUP5 SWAP1 SHL AND OR PUSH4 0xFFFFFFFF DUP3 AND OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH3 0x190 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP8 MLOAD PUSH3 0x19D DUP2 PUSH3 0x233 JUMP JUMPDEST PUSH1 0x20 DUP10 ADD MLOAD SWAP1 SWAP8 POP PUSH3 0x1B0 DUP2 PUSH3 0x233 JUMP JUMPDEST PUSH1 0x40 DUP10 ADD MLOAD SWAP1 SWAP7 POP PUSH3 0x1C3 DUP2 PUSH3 0x233 JUMP JUMPDEST PUSH1 0x60 DUP10 ADD MLOAD SWAP1 SWAP6 POP PUSH3 0x1D6 DUP2 PUSH3 0x233 JUMP JUMPDEST PUSH1 0x80 DUP10 ADD MLOAD SWAP1 SWAP5 POP PUSH3 0x1E9 DUP2 PUSH3 0x233 JUMP JUMPDEST DUP1 SWAP4 POP POP PUSH1 0xA0 DUP9 ADD MLOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD MLOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH1 0x60 SHR PUSH2 0x100 MLOAD PUSH1 0x60 SHR PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x160 MLOAD PUSH2 0x180 MLOAD PUSH1 0x60 SHR PUSH2 0x5755 PUSH3 0x2FF PUSH1 0x0 CODECOPY DUP1 PUSH2 0x83B MSTORE DUP1 PUSH2 0x8D4 MSTORE DUP1 PUSH2 0x9F6 MSTORE DUP1 PUSH2 0xAA5 MSTORE DUP1 PUSH2 0xCBE MSTORE DUP1 PUSH2 0xDB1 MSTORE DUP1 PUSH2 0xE40 MSTORE POP DUP1 PUSH2 0x21E MSTORE POP DUP1 PUSH2 0xF63 MSTORE POP DUP1 PUSH2 0x1002 MSTORE POP DUP1 PUSH2 0xF19 MSTORE POP DUP1 PUSH2 0xFB8 MSTORE POP DUP1 PUSH2 0xD8B MSTORE DUP1 PUSH2 0x3434 MSTORE POP DUP1 PUSH2 0x65F MSTORE DUP1 PUSH2 0x25C3 MSTORE POP DUP1 PUSH2 0x25A MSTORE DUP1 PUSH2 0x4E7 MSTORE DUP1 PUSH2 0x17A7 MSTORE DUP1 PUSH2 0x2D27 MSTORE DUP1 PUSH2 0x30E5 MSTORE POP PUSH2 0x5755 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x77725DF6 GT PUSH2 0x74 JUMPI DUP1 PUSH4 0x9A2967D2 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x9A2967D2 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0xDAB400F3 EQ PUSH2 0x1F4 JUMPI DUP1 PUSH4 0xF35B4733 EQ PUSH2 0x209 JUMPI PUSH2 0xC7 JUMP JUMPDEST DUP1 PUSH4 0x77725DF6 EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0x7A1EB1B9 EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0x1B2 JUMPI PUSH2 0xC7 JUMP JUMPDEST DUP1 PUSH4 0x209C02C5 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0x209C02C5 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x5161B966 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x150 JUMPI PUSH2 0xC7 JUMP JUMPDEST DUP1 PUSH4 0x31B905C EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x8378817 EQ PUSH2 0xF7 JUMPI DUP1 PUSH4 0xF3B31B2 EQ PUSH2 0x10A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH2 0x21C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEE SWAP2 SWAP1 PUSH2 0x480A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE1 PUSH2 0x105 CALLDATASIZE PUSH1 0x4 PUSH2 0x4277 JUMP JUMPDEST PUSH2 0x240 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x116 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH2 0x125 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E77 JUMP JUMPDEST PUSH2 0x479 JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0x4277 JUMP JUMPDEST PUSH2 0x4CD JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0x3E0D JUMP JUMPDEST PUSH2 0x837 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x165 PUSH2 0x98F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEE SWAP2 SWAP1 PUSH2 0x4999 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH2 0x18D CALLDATASIZE PUSH1 0x4 PUSH2 0x41BE JUMP JUMPDEST PUSH2 0x9C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH2 0x1AD CALLDATASIZE PUSH1 0x4 PUSH2 0x4205 JUMP JUMPDEST PUSH2 0xB16 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C7 PUSH2 0xB9D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEE SWAP2 SWAP1 PUSH2 0x4849 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH2 0x1EF CALLDATASIZE PUSH1 0x4 PUSH2 0x3E77 JUMP JUMPDEST PUSH2 0xCBA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH2 0xD89 JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x217 CALLDATASIZE PUSH1 0x4 PUSH2 0x4178 JUMP JUMPDEST PUSH2 0xDAD JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ ISZERO PUSH2 0x2BB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2CB DUP6 DUP8 ADD DUP8 PUSH2 0x3EE8 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x2 DUP3 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x32C JUMPI POP PUSH2 0x2E9 PUSH1 0x20 DUP9 ADD DUP9 PUSH2 0x3C4B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x30C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x389 JUMPI POP PUSH2 0x343 PUSH1 0x40 DUP9 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x3C4B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x369 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x3BF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4CBA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F4 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3D1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x3E6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH2 0xECB JUMP JUMPDEST SWAP1 POP PUSH2 0x406 PUSH1 0xA0 DUP10 ADD PUSH1 0x80 DUP11 ADD PUSH2 0x415C JUMP JUMPDEST ISZERO PUSH2 0x42F JUMPI PUSH2 0x42A DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x41B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP8 PUSH2 0x1033 JUMP JUMPDEST PUSH2 0x44F JUMP JUMPDEST PUSH2 0x44F DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x43F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD CALLER DUP4 DUP9 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0x46B DUP4 DUP7 DUP5 DUP5 PUSH2 0x466 PUSH1 0xC0 DUP15 ADD PUSH1 0xA0 DUP16 ADD PUSH2 0x3C4B JUMP JUMPDEST PUSH2 0x1214 JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C4 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP DUP4 PUSH2 0x139A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ ISZERO PUSH2 0x53F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4F0E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x54F DUP6 DUP8 ADD DUP8 PUSH2 0x3C67 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x564 PUSH1 0xA0 DUP9 ADD PUSH1 0x80 DUP10 ADD PUSH2 0x415C JUMP JUMPDEST ISZERO PUSH2 0x585 JUMPI PUSH2 0x580 PUSH2 0x579 PUSH1 0x20 DUP10 ADD DUP10 PUSH2 0x3C4B JUMP JUMPDEST DUP4 DUP7 PUSH2 0x1033 JUMP JUMPDEST PUSH2 0x59D JUMP JUMPDEST PUSH2 0x59D PUSH2 0x595 PUSH1 0x20 DUP10 ADD DUP10 PUSH2 0x3C4B JUMP JUMPDEST CALLER DUP5 DUP8 PUSH2 0x1115 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5AF PUSH1 0x40 DUP10 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x3C4B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH2 0x5DA PUSH1 0xC0 DUP12 ADD PUSH1 0xA0 DUP13 ADD PUSH2 0x3C4B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F6 SWAP2 SWAP1 PUSH2 0x47A2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x60E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x622 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x646 SWAP2 SWAP1 PUSH2 0x4539 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0xBB503E21 DUP5 PUSH2 0x692 PUSH1 0x20 DUP13 ADD DUP13 PUSH2 0x3C4B JUMP JUMPDEST PUSH2 0x6A2 PUSH1 0x40 DUP14 ADD PUSH1 0x20 DUP15 ADD PUSH2 0x3C4B JUMP JUMPDEST PUSH2 0x6B2 PUSH1 0xC0 DUP15 ADD PUSH1 0xA0 DUP16 ADD PUSH2 0x3C4B JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4906 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x704 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x7BC DUP2 DUP10 PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x71F SWAP2 SWAP1 PUSH2 0x3C4B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH2 0x74A PUSH1 0xC0 DUP14 ADD PUSH1 0xA0 DUP15 ADD PUSH2 0x3C4B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x766 SWAP2 SWAP1 PUSH2 0x47A2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x77E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x792 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7B6 SWAP2 SWAP1 PUSH2 0x4539 JUMP JUMPDEST SWAP1 PUSH2 0x155B JUMP JUMPDEST SWAP4 POP PUSH32 0x40A6BA9513D09E3488135E0E0D10E2D4382B792720155B144CBEA89AC9DB6D34 PUSH2 0x7EC PUSH1 0x20 DUP11 ADD DUP11 PUSH2 0x3C4B JUMP JUMPDEST PUSH2 0x7FC PUSH1 0x40 DUP12 ADD PUSH1 0x20 DUP13 ADD PUSH2 0x3C4B JUMP JUMPDEST DUP8 DUP8 DUP8 DUP14 PUSH1 0xA0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x812 SWAP2 SWAP1 PUSH2 0x3C4B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x824 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x47C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x87D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x8D2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4D17 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 CALLVALUE PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x93A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x94E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP9 DUP2 MSTORE CALLVALUE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x60 DUP3 ADD MSTORE CALLER PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x985 SWAP4 POP SWAP2 POP DUP5 SWAP1 POP PUSH2 0x139A JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D756C7469706C65784665617475726500000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA65 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP DUP4 PUSH2 0x1584 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xADA SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x480A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB08 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x471 CALLER DUP3 PUSH2 0x16C9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB93 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP DUP4 PUSH2 0x1584 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBC8 PUSH32 0xF35B473300000000000000000000000000000000000000000000000000000000 PUSH2 0x1771 JUMP JUMPDEST PUSH2 0xBF1 PUSH32 0x77725DF600000000000000000000000000000000000000000000000000000000 PUSH2 0x1771 JUMP JUMPDEST PUSH2 0xC1A PUSH32 0x7A1EB1B900000000000000000000000000000000000000000000000000000000 PUSH2 0x1771 JUMP JUMPDEST PUSH2 0xC43 PUSH32 0x5161B96600000000000000000000000000000000000000000000000000000000 PUSH2 0x1771 JUMP JUMPDEST PUSH2 0xC6C PUSH32 0x9A2967D200000000000000000000000000000000000000000000000000000000 PUSH2 0x1771 JUMP JUMPDEST PUSH2 0xC95 PUSH32 0xF3B31B200000000000000000000000000000000000000000000000000000000 PUSH2 0x1771 JUMP JUMPDEST POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0xD03 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD58 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4FEE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE ADDRESS PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0xA65 SWAP1 DUP4 PUSH2 0x139A JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 CALLVALUE PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE2B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x985 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLVALUE DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP DUP4 PUSH2 0x1584 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0xF0A JUMPI DUP5 DUP7 PUSH2 0xF0D JUMP JUMPDEST DUP6 DUP6 JUMPDEST SWAP2 POP SWAP2 POP DUP4 ISZERO PUSH2 0xFB6 JUMPI PUSH32 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF4B SWAP3 SWAP2 SWAP1 PUSH2 0x46B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH32 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF94 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x473C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP3 POP POP POP PUSH2 0x988 JUMP JUMPDEST PUSH32 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xFEA SWAP3 SWAP2 SWAP1 PUSH2 0x46B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH32 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF94 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x473C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ADDRESS EQ ISZERO PUSH2 0x1083 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4F91 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE DUP2 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND GAS CALL RETURNDATASIZE PUSH1 0x1 DUP4 MLOAD EQ PUSH1 0x20 DUP3 LT ISZERO AND DUP2 ISZERO OR DUP3 AND SWAP2 POP DUP2 PUSH2 0x110D JUMPI DUP1 PUSH1 0x0 DUP5 RETURNDATACOPY DUP1 DUP4 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ADDRESS EQ ISZERO PUSH2 0x1165 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4F91 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE DUP2 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x64 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND GAS CALL RETURNDATASIZE PUSH1 0x1 DUP4 MLOAD EQ PUSH1 0x20 DUP3 LT ISZERO AND DUP2 ISZERO OR DUP3 AND SWAP2 POP DUP2 PUSH2 0x120B JUMPI DUP1 PUSH1 0x0 DUP5 RETURNDATACOPY DUP1 DUP4 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x1 DUP8 MLOAD SUB DUP2 LT ISZERO PUSH2 0x1390 JUMPI PUSH1 0x0 DUP1 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1233 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP5 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x124A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP SWAP2 POP PUSH2 0x1262 DUP7 DUP4 DUP4 DUP12 PUSH2 0x1804 JUMP JUMPDEST SWAP4 POP PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x12A2 JUMPI DUP6 PUSH1 0x0 PUSH2 0x12A6 JUMP JUMPDEST PUSH1 0x0 DUP7 JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x2 DUP13 MLOAD SUB DUP7 LT PUSH2 0x12BD JUMPI DUP8 PUSH2 0x12DE JUMP JUMPDEST PUSH2 0x12DE DUP5 DUP14 DUP9 PUSH1 0x2 ADD DUP2 MLOAD DUP2 LT PUSH2 0x12D0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP13 PUSH2 0xECB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH32 0x22C0D9F00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND SWAP1 PUSH4 0x22C0D9F SWAP1 PUSH2 0x1346 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x5580 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1374 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 SWAP9 POP DUP7 SWAP11 POP POP POP POP POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x1218 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD MLOAD DUP3 MLOAD MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 ADD EQ PUSH2 0x13E0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4BDA JUMP JUMPDEST DUP3 MLOAD DUP1 MLOAD PUSH1 0x0 SWAP2 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0x1414 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP7 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x145D SWAP2 SWAP1 PUSH2 0x47A2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1475 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1489 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14AD SWAP2 SWAP1 PUSH2 0x4539 JUMP JUMPDEST SWAP1 POP PUSH2 0x14B7 PUSH2 0x3665 JUMP JUMPDEST PUSH2 0x14C0 DUP7 PUSH2 0x19C2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1505 DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP11 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x766 SWAP2 SWAP1 PUSH2 0x47A2 JUMP JUMPDEST SWAP1 POP PUSH2 0x1515 DUP2 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x1C15 JUMP JUMPDEST SWAP5 POP DUP6 DUP6 LT ISZERO PUSH2 0x1551 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4EB1 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1579 JUMPI PUSH2 0x1579 PUSH2 0x1574 PUSH1 0x2 DUP6 DUP6 PUSH2 0x1C2B JUMP JUMPDEST PUSH2 0x1CD0 JUMP JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP6 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C8 SWAP2 SWAP1 PUSH2 0x47A2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1618 SWAP2 SWAP1 PUSH2 0x4539 JUMP JUMPDEST SWAP1 POP PUSH2 0x1622 PUSH2 0x36B9 JUMP JUMPDEST PUSH2 0x162B DUP6 PUSH2 0x1CD8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1674 DUP4 DUP8 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP10 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x766 SWAP2 SWAP1 PUSH2 0x47A2 JUMP JUMPDEST SWAP1 POP PUSH2 0x1684 DUP2 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x1C15 JUMP JUMPDEST SWAP4 POP DUP5 DUP5 LT ISZERO PUSH2 0x16C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4A66 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x16EF SWAP1 PUSH2 0x479F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x172C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1731 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x176C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x50CE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0x17CF SWAP1 DUP5 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x4876 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x183F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x504B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1888 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x189C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x18C0 SWAP2 SWAP1 PUSH2 0x44BF JUMP JUMPDEST POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x18F5 JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST PUSH2 0x192B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x512B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x1968 JUMPI DUP3 DUP5 PUSH2 0x196B JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH2 0x197E DUP8 PUSH2 0x3E5 PUSH2 0x1EC0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x198C DUP3 DUP5 PUSH2 0x1EC0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x19A6 DUP4 PUSH2 0x19A0 DUP8 PUSH2 0x3E8 PUSH2 0x1EC0 JUMP JUMPDEST SWAP1 PUSH2 0x1EF1 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 DUP2 PUSH2 0x19B1 JUMPI INVALID JUMPDEST DIV SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x19CA PUSH2 0x3665 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD DUP2 MSTORE PUSH2 0x19DC DUP3 PUSH1 0x0 PUSH2 0x1F0D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD ISZERO DUP1 ISZERO PUSH2 0x1A23 JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ ISZERO JUMPDEST ISZERO PUSH2 0x1A54 JUMPI PUSH2 0x1A54 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1A3C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD CALLER DUP4 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x1115 JUMP JUMPDEST DUP2 PUSH1 0x60 ADD MLOAD DUP1 ISZERO PUSH2 0x1A7F JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS EQ ISZERO JUMPDEST ISZERO PUSH2 0x1AAF JUMPI PUSH2 0x1AAF DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1A98 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x1033 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD MLOAD DUP2 PUSH1 0x60 ADD MLOAD EQ PUSH2 0x1C10 JUMPI PUSH2 0x1ACF PUSH2 0x36D3 JUMP JUMPDEST DUP3 PUSH1 0x40 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x1AE3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x1AFE DUP4 DUP4 PUSH1 0x60 ADD MLOAD PUSH1 0x1 ADD PUSH2 0x1F0D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x3 DUP2 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1B28 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1B42 JUMPI PUSH2 0x1B3D DUP3 DUP5 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x20CD JUMP JUMPDEST PUSH2 0x1BDF JUMP JUMPDEST PUSH1 0x4 DUP2 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1B51 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1B65 JUMPI PUSH2 0x1B3D DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x2216 JUMP JUMPDEST PUSH1 0x5 DUP2 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1B74 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1B89 JUMPI PUSH2 0x1B3D DUP3 DUP5 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x24D1 JUMP JUMPDEST PUSH1 0x7 DUP2 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1B98 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1BAD JUMPI PUSH2 0x1B3D DUP3 DUP5 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x270F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x51AE JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP1 MLOAD PUSH1 0x1 ADD SWAP1 MSTORE PUSH2 0x1AB7 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1C24 JUMPI DUP2 PUSH2 0x988 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1C4A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4961 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH2 0x1CE0 PUSH2 0x36B9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 PUSH1 0x60 ADD MLOAD MLOAD DUP2 EQ PUSH2 0x1E81 JUMPI PUSH1 0x40 DUP4 ADD MLOAD DUP3 MLOAD LT PUSH2 0x1D00 JUMPI PUSH2 0x1E81 JUMP JUMPDEST PUSH2 0x1D08 PUSH2 0x36EB JUMP JUMPDEST DUP4 PUSH1 0x60 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D18 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x1D3B DUP3 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x27FA JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP3 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1D4C JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1D67 JUMPI PUSH2 0x1D62 DUP5 DUP7 DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x288C JUMP JUMPDEST PUSH2 0x1E77 JUMP JUMPDEST PUSH1 0x2 DUP3 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1D76 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1D8C JUMPI PUSH2 0x1D62 DUP5 DUP7 DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x2ADE JUMP JUMPDEST PUSH1 0x3 DUP3 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1D9B JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1DB1 JUMPI PUSH2 0x1D62 DUP5 DUP7 DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x2D21 JUMP JUMPDEST PUSH1 0x4 DUP3 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1DC0 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1DD6 JUMPI PUSH2 0x1D62 DUP5 DUP7 DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x5 DUP3 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1DE5 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1DFB JUMPI PUSH2 0x1D62 DUP5 DUP7 DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x30DF JUMP JUMPDEST PUSH1 0x6 DUP3 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1E0A JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1E20 JUMPI PUSH2 0x1D62 DUP5 DUP7 DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x3137 JUMP JUMPDEST PUSH1 0x8 DUP3 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1E2F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1E45 JUMPI PUSH2 0x1D62 DUP5 DUP7 DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x3288 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x49AC JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x1CE3 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 MLOAD EQ PUSH2 0x1C10 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4A09 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1ECF JUMPI POP PUSH1 0x0 PUSH2 0x157E JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1EDC JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x988 JUMPI PUSH2 0x988 PUSH2 0x1574 PUSH1 0x1 DUP7 DUP7 PUSH2 0x1C2B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x988 JUMPI PUSH2 0x988 PUSH2 0x1574 PUSH1 0x0 DUP7 DUP7 PUSH2 0x1C2B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD MLOAD MLOAD DUP3 EQ ISZERO PUSH2 0x1F27 JUMPI POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2080 JUMP JUMPDEST PUSH2 0x1F2F PUSH2 0x36D3 JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1F3F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1F56 JUMPI INVALID JUMPDEST DUP2 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1F63 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1FC5 JUMPI PUSH1 0x60 PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1F85 SWAP2 SWAP1 PUSH2 0x3F38 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1FBC DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1F99 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1FAE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH2 0xECB JUMP JUMPDEST SWAP4 POP POP POP PUSH2 0x207E JUMP JUMPDEST PUSH1 0x5 DUP2 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1FD4 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1FFA JUMPI DUP1 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1FF2 SWAP2 SWAP1 PUSH2 0x3CB5 JUMP JUMPDEST POP SWAP2 POP PUSH2 0x207E JUMP JUMPDEST PUSH1 0x4 DUP2 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x2009 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x2021 JUMPI POP PUSH1 0x7 DUP2 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x201F JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x204C JUMPI DUP3 ISZERO DUP1 ISZERO PUSH2 0x2036 JUMPI POP DUP4 PUSH1 0x60 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0x2043 JUMPI CALLER SWAP2 POP PUSH2 0x2047 JUMP JUMPDEST ADDRESS SWAP2 POP JUMPDEST PUSH2 0x207E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4B7D JUMP JUMPDEST POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x157E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4D74 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x20E5 SWAP2 SWAP1 PUSH2 0x3F38 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x2 DUP3 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x2152 JUMPI POP DUP4 MLOAD PUSH1 0x60 DUP7 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x2107 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2132 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x21BE JUMPI POP DUP4 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x2170 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x219E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x21F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4B20 JUMP JUMPDEST PUSH2 0x220D DUP3 DUP7 PUSH1 0x0 ADD MLOAD DUP4 DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x40 ADD MLOAD PUSH2 0x1214 JUMP JUMPDEST SWAP1 SWAP5 MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2368 JUMPI DUP4 MLOAD PUSH1 0x40 DUP1 DUP7 ADD MLOAD SWAP1 MLOAD ADDRESS SWAP3 PUSH32 0x4A931BA100000000000000000000000000000000000000000000000000000000 SWAP3 PUSH2 0x2292 SWAP3 DUP9 SWAP3 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x24 ADD PUSH2 0x48BE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x231B SWAP2 SWAP1 PUSH2 0x46EA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2358 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x235D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x2478 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x40 DUP1 DUP7 ADD MLOAD SWAP1 MLOAD ADDRESS SWAP3 PUSH32 0x6AF479B200000000000000000000000000000000000000000000000000000000 SWAP3 PUSH2 0x23A8 SWAP3 DUP9 SWAP3 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x24 ADD PUSH2 0x48BE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2431 SWAP2 SWAP1 PUSH2 0x46EA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x246C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2471 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP JUMPDEST DUP2 ISZERO PUSH2 0x2499 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2492 SWAP2 SWAP1 PUSH2 0x4539 JUMP JUMPDEST DUP5 MSTORE PUSH2 0x24CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4C5D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x24E7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x250A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x252C SWAP2 SWAP1 PUSH2 0x3CB5 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x256F SWAP2 SWAP1 PUSH2 0x47A2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2587 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x259B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x25BF SWAP2 SWAP1 PUSH2 0x4539 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBB503E21 DUP5 DUP8 DUP8 DUP13 PUSH1 0x40 ADD MLOAD PUSH1 0x0 DUP9 PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2629 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4906 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2643 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2657 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP10 MLOAD PUSH1 0x40 DUP1 DUP13 ADD MLOAD SWAP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP4 POP PUSH2 0x26BB SWAP3 POP DUP5 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0x766 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x47A2 JUMP JUMPDEST DUP1 DUP11 MSTORE PUSH1 0x40 DUP1 DUP12 ADD MLOAD SWAP1 MLOAD PUSH32 0x40A6BA9513D09E3488135E0E0D10E2D4382B792720155B144CBEA89AC9DB6D34 SWAP3 PUSH2 0x26FC SWAP3 DUP11 SWAP3 DUP11 SWAP3 DUP8 SWAP3 SWAP1 SWAP2 DUP12 SWAP2 SWAP1 PUSH2 0x47C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2717 PUSH2 0x370D JUMP JUMPDEST DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x272B SWAP2 SWAP1 PUSH2 0x3F7D JUMP JUMPDEST PUSH1 0x60 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD SWAP1 DUP6 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x2744 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE DUP3 MLOAD PUSH1 0x60 DUP6 ADD MLOAD DUP2 MLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP2 LT PUSH2 0x277E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD ISZERO ISZERO DUP1 PUSH2 0x27BE JUMPI POP DUP3 PUSH1 0x60 ADD MLOAD JUMPDEST ISZERO ISZERO PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x27EE DUP2 PUSH2 0x1CD8 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD SWAP1 SWAP4 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP1 DUP6 AND EQ ISZERO PUSH2 0x287E JUMPI PUSH2 0x2877 PUSH8 0xDE0B6B3A7640000 PUSH2 0x285E PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP3 PUSH2 0x1C15 JUMP JUMPDEST DUP6 MUL DUP2 PUSH2 0x2867 JUMPI INVALID JUMPDEST DIV PUSH2 0x2872 DUP6 DUP6 PUSH2 0x155B JUMP JUMPDEST PUSH2 0x1C15 JUMP JUMPDEST SWAP1 POP PUSH2 0x988 JUMP JUMPDEST PUSH2 0x2877 DUP5 PUSH2 0x2872 DUP6 DUP6 PUSH2 0x155B JUMP JUMPDEST PUSH2 0x2894 PUSH2 0x3741 JUMP JUMPDEST PUSH2 0x289C PUSH2 0x3795 JUMP JUMPDEST DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x28B0 SWAP2 SWAP1 PUSH2 0x43E0 JUMP JUMPDEST SWAP2 POP SWAP2 POP TIMESTAMP PUSH8 0xFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0x100 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0x2935 JUMPI PUSH1 0x0 PUSH2 0x28E7 PUSH2 0x28E2 DUP5 PUSH2 0x32F9 JUMP JUMPDEST PUSH2 0x3430 JUMP JUMPDEST SWAP1 POP PUSH32 0xD9EE00A67DAF7D99C37893015DC900862C9A02650EF2D318697E502E5FB8BBE2 DUP2 DUP5 PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x100 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2925 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4813 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP PUSH2 0x24CB JUMP JUMPDEST DUP5 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x29AB JUMPI POP DUP5 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x29E1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4E54 JUMP JUMPDEST ADDRESS PUSH4 0xAA6B21CD DUP4 DUP4 PUSH2 0x29F2 DUP8 PUSH2 0x3482 JUMP JUMPDEST CALLER DUP11 PUSH1 0x80 ADD MLOAD DUP12 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A1E SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x53E6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2A85 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2A82 SWAP2 DUP2 ADD SWAP1 PUSH2 0x450B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2A8E JUMPI PUSH2 0x110D JUMP JUMPDEST DUP8 MLOAD PUSH2 0x2AAC SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x1EF1 JUMP JUMPDEST DUP9 MSTORE PUSH1 0x20 DUP9 ADD MLOAD PUSH2 0x2ACF SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x1EF1 JUMP JUMPDEST PUSH1 0x20 DUP10 ADD MSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2AE6 PUSH2 0x37BE JUMP JUMPDEST PUSH2 0x2AEE PUSH2 0x3795 JUMP JUMPDEST DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2B02 SWAP2 SWAP1 PUSH2 0x4315 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP5 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x2B7C JUMPI POP DUP5 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x2BB2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4AC3 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0xC0 SHR PUSH8 0xFFFFFFFFFFFFFFFF TIMESTAMP AND DUP2 GT PUSH2 0x2C23 JUMPI PUSH1 0x0 PUSH2 0x2BD9 PUSH2 0x28E2 DUP6 PUSH2 0x34AE JUMP JUMPDEST SWAP1 POP PUSH32 0x5574C085411E1DCE1414A21A43F286A7BC07DE97B0AA6B9143FD5DCA66FAA583 DUP2 DUP6 PUSH1 0x80 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x2C12 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4813 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP PUSH2 0x24CB JUMP JUMPDEST ADDRESS PUSH4 0xE4BA8439 DUP5 DUP5 PUSH2 0x2C34 DUP9 PUSH2 0x3482 JUMP JUMPDEST CALLER DUP12 PUSH1 0x80 ADD MLOAD DUP13 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C60 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x52F3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2CC7 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2CC4 SWAP2 DUP2 ADD SWAP1 PUSH2 0x450B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2CD0 JUMPI PUSH2 0x120B JUMP JUMPDEST DUP9 MLOAD PUSH2 0x2CEE SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x1EF1 JUMP JUMPDEST DUP10 MSTORE PUSH1 0x20 DUP10 ADD MLOAD PUSH2 0x2D11 SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x1EF1 JUMP JUMPDEST PUSH1 0x20 DUP11 ADD MSTORE POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8378817 PUSH1 0xE0 SHL DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2D79 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x520B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2E02 SWAP2 SWAP1 PUSH2 0x46EA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2E3D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E42 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x110D JUMPI PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2E63 SWAP2 SWAP1 PUSH2 0x4539 JUMP JUMPDEST DUP8 MLOAD SWAP1 SWAP2 POP PUSH2 0x2E72 SWAP1 DUP6 PUSH2 0x1EF1 JUMP JUMPDEST DUP8 MSTORE PUSH1 0x20 DUP8 ADD MLOAD PUSH2 0x2E83 SWAP1 DUP3 PUSH2 0x1EF1 JUMP JUMPDEST PUSH1 0x20 DUP9 ADD MSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x80 ADD MLOAD ISZERO PUSH2 0x2FB4 JUMPI PUSH1 0xA0 DUP6 ADD MLOAD PUSH1 0x40 MLOAD ADDRESS SWAP2 PUSH32 0x4A931BA100000000000000000000000000000000000000000000000000000000 SWAP2 PUSH2 0x2EDE SWAP2 DUP9 SWAP2 DUP9 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x24 ADD PUSH2 0x48BE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2F67 SWAP2 SWAP1 PUSH2 0x46EA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2FA4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2FA9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x30C3 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MLOAD PUSH1 0x40 MLOAD ADDRESS SWAP2 PUSH32 0x6AF479B200000000000000000000000000000000000000000000000000000000 SWAP2 PUSH2 0x2FF3 SWAP2 DUP9 SWAP2 DUP9 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x24 ADD PUSH2 0x48BE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x307C SWAP2 SWAP1 PUSH2 0x46EA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x30B7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x30BC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP JUMPDEST DUP2 ISZERO PUSH2 0x110D JUMPI PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2E63 SWAP2 SWAP1 PUSH2 0x4539 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x209C02C5 PUSH1 0xE0 SHL DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2D79 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x520B JUMP JUMPDEST PUSH2 0x313F PUSH2 0x3802 JUMP JUMPDEST CALLER DUP2 MSTORE DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 DUP7 ADD MLOAD DUP3 AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x80 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP7 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xA0 DUP7 ADD MLOAD SWAP1 SWAP2 AND PUSH1 0xE0 DUP4 ADD MSTORE DUP4 MLOAD PUSH2 0x31AC SWAP2 SWAP1 DUP6 ADD DUP2 ADD SWAP1 DUP6 ADD PUSH2 0x4079 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x8AA6539B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x8AA6539B SWAP1 PUSH2 0x31ED SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x54DC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x3255 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3252 SWAP2 DUP2 ADD SWAP1 PUSH2 0x4539 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x325E JUMPI PUSH2 0x17FD JUMP JUMPDEST DUP6 MLOAD PUSH2 0x326A SWAP1 DUP5 PUSH2 0x1EF1 JUMP JUMPDEST DUP7 MSTORE PUSH1 0x20 DUP7 ADD MLOAD PUSH2 0x327B SWAP1 DUP3 PUSH2 0x1EF1 JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3290 PUSH2 0x3845 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x32A4 SWAP2 SWAP1 PUSH2 0x3CFA JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP1 DUP6 ADD MLOAD ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 DUP6 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x32E9 DUP3 PUSH2 0x19C2 JUMP JUMPDEST MLOAD DUP7 MLOAD SWAP1 SWAP2 POP PUSH2 0x326A SWAP1 DUP5 PUSH2 0x1EF1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xE593D3FDFA8B60E5E17A1B2204662ECBE15C23F2084B9AD5BAE40359540A7DA9 DUP2 MSTORE DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x100 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 DUP2 KECCAK256 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3465 SWAP3 SWAP2 SWAP1 PUSH2 0x4706 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x34AA JUMPI PUSH2 0x34AA PUSH2 0x1574 PUSH1 0x3 DUP5 PUSH2 0x35C3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x2F754524DE756AE72459EFBE1EC88C19A745639821DE528AC3FB88F9E65E35C8 DUP2 MSTORE DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x120 DUP2 KECCAK256 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xC996AF7B PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x35E0 SWAP3 SWAP2 SWAP1 PUSH2 0x4982 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x140 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x157E DUP2 PUSH2 0x5696 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x38A7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x38BA PUSH2 0x38B5 DUP3 PUSH2 0x55E2 JUMP JUMPDEST PUSH2 0x55BB JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x38DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3903 JUMPI DUP2 CALLDATALOAD PUSH2 0x38F1 DUP2 PUSH2 0x5696 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x38DE JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x391E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x392C PUSH2 0x38B5 DUP3 PUSH2 0x55E2 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x394D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3903 JUMPI DUP2 MLOAD PUSH2 0x3963 DUP2 PUSH2 0x5696 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3950 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3985 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3993 PUSH2 0x38B5 DUP3 PUSH2 0x55E2 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3903 JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH1 0x60 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP13 SUB ADD SLT ISZERO PUSH2 0x39E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39EC DUP2 PUSH2 0x55BB JUMP JUMPDEST DUP6 DUP4 ADD CALLDATALOAD PUSH2 0x39F9 DUP2 PUSH2 0x56C6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP4 DUP2 ADD CALLDATALOAD DUP8 DUP4 ADD MSTORE SWAP2 DUP4 ADD CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x3A1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3A2D DUP13 DUP9 DUP6 DUP8 ADD ADD PUSH2 0x3B0A JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x39A4 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3A55 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3A63 PUSH2 0x38B5 DUP3 PUSH2 0x55E2 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3903 JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH1 0x40 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP13 SUB ADD SLT ISZERO PUSH2 0x3AB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3ABC DUP2 PUSH2 0x55BB JUMP JUMPDEST PUSH2 0x3AC8 DUP12 DUP8 DUP6 ADD PUSH2 0x3BA5 JUMP JUMPDEST DUP2 MSTORE SWAP1 DUP3 ADD CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3AE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3AF2 DUP12 DUP8 DUP5 DUP7 ADD ADD PUSH2 0x3B0A JUMP JUMPDEST DUP2 DUP8 ADD MSTORE DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3A74 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3B1A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3B28 PUSH2 0x38B5 DUP3 PUSH2 0x5602 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3B3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3B68 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3B76 PUSH2 0x38B5 DUP3 PUSH2 0x5602 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3B8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B9E DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x565D JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x157E DUP2 PUSH2 0x56C6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3BC1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x3BCB PUSH1 0x80 PUSH2 0x55BB JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH1 0x4 DUP2 LT PUSH2 0x3BDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x3BF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x157E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x157E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3C5C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x988 DUP2 PUSH2 0x5696 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3C79 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3C84 DUP2 PUSH2 0x5696 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C9F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3CAB DUP6 DUP3 DUP7 ADD PUSH2 0x3B0A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3CC7 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x3CD2 DUP2 PUSH2 0x5696 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CEE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3CAB DUP6 DUP3 DUP7 ADD PUSH2 0x3B58 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3D0C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3D23 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x3D2F DUP7 DUP4 DUP8 ADD PUSH2 0x390E JUMP JUMPDEST SWAP4 POP PUSH1 0x20 SWAP2 POP DUP2 DUP6 ADD MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x3D45 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x3D55 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x3D63 PUSH2 0x38B5 DUP3 PUSH2 0x55E2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP4 DUP7 ADD DUP8 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3DFC JUMPI DUP2 MLOAD DUP7 ADD PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP16 SUB ADD SLT ISZERO PUSH2 0x3DAC JUMPI DUP10 DUP11 REVERT JUMPDEST PUSH2 0x3DB6 PUSH1 0x40 PUSH2 0x55BB JUMP JUMPDEST DUP10 DUP3 ADD MLOAD PUSH2 0x3DC3 DUP2 PUSH2 0x56C6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP10 DUP2 GT ISZERO PUSH2 0x3DD6 JUMPI DUP12 DUP13 REVERT JUMPDEST PUSH2 0x3DE4 DUP16 DUP13 DUP4 DUP7 ADD ADD PUSH2 0x3B58 JUMP JUMPDEST DUP3 DUP13 ADD MSTORE POP DUP6 MSTORE POP SWAP3 DUP8 ADD SWAP3 SWAP1 DUP8 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3D6F JUMP JUMPDEST POP SWAP8 SWAP11 SWAP1 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3E21 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3E38 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3E44 DUP8 DUP4 DUP9 ADD PUSH2 0x3897 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3E59 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x3E66 DUP7 DUP3 DUP8 ADD PUSH2 0x3A45 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3E8C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3EA3 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x3EAF DUP9 DUP4 DUP10 ADD PUSH2 0x3897 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3EC4 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x3ED1 DUP8 DUP3 DUP9 ADD PUSH2 0x3A45 JUMP JUMPDEST SWAP5 SWAP8 SWAP5 SWAP7 POP POP POP POP PUSH1 0x40 DUP4 ADD CALLDATALOAD SWAP3 PUSH1 0x60 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3EFA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3F10 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3F1C DUP6 DUP3 DUP7 ADD PUSH2 0x3897 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3F2D DUP2 PUSH2 0x56B8 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3F4A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3F60 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3F6C DUP6 DUP3 DUP7 ADD PUSH2 0x390E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x3F2D DUP2 PUSH2 0x56B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3F8F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3FA6 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3FB9 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3FC7 PUSH2 0x38B5 DUP3 PUSH2 0x55E2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP8 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x406A JUMPI DUP2 MLOAD DUP8 ADD PUSH1 0x60 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP16 SUB ADD SLT ISZERO PUSH2 0x4011 JUMPI DUP11 DUP12 REVERT JUMPDEST PUSH2 0x401A DUP2 PUSH2 0x55BB JUMP JUMPDEST DUP11 DUP4 ADD MLOAD PUSH2 0x4027 DUP2 PUSH2 0x56C6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP4 DUP2 ADD MLOAD DUP13 DUP4 ADD MSTORE SWAP2 DUP4 ADD MLOAD SWAP2 DUP10 DUP4 GT ISZERO PUSH2 0x4044 JUMPI DUP13 DUP14 REVERT JUMPDEST PUSH2 0x4052 DUP16 DUP14 DUP6 DUP8 ADD ADD PUSH2 0x3B58 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE DUP7 MSTORE POP POP SWAP3 DUP8 ADD SWAP3 SWAP1 DUP8 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3FD3 JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x408B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x40A2 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x40B5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x40C3 PUSH2 0x38B5 DUP3 PUSH2 0x55E2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP8 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x406A JUMPI DUP2 MLOAD DUP8 ADD PUSH1 0x40 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP16 SUB ADD SLT ISZERO PUSH2 0x410D JUMPI DUP11 DUP12 REVERT JUMPDEST PUSH2 0x4116 DUP2 PUSH2 0x55BB JUMP JUMPDEST DUP11 DUP4 ADD MLOAD PUSH2 0x4123 DUP2 PUSH2 0x570D JUMP JUMPDEST DUP2 MSTORE SWAP1 DUP3 ADD MLOAD SWAP1 DUP9 DUP3 GT ISZERO PUSH2 0x4136 JUMPI DUP12 DUP13 REVERT JUMPDEST PUSH2 0x4144 DUP15 DUP13 DUP5 DUP7 ADD ADD PUSH2 0x3B58 JUMP JUMPDEST DUP2 DUP13 ADD MSTORE DUP7 MSTORE POP POP SWAP3 DUP8 ADD SWAP3 SWAP1 DUP8 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x40CF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x416D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x988 DUP2 PUSH2 0x56B8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x418C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x4197 DUP2 PUSH2 0x5696 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x41B2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3E66 DUP7 DUP3 DUP8 ADD PUSH2 0x3975 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x41D3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x41DE DUP2 PUSH2 0x5696 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x41F9 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3ED1 DUP8 DUP3 DUP9 ADD PUSH2 0x3975 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x421C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x4227 DUP2 PUSH2 0x5696 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4237 DUP2 PUSH2 0x5696 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4252 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x425E DUP9 DUP3 DUP10 ADD PUSH2 0x3975 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP5 SWAP6 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP6 POP PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x428C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x42A3 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0xC0 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x42B6 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x42CB JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x42DE JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x42EC JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x42FD JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP8 POP SWAP5 SWAP6 PUSH1 0x40 ADD CALLDATALOAD SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 SUB PUSH2 0x180 DUP2 SLT ISZERO PUSH2 0x4329 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x100 DUP1 DUP3 SLT ISZERO PUSH2 0x4338 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x4341 DUP2 PUSH2 0x55BB JUMP JUMPDEST SWAP2 POP DUP5 MLOAD PUSH2 0x434E DUP2 PUSH2 0x5696 JUMP JUMPDEST DUP3 MSTORE PUSH2 0x435D DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x388C JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x436F DUP7 PUSH1 0x40 DUP8 ADD PUSH2 0x3C13 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x4381 DUP7 PUSH1 0x60 DUP8 ADD PUSH2 0x3C13 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4393 DUP7 PUSH1 0x80 DUP8 ADD PUSH2 0x388C JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x43A5 DUP7 PUSH1 0xA0 DUP8 ADD PUSH2 0x388C JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x43B7 DUP7 PUSH1 0xC0 DUP8 ADD PUSH2 0x388C JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE DUP2 SWAP4 POP PUSH2 0x43D5 DUP7 DUP3 DUP8 ADD PUSH2 0x3BB0 JUMP JUMPDEST SWAP3 POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 SUB PUSH2 0x1C0 DUP2 SLT ISZERO PUSH2 0x43F4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x140 DUP1 DUP3 SLT ISZERO PUSH2 0x4403 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x440C DUP2 PUSH2 0x55BB JUMP JUMPDEST SWAP2 POP PUSH2 0x4418 DUP7 DUP7 PUSH2 0x388C JUMP JUMPDEST DUP3 MSTORE PUSH2 0x4427 DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x388C JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4439 DUP7 PUSH1 0x40 DUP8 ADD PUSH2 0x3C13 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x444B DUP7 PUSH1 0x60 DUP8 ADD PUSH2 0x3C13 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x445D DUP7 PUSH1 0x80 DUP8 ADD PUSH2 0x388C JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x446F DUP7 PUSH1 0xA0 DUP8 ADD PUSH2 0x388C JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x4481 DUP7 PUSH1 0xC0 DUP8 ADD PUSH2 0x388C JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 PUSH2 0x449F DUP8 DUP3 DUP9 ADD PUSH2 0x3C33 JUMP JUMPDEST DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP1 DUP7 ADD MLOAD DUP2 DUP5 ADD MSTORE POP DUP2 SWAP4 POP PUSH2 0x43D5 DUP7 DUP3 DUP8 ADD PUSH2 0x3BB0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x44D3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x44DE DUP2 PUSH2 0x56D3 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x44EF DUP2 PUSH2 0x56D3 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x4500 DUP2 PUSH2 0x570D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x451D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x4528 DUP2 PUSH2 0x56EF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x3F2D DUP2 PUSH2 0x56EF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x454A JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x9 DUP2 LT PUSH2 0x455F JUMPI INVALID JUMPDEST DUP1 DUP5 MSTORE POP PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x60 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x471 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x4613 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD DUP1 DUP2 SWAP7 POP DUP3 DUP5 MUL DUP2 ADD SWAP2 POP DUP3 DUP7 ADD DUP6 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x4600 JUMPI DUP3 DUP5 SUB DUP10 MSTORE DUP2 MLOAD DUP1 MLOAD PUSH4 0xFFFFFFFF AND DUP6 MSTORE DUP6 ADD MLOAD PUSH1 0x40 DUP7 DUP7 ADD DUP2 SWAP1 MSTORE PUSH2 0x45EC DUP2 DUP8 ADD DUP4 PUSH2 0x4613 JUMP JUMPDEST SWAP11 DUP8 ADD SWAP11 SWAP6 POP POP POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x45BC JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST ISZERO ISZERO SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x462B DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x565D JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x4668 DUP2 PUSH2 0x5689 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 SWAP4 DUP5 SHL DUP2 AND DUP3 MSTORE SWAP2 SWAP1 SWAP3 SHL AND PUSH1 0x14 DUP3 ADD MSTORE PUSH1 0x28 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x46FC DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x565D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP4 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x35 DUP3 ADD MSTORE PUSH1 0x55 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND DUP2 MSTORE SWAP5 DUP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x48D1 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x4613 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND DUP4 MSTORE DUP1 DUP9 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP8 AND PUSH1 0x40 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x60 DUP5 ADD MSTORE POP DUP4 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x4955 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x4613 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x496E DUP6 PUSH2 0x5689 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x498F DUP5 PUSH2 0x5689 JUMP JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x20 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x988 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4613 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x33 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F65786563757465426174636853 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x656C6C2F494E56414C49445F53554243414C4C00000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x39 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F65786563757465426174636853 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x656C6C2F494E434F52524543545F414D4F554E545F534F4C4400000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x31 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F6D756C7469706C657842617463 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6853656C6C2F554E444552424F55474854000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x39 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C65784F74633A3A5F626174636853656C6C4F74634F72646572 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x2F4F54435F4F524445525F494E56414C49445F544F4B454E5300000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x39 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578556E697377617056323A3A5F6D756C7469486F7053656C PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6C556E697377617056322F494E56414C49445F544F4B454E5300000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x33 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F636F6D70757465486F70546172 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6765742F494E56414C49445F53554243414C4C00000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x41 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F6D756C7469706C65784D756C74 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x69486F7053656C6C2F4D49534D4154434845445F41525241595F4C454E475448 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x5300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578556E697377617056333A3A5F6D756C7469486F7053656C PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6C556E697377617056332F535741505F4641494C454400000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578556E697377617056323A3A5F626174636853656C6C556E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x697377617056322F494E56414C49445F544F4B454E5300000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A6D756C7469706C65784D756C7469 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x486F7053656C6C457468466F72546F6B656E2F4E4F545F574554480000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F636F6D70757465486F70546172 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6765742F5441524745545F49535F4E554C4C0000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x49 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C65784C697175696469747950726F76696465723A3A5F626174 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x636853656C6C556E6973776170563245787465726E616C2F4F4E4C595F44454C PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x454741544543414C4C0000000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x39 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C65785266713A3A5F626174636853656C6C5266714F72646572 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x2F5246515F4F524445525F494E56414C49445F544F4B454E5300000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x34 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F6D756C7469706C65784D756C74 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x69486F7053656C6C2F554E444552424F55474854000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x51 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C65784C697175696469747950726F76696465723A3A5F626174 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x636853656C6C4C697175696469747950726F766964657245787465726E616C2F PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x4F4E4C595F44454C454741544543414C4C000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x466978696E546F6B656E5370656E6465722F43414E4E4F545F494E564F4B455F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x53454C4600000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A6D756C7469706C65784D756C7469 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x486F7053656C6C546F6B656E466F724574682F4E4F545F574554480000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x49 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578556E697377617056323A3A5F636F6D70757465556E6973 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7761704F7574707574416D6F756E742F494E53554646494349454E545F494E50 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x55545F414D4F554E540000000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F7472616E736665724574682F54 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x52414E534645525F4641494C4544000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x46 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578556E697377617056323A3A5F636F6D70757465556E6973 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7761704F7574707574416D6F756E742F494E53554646494349454E545F4C4951 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x5549444954590000000000000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F657865637574654D756C746948 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F7053656C6C2F494E56414C49445F53554243414C4C00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x120 DUP3 ADD PUSH2 0x5220 DUP7 MLOAD PUSH2 0x5644 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 DUP9 ADD MLOAD AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x40 DUP8 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0xC0 DUP1 DUP7 ADD MSTORE DUP3 DUP2 MLOAD PUSH2 0x5268 DUP2 DUP7 PUSH2 0x480A JUMP JUMPDEST SWAP5 POP SWAP2 DUP4 ADD SWAP2 DUP5 SWAP2 POP DUP1 DUP5 MUL DUP3 ADD DUP7 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x52A2 JUMPI DUP7 DUP3 SUB DUP5 MSTORE PUSH2 0x5290 DUP3 DUP7 MLOAD PUSH2 0x4551 JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP4 DUP7 ADD SWAP4 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x5278 JUMP JUMPDEST POP PUSH1 0x80 DUP12 ADD MLOAD SWAP6 POP PUSH2 0x52B7 PUSH1 0xE0 DUP10 ADD DUP8 PUSH2 0x460D JUMP JUMPDEST PUSH1 0xA0 DUP12 ADD MLOAD SWAP6 POP PUSH2 0x52CC PUSH2 0x100 DUP10 ADD DUP8 PUSH2 0x4586 JUMP JUMPDEST DUP8 DUP2 SUB DUP6 DUP10 ADD MSTORE PUSH2 0x52DD DUP2 DUP12 PUSH2 0x4613 JUMP JUMPDEST SWAP7 POP POP POP POP POP POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP7 MLOAD PUSH2 0x200 DUP3 ADD SWAP1 PUSH2 0x5304 SWAP1 PUSH2 0x5644 JUMP JUMPDEST DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP10 ADD MLOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP9 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x40 DUP6 ADD MSTORE DUP1 PUSH1 0x60 DUP12 ADD MLOAD AND PUSH1 0x60 DUP6 ADD MSTORE POP POP PUSH1 0x80 DUP9 ADD MLOAD PUSH2 0x5364 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP PUSH1 0xA0 DUP9 ADD MLOAD PUSH2 0x5377 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP PUSH1 0xC0 DUP9 ADD MLOAD PUSH2 0x538A PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP PUSH1 0xE0 DUP9 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x53A3 PUSH2 0x100 DUP4 ADD DUP9 PUSH2 0x465D JUMP JUMPDEST PUSH2 0x53B1 PUSH2 0x180 DUP4 ADD DUP8 PUSH2 0x468C JUMP JUMPDEST PUSH2 0x53BF PUSH2 0x1A0 DUP4 ADD DUP7 PUSH2 0x4586 JUMP JUMPDEST PUSH2 0x53CD PUSH2 0x1C0 DUP4 ADD DUP6 PUSH2 0x460D JUMP JUMPDEST PUSH2 0x53DB PUSH2 0x1E0 DUP4 ADD DUP5 PUSH2 0x4586 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x240 DUP3 ADD SWAP1 POP PUSH2 0x53FA DUP3 DUP10 MLOAD PUSH2 0x4586 JUMP JUMPDEST PUSH1 0x20 DUP9 ADD MLOAD PUSH2 0x540C PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP PUSH1 0x40 DUP9 ADD MLOAD PUSH2 0x541F PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x468C JUMP JUMPDEST POP PUSH1 0x60 DUP9 ADD MLOAD PUSH2 0x5432 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x468C JUMP JUMPDEST POP PUSH1 0x80 DUP9 ADD MLOAD PUSH2 0x5445 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP PUSH1 0xA0 DUP9 ADD MLOAD PUSH2 0x5458 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP PUSH1 0xC0 DUP9 ADD MLOAD PUSH2 0x546B PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP PUSH1 0xE0 DUP9 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP10 ADD MLOAD PUSH2 0x5489 DUP3 DUP6 ADD DUP3 PUSH2 0x46A2 JUMP JUMPDEST POP POP PUSH2 0x120 DUP9 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x54A4 PUSH2 0x140 DUP4 ADD DUP9 PUSH2 0x465D JUMP JUMPDEST PUSH2 0x54B2 PUSH2 0x1C0 DUP4 ADD DUP8 PUSH2 0x468C JUMP JUMPDEST PUSH2 0x54C0 PUSH2 0x1E0 DUP4 ADD DUP7 PUSH2 0x4586 JUMP JUMPDEST PUSH2 0x54CE PUSH2 0x200 DUP4 ADD DUP6 PUSH2 0x460D JUMP JUMPDEST PUSH2 0x53DB PUSH2 0x220 DUP4 ADD DUP5 PUSH2 0x4586 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x20 DUP6 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x551F PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x100 DUP1 PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0x5550 PUSH2 0x120 DUP6 ADD DUP4 PUSH2 0x45A0 JUMP JUMPDEST SWAP2 POP PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x5564 PUSH1 0xE0 DUP7 ADD DUP3 PUSH2 0x460D JUMP JUMPDEST POP PUSH1 0xE0 DUP6 ADD MLOAD PUSH2 0x5576 DUP3 DUP7 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP SWAP1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0xB93 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x4613 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x55DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x55F8 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x5618 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5678 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x5660 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x24CB JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x5693 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5693 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x5693 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x9 DUP2 LT PUSH2 0x5693 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5693 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5693 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5693 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0x698F RETURN PUSH16 0x33BC6810EF488849CE415F6C4787AEC4 0xC6 0x5D 0xC2 0xE1 MSTORE8 PUSH5 0xABD0BBCD90 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "1461:27681:17:-:0;;;1890:23;1905:1;1908;;1890:14;:23::i;:::-;1838:75;;2221:568;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1920:4:24;1894:31;;;;;;1743:17:18;;;-1:-1:-1;;;;;;1743:17:18;;;1286:487:25;;2626:14:17;;2654:16;;2684:23;;2721:25;;2527:13;;1209:9:25;;1286:487;;1318:292;;1632:19;;1673:18;;1209:9;;2527:13:17;;1286:487:25;;;:::i;:::-;;;;-1:-1:-1;;1286:487:25;;;;;;;;;1259:528;;1286:487;1259:528;;;;1233:554;;-1:-1:-1;;;;;;;;1754:32:22;;;;;;;;1796:36;;;;;;;1842:53;;;;;1905:57;;2771:11:17;;;;;;::::3;::::0;-1:-1:-1;1461:27681:17;;-1:-1:-1;;;;;1461:27681:17;2672:235:24;2834:20;2852:2;2834:20;;;;2859;2877:2;2859:20;;;;2833:47;2883:17;;;2833:67;2672:235;;;;;:::o;681:1195:-1:-;;;;;;;;954:3;942:9;933:7;929:23;925:33;922:2;;;-1:-1;;961:12;922:2;89:6;83:13;101:33;128:5;101:33;:::i;:::-;1124:2;1197:22;;388:13;1013:74;;-1:-1;406:56;388:13;406:56;:::i;:::-;1266:2;1349:22;;585:13;1132:97;;-1:-1;603:66;585:13;603:66;:::i;:::-;1418:2;1468:22;;83:13;1274:107;;-1:-1;101:33;83:13;101:33;:::i;:::-;1537:3;1588:22;;83:13;1426:74;;-1:-1;101:33;83:13;101:33;:::i;:::-;1546:74;;;;1657:3;1712:9;1708:22;224:13;1666:74;;1777:3;1832:9;1828:22;224:13;1786:74;;916:960;;;;;;;;;;:::o;2243:668::-;2074:37;;;2647:2;2632:18;;2074:37;;;;2730:2;2715:18;;2074:37;;;;2813:2;2798:18;;2074:37;-1:-1;;;;;3409:54;2896:3;2881:19;;1954:37;2482:3;2467:19;;2453:458::o;3554:117::-;-1:-1;;;;;3409:54;;3613:35;;3603:2;;3662:1;;3652:12;3603:2;3597:74;:::o;:::-;1461:27681:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "2025": [
                        {
                            "length": 32,
                            "start": 542
                        }
                    ],
                    "2040": [
                        {
                            "length": 32,
                            "start": 2107
                        },
                        {
                            "length": 32,
                            "start": 2260
                        },
                        {
                            "length": 32,
                            "start": 2550
                        },
                        {
                            "length": 32,
                            "start": 2725
                        },
                        {
                            "length": 32,
                            "start": 3262
                        },
                        {
                            "length": 32,
                            "start": 3505
                        },
                        {
                            "length": 32,
                            "start": 3648
                        }
                    ],
                    "3270": [
                        {
                            "length": 32,
                            "start": 1631
                        },
                        {
                            "length": 32,
                            "start": 9667
                        }
                    ],
                    "3996": [
                        {
                            "length": 32,
                            "start": 4024
                        }
                    ],
                    "3998": [
                        {
                            "length": 32,
                            "start": 3865
                        }
                    ],
                    "4000": [
                        {
                            "length": 32,
                            "start": 4098
                        }
                    ],
                    "4002": [
                        {
                            "length": 32,
                            "start": 3939
                        }
                    ],
                    "4784": [
                        {
                            "length": 32,
                            "start": 602
                        },
                        {
                            "length": 32,
                            "start": 1255
                        },
                        {
                            "length": 32,
                            "start": 6055
                        },
                        {
                            "length": 32,
                            "start": 11559
                        },
                        {
                            "length": 32,
                            "start": 12517
                        }
                    ],
                    "4914": [
                        {
                            "length": 32,
                            "start": 3467
                        },
                        {
                            "length": 32,
                            "start": 13364
                        }
                    ]
                },
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x77725DF6 GT PUSH2 0x74 JUMPI DUP1 PUSH4 0x9A2967D2 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x9A2967D2 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0xDAB400F3 EQ PUSH2 0x1F4 JUMPI DUP1 PUSH4 0xF35B4733 EQ PUSH2 0x209 JUMPI PUSH2 0xC7 JUMP JUMPDEST DUP1 PUSH4 0x77725DF6 EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0x7A1EB1B9 EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0x1B2 JUMPI PUSH2 0xC7 JUMP JUMPDEST DUP1 PUSH4 0x209C02C5 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0x209C02C5 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0x5161B966 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x150 JUMPI PUSH2 0xC7 JUMP JUMPDEST DUP1 PUSH4 0x31B905C EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x8378817 EQ PUSH2 0xF7 JUMPI DUP1 PUSH4 0xF3B31B2 EQ PUSH2 0x10A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH2 0x21C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEE SWAP2 SWAP1 PUSH2 0x480A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE1 PUSH2 0x105 CALLDATASIZE PUSH1 0x4 PUSH2 0x4277 JUMP JUMPDEST PUSH2 0x240 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x116 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH2 0x125 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E77 JUMP JUMPDEST PUSH2 0x479 JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0x4277 JUMP JUMPDEST PUSH2 0x4CD JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x14B CALLDATASIZE PUSH1 0x4 PUSH2 0x3E0D JUMP JUMPDEST PUSH2 0x837 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x165 PUSH2 0x98F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEE SWAP2 SWAP1 PUSH2 0x4999 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH2 0x18D CALLDATASIZE PUSH1 0x4 PUSH2 0x41BE JUMP JUMPDEST PUSH2 0x9C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH2 0x1AD CALLDATASIZE PUSH1 0x4 PUSH2 0x4205 JUMP JUMPDEST PUSH2 0xB16 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C7 PUSH2 0xB9D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEE SWAP2 SWAP1 PUSH2 0x4849 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH2 0x1EF CALLDATASIZE PUSH1 0x4 PUSH2 0x3E77 JUMP JUMPDEST PUSH2 0xCBA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH2 0xD89 JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x217 CALLDATASIZE PUSH1 0x4 PUSH2 0x4178 JUMP JUMPDEST PUSH2 0xDAD JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ ISZERO PUSH2 0x2BB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2CB DUP6 DUP8 ADD DUP8 PUSH2 0x3EE8 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x2 DUP3 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x32C JUMPI POP PUSH2 0x2E9 PUSH1 0x20 DUP9 ADD DUP9 PUSH2 0x3C4B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x30C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x389 JUMPI POP PUSH2 0x343 PUSH1 0x40 DUP9 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x3C4B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x369 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x3BF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4CBA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F4 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3D1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x3E6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH2 0xECB JUMP JUMPDEST SWAP1 POP PUSH2 0x406 PUSH1 0xA0 DUP10 ADD PUSH1 0x80 DUP11 ADD PUSH2 0x415C JUMP JUMPDEST ISZERO PUSH2 0x42F JUMPI PUSH2 0x42A DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x41B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP8 PUSH2 0x1033 JUMP JUMPDEST PUSH2 0x44F JUMP JUMPDEST PUSH2 0x44F DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x43F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD CALLER DUP4 DUP9 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0x46B DUP4 DUP7 DUP5 DUP5 PUSH2 0x466 PUSH1 0xC0 DUP15 ADD PUSH1 0xA0 DUP16 ADD PUSH2 0x3C4B JUMP JUMPDEST PUSH2 0x1214 JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C4 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP DUP4 PUSH2 0x139A JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ ISZERO PUSH2 0x53F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4F0E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x54F DUP6 DUP8 ADD DUP8 PUSH2 0x3C67 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x564 PUSH1 0xA0 DUP9 ADD PUSH1 0x80 DUP10 ADD PUSH2 0x415C JUMP JUMPDEST ISZERO PUSH2 0x585 JUMPI PUSH2 0x580 PUSH2 0x579 PUSH1 0x20 DUP10 ADD DUP10 PUSH2 0x3C4B JUMP JUMPDEST DUP4 DUP7 PUSH2 0x1033 JUMP JUMPDEST PUSH2 0x59D JUMP JUMPDEST PUSH2 0x59D PUSH2 0x595 PUSH1 0x20 DUP10 ADD DUP10 PUSH2 0x3C4B JUMP JUMPDEST CALLER DUP5 DUP8 PUSH2 0x1115 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5AF PUSH1 0x40 DUP10 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x3C4B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH2 0x5DA PUSH1 0xC0 DUP12 ADD PUSH1 0xA0 DUP13 ADD PUSH2 0x3C4B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F6 SWAP2 SWAP1 PUSH2 0x47A2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x60E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x622 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x646 SWAP2 SWAP1 PUSH2 0x4539 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0xBB503E21 DUP5 PUSH2 0x692 PUSH1 0x20 DUP13 ADD DUP13 PUSH2 0x3C4B JUMP JUMPDEST PUSH2 0x6A2 PUSH1 0x40 DUP14 ADD PUSH1 0x20 DUP15 ADD PUSH2 0x3C4B JUMP JUMPDEST PUSH2 0x6B2 PUSH1 0xC0 DUP15 ADD PUSH1 0xA0 DUP16 ADD PUSH2 0x3C4B JUMP JUMPDEST PUSH1 0x0 DUP9 PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D6 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4906 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x704 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x7BC DUP2 DUP10 PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x71F SWAP2 SWAP1 PUSH2 0x3C4B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH2 0x74A PUSH1 0xC0 DUP14 ADD PUSH1 0xA0 DUP15 ADD PUSH2 0x3C4B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x766 SWAP2 SWAP1 PUSH2 0x47A2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x77E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x792 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7B6 SWAP2 SWAP1 PUSH2 0x4539 JUMP JUMPDEST SWAP1 PUSH2 0x155B JUMP JUMPDEST SWAP4 POP PUSH32 0x40A6BA9513D09E3488135E0E0D10E2D4382B792720155B144CBEA89AC9DB6D34 PUSH2 0x7EC PUSH1 0x20 DUP11 ADD DUP11 PUSH2 0x3C4B JUMP JUMPDEST PUSH2 0x7FC PUSH1 0x40 DUP12 ADD PUSH1 0x20 DUP13 ADD PUSH2 0x3C4B JUMP JUMPDEST DUP8 DUP8 DUP8 DUP14 PUSH1 0xA0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x812 SWAP2 SWAP1 PUSH2 0x3C4B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x824 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x47C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x87D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x8D2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4D17 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 CALLVALUE PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x93A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x94E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP9 DUP2 MSTORE CALLVALUE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x60 DUP3 ADD MSTORE CALLER PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x985 SWAP4 POP SWAP2 POP DUP5 SWAP1 POP PUSH2 0x139A JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4D756C7469706C65784665617475726500000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA65 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP DUP4 PUSH2 0x1584 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xADA SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x480A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB08 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x471 CALLER DUP3 PUSH2 0x16C9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB93 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP DUP4 PUSH2 0x1584 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBC8 PUSH32 0xF35B473300000000000000000000000000000000000000000000000000000000 PUSH2 0x1771 JUMP JUMPDEST PUSH2 0xBF1 PUSH32 0x77725DF600000000000000000000000000000000000000000000000000000000 PUSH2 0x1771 JUMP JUMPDEST PUSH2 0xC1A PUSH32 0x7A1EB1B900000000000000000000000000000000000000000000000000000000 PUSH2 0x1771 JUMP JUMPDEST PUSH2 0xC43 PUSH32 0x5161B96600000000000000000000000000000000000000000000000000000000 PUSH2 0x1771 JUMP JUMPDEST PUSH2 0xC6C PUSH32 0x9A2967D200000000000000000000000000000000000000000000000000000000 PUSH2 0x1771 JUMP JUMPDEST PUSH2 0xC95 PUSH32 0xF3B31B200000000000000000000000000000000000000000000000000000000 PUSH2 0x1771 JUMP JUMPDEST POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0xD03 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD58 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4FEE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE ADDRESS PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0xA65 SWAP1 DUP4 PUSH2 0x139A JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 CALLVALUE PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE2B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x985 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLVALUE DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP DUP4 PUSH2 0x1584 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0xF0A JUMPI DUP5 DUP7 PUSH2 0xF0D JUMP JUMPDEST DUP6 DUP6 JUMPDEST SWAP2 POP SWAP2 POP DUP4 ISZERO PUSH2 0xFB6 JUMPI PUSH32 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF4B SWAP3 SWAP2 SWAP1 PUSH2 0x46B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH32 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF94 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x473C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR SWAP3 POP POP POP PUSH2 0x988 JUMP JUMPDEST PUSH32 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xFEA SWAP3 SWAP2 SWAP1 PUSH2 0x46B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH32 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF94 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x473C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ADDRESS EQ ISZERO PUSH2 0x1083 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4F91 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE DUP2 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND GAS CALL RETURNDATASIZE PUSH1 0x1 DUP4 MLOAD EQ PUSH1 0x20 DUP3 LT ISZERO AND DUP2 ISZERO OR DUP3 AND SWAP2 POP DUP2 PUSH2 0x110D JUMPI DUP1 PUSH1 0x0 DUP5 RETURNDATACOPY DUP1 DUP4 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ADDRESS EQ ISZERO PUSH2 0x1165 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4F91 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE DUP2 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x64 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND GAS CALL RETURNDATASIZE PUSH1 0x1 DUP4 MLOAD EQ PUSH1 0x20 DUP3 LT ISZERO AND DUP2 ISZERO OR DUP3 AND SWAP2 POP DUP2 PUSH2 0x120B JUMPI DUP1 PUSH1 0x0 DUP5 RETURNDATACOPY DUP1 DUP4 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x1 DUP8 MLOAD SUB DUP2 LT ISZERO PUSH2 0x1390 JUMPI PUSH1 0x0 DUP1 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1233 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP5 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x124A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP SWAP2 POP PUSH2 0x1262 DUP7 DUP4 DUP4 DUP12 PUSH2 0x1804 JUMP JUMPDEST SWAP4 POP PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x12A2 JUMPI DUP6 PUSH1 0x0 PUSH2 0x12A6 JUMP JUMPDEST PUSH1 0x0 DUP7 JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH1 0x2 DUP13 MLOAD SUB DUP7 LT PUSH2 0x12BD JUMPI DUP8 PUSH2 0x12DE JUMP JUMPDEST PUSH2 0x12DE DUP5 DUP14 DUP9 PUSH1 0x2 ADD DUP2 MLOAD DUP2 LT PUSH2 0x12D0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP13 PUSH2 0xECB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH32 0x22C0D9F00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND SWAP1 PUSH4 0x22C0D9F SWAP1 PUSH2 0x1346 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x5580 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1374 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 SWAP9 POP DUP7 SWAP11 POP POP POP POP POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x1218 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD MLOAD DUP3 MLOAD MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 ADD EQ PUSH2 0x13E0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4BDA JUMP JUMPDEST DUP3 MLOAD DUP1 MLOAD PUSH1 0x0 SWAP2 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0x1414 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP7 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x145D SWAP2 SWAP1 PUSH2 0x47A2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1475 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1489 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14AD SWAP2 SWAP1 PUSH2 0x4539 JUMP JUMPDEST SWAP1 POP PUSH2 0x14B7 PUSH2 0x3665 JUMP JUMPDEST PUSH2 0x14C0 DUP7 PUSH2 0x19C2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1505 DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP11 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x766 SWAP2 SWAP1 PUSH2 0x47A2 JUMP JUMPDEST SWAP1 POP PUSH2 0x1515 DUP2 DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x1C15 JUMP JUMPDEST SWAP5 POP DUP6 DUP6 LT ISZERO PUSH2 0x1551 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4EB1 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1579 JUMPI PUSH2 0x1579 PUSH2 0x1574 PUSH1 0x2 DUP6 DUP6 PUSH2 0x1C2B JUMP JUMPDEST PUSH2 0x1CD0 JUMP JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP6 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15C8 SWAP2 SWAP1 PUSH2 0x47A2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1618 SWAP2 SWAP1 PUSH2 0x4539 JUMP JUMPDEST SWAP1 POP PUSH2 0x1622 PUSH2 0x36B9 JUMP JUMPDEST PUSH2 0x162B DUP6 PUSH2 0x1CD8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1674 DUP4 DUP8 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP10 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x766 SWAP2 SWAP1 PUSH2 0x47A2 JUMP JUMPDEST SWAP1 POP PUSH2 0x1684 DUP2 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x1C15 JUMP JUMPDEST SWAP4 POP DUP5 DUP5 LT ISZERO PUSH2 0x16C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4A66 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x16EF SWAP1 PUSH2 0x479F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x172C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1731 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x176C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x50CE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0x17CF SWAP1 DUP5 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x4876 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x17E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x17FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x183F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x504B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x902F1AC PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1888 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x189C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x18C0 SWAP2 SWAP1 PUSH2 0x44BF JUMP JUMPDEST POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x18F5 JUMPI POP PUSH1 0x0 DUP2 GT JUMPDEST PUSH2 0x192B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x512B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x1968 JUMPI DUP3 DUP5 PUSH2 0x196B JUMP JUMPDEST DUP4 DUP4 JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 PUSH2 0x197E DUP8 PUSH2 0x3E5 PUSH2 0x1EC0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x198C DUP3 DUP5 PUSH2 0x1EC0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x19A6 DUP4 PUSH2 0x19A0 DUP8 PUSH2 0x3E8 PUSH2 0x1EC0 JUMP JUMPDEST SWAP1 PUSH2 0x1EF1 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 DUP2 PUSH2 0x19B1 JUMPI INVALID JUMPDEST DIV SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x19CA PUSH2 0x3665 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD DUP2 MSTORE PUSH2 0x19DC DUP3 PUSH1 0x0 PUSH2 0x1F0D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD ISZERO DUP1 ISZERO PUSH2 0x1A23 JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ ISZERO JUMPDEST ISZERO PUSH2 0x1A54 JUMPI PUSH2 0x1A54 DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1A3C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD CALLER DUP4 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x1115 JUMP JUMPDEST DUP2 PUSH1 0x60 ADD MLOAD DUP1 ISZERO PUSH2 0x1A7F JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS EQ ISZERO JUMPDEST ISZERO PUSH2 0x1AAF JUMPI PUSH2 0x1AAF DUP3 PUSH1 0x0 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1A98 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x1033 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD MLOAD DUP2 PUSH1 0x60 ADD MLOAD EQ PUSH2 0x1C10 JUMPI PUSH2 0x1ACF PUSH2 0x36D3 JUMP JUMPDEST DUP3 PUSH1 0x40 ADD MLOAD DUP3 PUSH1 0x60 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x1AE3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x1AFE DUP4 DUP4 PUSH1 0x60 ADD MLOAD PUSH1 0x1 ADD PUSH2 0x1F0D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x3 DUP2 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1B28 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1B42 JUMPI PUSH2 0x1B3D DUP3 DUP5 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x20CD JUMP JUMPDEST PUSH2 0x1BDF JUMP JUMPDEST PUSH1 0x4 DUP2 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1B51 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1B65 JUMPI PUSH2 0x1B3D DUP3 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x2216 JUMP JUMPDEST PUSH1 0x5 DUP2 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1B74 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1B89 JUMPI PUSH2 0x1B3D DUP3 DUP5 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x24D1 JUMP JUMPDEST PUSH1 0x7 DUP2 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1B98 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1BAD JUMPI PUSH2 0x1B3D DUP3 DUP5 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x270F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x51AE JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP1 MLOAD PUSH1 0x1 ADD SWAP1 MSTORE PUSH2 0x1AB7 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1C24 JUMPI DUP2 PUSH2 0x988 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1C4A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4961 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH2 0x1CE0 PUSH2 0x36B9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 PUSH1 0x60 ADD MLOAD MLOAD DUP2 EQ PUSH2 0x1E81 JUMPI PUSH1 0x40 DUP4 ADD MLOAD DUP3 MLOAD LT PUSH2 0x1D00 JUMPI PUSH2 0x1E81 JUMP JUMPDEST PUSH2 0x1D08 PUSH2 0x36EB JUMP JUMPDEST DUP4 PUSH1 0x60 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D18 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH2 0x1D3B DUP3 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x27FA JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP3 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1D4C JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1D67 JUMPI PUSH2 0x1D62 DUP5 DUP7 DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x288C JUMP JUMPDEST PUSH2 0x1E77 JUMP JUMPDEST PUSH1 0x2 DUP3 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1D76 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1D8C JUMPI PUSH2 0x1D62 DUP5 DUP7 DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x2ADE JUMP JUMPDEST PUSH1 0x3 DUP3 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1D9B JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1DB1 JUMPI PUSH2 0x1D62 DUP5 DUP7 DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x2D21 JUMP JUMPDEST PUSH1 0x4 DUP3 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1DC0 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1DD6 JUMPI PUSH2 0x1D62 DUP5 DUP7 DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x2E91 JUMP JUMPDEST PUSH1 0x5 DUP3 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1DE5 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1DFB JUMPI PUSH2 0x1D62 DUP5 DUP7 DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x30DF JUMP JUMPDEST PUSH1 0x6 DUP3 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1E0A JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1E20 JUMPI PUSH2 0x1D62 DUP5 DUP7 DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x3137 JUMP JUMPDEST PUSH1 0x8 DUP3 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1E2F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1E45 JUMPI PUSH2 0x1D62 DUP5 DUP7 DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x3288 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x49AC JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x1CE3 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 MLOAD EQ PUSH2 0x1C10 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4A09 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1ECF JUMPI POP PUSH1 0x0 PUSH2 0x157E JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1EDC JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x988 JUMPI PUSH2 0x988 PUSH2 0x1574 PUSH1 0x1 DUP7 DUP7 PUSH2 0x1C2B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x988 JUMPI PUSH2 0x988 PUSH2 0x1574 PUSH1 0x0 DUP7 DUP7 PUSH2 0x1C2B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD MLOAD MLOAD DUP3 EQ ISZERO PUSH2 0x1F27 JUMPI POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2080 JUMP JUMPDEST PUSH2 0x1F2F PUSH2 0x36D3 JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1F3F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1F56 JUMPI INVALID JUMPDEST DUP2 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1F63 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1FC5 JUMPI PUSH1 0x60 PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1F85 SWAP2 SWAP1 PUSH2 0x3F38 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1FBC DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1F99 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1FAE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH2 0xECB JUMP JUMPDEST SWAP4 POP POP POP PUSH2 0x207E JUMP JUMPDEST PUSH1 0x5 DUP2 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1FD4 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1FFA JUMPI DUP1 PUSH1 0x20 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1FF2 SWAP2 SWAP1 PUSH2 0x3CB5 JUMP JUMPDEST POP SWAP2 POP PUSH2 0x207E JUMP JUMPDEST PUSH1 0x4 DUP2 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x2009 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x2021 JUMPI POP PUSH1 0x7 DUP2 MLOAD PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x201F JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO PUSH2 0x204C JUMPI DUP3 ISZERO DUP1 ISZERO PUSH2 0x2036 JUMPI POP DUP4 PUSH1 0x60 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0x2043 JUMPI CALLER SWAP2 POP PUSH2 0x2047 JUMP JUMPDEST ADDRESS SWAP2 POP JUMPDEST PUSH2 0x207E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4B7D JUMP JUMPDEST POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x157E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4D74 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x20E5 SWAP2 SWAP1 PUSH2 0x3F38 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x2 DUP3 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x2152 JUMPI POP DUP4 MLOAD PUSH1 0x60 DUP7 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x2107 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2132 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 ISZERO PUSH2 0x21BE JUMPI POP DUP4 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x2170 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x219E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x21F4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4B20 JUMP JUMPDEST PUSH2 0x220D DUP3 DUP7 PUSH1 0x0 ADD MLOAD DUP4 DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x40 ADD MLOAD PUSH2 0x1214 JUMP JUMPDEST SWAP1 SWAP5 MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2368 JUMPI DUP4 MLOAD PUSH1 0x40 DUP1 DUP7 ADD MLOAD SWAP1 MLOAD ADDRESS SWAP3 PUSH32 0x4A931BA100000000000000000000000000000000000000000000000000000000 SWAP3 PUSH2 0x2292 SWAP3 DUP9 SWAP3 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x24 ADD PUSH2 0x48BE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x231B SWAP2 SWAP1 PUSH2 0x46EA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2358 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x235D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x2478 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x40 DUP1 DUP7 ADD MLOAD SWAP1 MLOAD ADDRESS SWAP3 PUSH32 0x6AF479B200000000000000000000000000000000000000000000000000000000 SWAP3 PUSH2 0x23A8 SWAP3 DUP9 SWAP3 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x24 ADD PUSH2 0x48BE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2431 SWAP2 SWAP1 PUSH2 0x46EA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x246C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2471 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP JUMPDEST DUP2 ISZERO PUSH2 0x2499 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2492 SWAP2 SWAP1 PUSH2 0x4539 JUMP JUMPDEST DUP5 MSTORE PUSH2 0x24CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4C5D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x24E7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x250A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x252C SWAP2 SWAP1 PUSH2 0x3CB5 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x256F SWAP2 SWAP1 PUSH2 0x47A2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2587 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x259B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x25BF SWAP2 SWAP1 PUSH2 0x4539 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBB503E21 DUP5 DUP8 DUP8 DUP13 PUSH1 0x40 ADD MLOAD PUSH1 0x0 DUP9 PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2629 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4906 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2643 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2657 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP10 MLOAD PUSH1 0x40 DUP1 DUP13 ADD MLOAD SWAP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP4 POP PUSH2 0x26BB SWAP3 POP DUP5 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0x766 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x47A2 JUMP JUMPDEST DUP1 DUP11 MSTORE PUSH1 0x40 DUP1 DUP12 ADD MLOAD SWAP1 MLOAD PUSH32 0x40A6BA9513D09E3488135E0E0D10E2D4382B792720155B144CBEA89AC9DB6D34 SWAP3 PUSH2 0x26FC SWAP3 DUP11 SWAP3 DUP11 SWAP3 DUP8 SWAP3 SWAP1 SWAP2 DUP12 SWAP2 SWAP1 PUSH2 0x47C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2717 PUSH2 0x370D JUMP JUMPDEST DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x272B SWAP2 SWAP1 PUSH2 0x3F7D JUMP JUMPDEST PUSH1 0x60 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD SWAP1 DUP6 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x2744 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE DUP3 MLOAD PUSH1 0x60 DUP6 ADD MLOAD DUP2 MLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP2 LT PUSH2 0x277E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP3 ADD MSTORE DUP4 MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD ISZERO ISZERO DUP1 PUSH2 0x27BE JUMPI POP DUP3 PUSH1 0x60 ADD MLOAD JUMPDEST ISZERO ISZERO PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x27EE DUP2 PUSH2 0x1CD8 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD SWAP1 SWAP4 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP1 DUP6 AND EQ ISZERO PUSH2 0x287E JUMPI PUSH2 0x2877 PUSH8 0xDE0B6B3A7640000 PUSH2 0x285E PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP3 PUSH2 0x1C15 JUMP JUMPDEST DUP6 MUL DUP2 PUSH2 0x2867 JUMPI INVALID JUMPDEST DIV PUSH2 0x2872 DUP6 DUP6 PUSH2 0x155B JUMP JUMPDEST PUSH2 0x1C15 JUMP JUMPDEST SWAP1 POP PUSH2 0x988 JUMP JUMPDEST PUSH2 0x2877 DUP5 PUSH2 0x2872 DUP6 DUP6 PUSH2 0x155B JUMP JUMPDEST PUSH2 0x2894 PUSH2 0x3741 JUMP JUMPDEST PUSH2 0x289C PUSH2 0x3795 JUMP JUMPDEST DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x28B0 SWAP2 SWAP1 PUSH2 0x43E0 JUMP JUMPDEST SWAP2 POP SWAP2 POP TIMESTAMP PUSH8 0xFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0x100 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0x2935 JUMPI PUSH1 0x0 PUSH2 0x28E7 PUSH2 0x28E2 DUP5 PUSH2 0x32F9 JUMP JUMPDEST PUSH2 0x3430 JUMP JUMPDEST SWAP1 POP PUSH32 0xD9EE00A67DAF7D99C37893015DC900862C9A02650EF2D318697E502E5FB8BBE2 DUP2 DUP5 PUSH1 0x80 ADD MLOAD DUP6 PUSH2 0x100 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2925 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4813 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP PUSH2 0x24CB JUMP JUMPDEST DUP5 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x29AB JUMPI POP DUP5 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x29E1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4E54 JUMP JUMPDEST ADDRESS PUSH4 0xAA6B21CD DUP4 DUP4 PUSH2 0x29F2 DUP8 PUSH2 0x3482 JUMP JUMPDEST CALLER DUP11 PUSH1 0x80 ADD MLOAD DUP12 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A1E SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x53E6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2A85 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2A82 SWAP2 DUP2 ADD SWAP1 PUSH2 0x450B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2A8E JUMPI PUSH2 0x110D JUMP JUMPDEST DUP8 MLOAD PUSH2 0x2AAC SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x1EF1 JUMP JUMPDEST DUP9 MSTORE PUSH1 0x20 DUP9 ADD MLOAD PUSH2 0x2ACF SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x1EF1 JUMP JUMPDEST PUSH1 0x20 DUP10 ADD MSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2AE6 PUSH2 0x37BE JUMP JUMPDEST PUSH2 0x2AEE PUSH2 0x3795 JUMP JUMPDEST DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2B02 SWAP2 SWAP1 PUSH2 0x4315 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP5 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x2B7C JUMPI POP DUP5 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x2BB2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B2 SWAP1 PUSH2 0x4AC3 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0xC0 SHR PUSH8 0xFFFFFFFFFFFFFFFF TIMESTAMP AND DUP2 GT PUSH2 0x2C23 JUMPI PUSH1 0x0 PUSH2 0x2BD9 PUSH2 0x28E2 DUP6 PUSH2 0x34AE JUMP JUMPDEST SWAP1 POP PUSH32 0x5574C085411E1DCE1414A21A43F286A7BC07DE97B0AA6B9143FD5DCA66FAA583 DUP2 DUP6 PUSH1 0x80 ADD MLOAD DUP5 PUSH1 0x40 MLOAD PUSH2 0x2C12 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4813 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP PUSH2 0x24CB JUMP JUMPDEST ADDRESS PUSH4 0xE4BA8439 DUP5 DUP5 PUSH2 0x2C34 DUP9 PUSH2 0x3482 JUMP JUMPDEST CALLER DUP12 PUSH1 0x80 ADD MLOAD DUP13 PUSH1 0xA0 ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C60 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x52F3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x2CC7 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2CC4 SWAP2 DUP2 ADD SWAP1 PUSH2 0x450B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2CD0 JUMPI PUSH2 0x120B JUMP JUMPDEST DUP9 MLOAD PUSH2 0x2CEE SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x1EF1 JUMP JUMPDEST DUP10 MSTORE PUSH1 0x20 DUP10 ADD MLOAD PUSH2 0x2D11 SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x1EF1 JUMP JUMPDEST PUSH1 0x20 DUP11 ADD MSTORE POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x8378817 PUSH1 0xE0 SHL DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2D79 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x520B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2E02 SWAP2 SWAP1 PUSH2 0x46EA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2E3D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E42 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x110D JUMPI PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2E63 SWAP2 SWAP1 PUSH2 0x4539 JUMP JUMPDEST DUP8 MLOAD SWAP1 SWAP2 POP PUSH2 0x2E72 SWAP1 DUP6 PUSH2 0x1EF1 JUMP JUMPDEST DUP8 MSTORE PUSH1 0x20 DUP8 ADD MLOAD PUSH2 0x2E83 SWAP1 DUP3 PUSH2 0x1EF1 JUMP JUMPDEST PUSH1 0x20 DUP9 ADD MSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x80 ADD MLOAD ISZERO PUSH2 0x2FB4 JUMPI PUSH1 0xA0 DUP6 ADD MLOAD PUSH1 0x40 MLOAD ADDRESS SWAP2 PUSH32 0x4A931BA100000000000000000000000000000000000000000000000000000000 SWAP2 PUSH2 0x2EDE SWAP2 DUP9 SWAP2 DUP9 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x24 ADD PUSH2 0x48BE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2F67 SWAP2 SWAP1 PUSH2 0x46EA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2FA4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2FA9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x30C3 JUMP JUMPDEST PUSH1 0xA0 DUP6 ADD MLOAD PUSH1 0x40 MLOAD ADDRESS SWAP2 PUSH32 0x6AF479B200000000000000000000000000000000000000000000000000000000 SWAP2 PUSH2 0x2FF3 SWAP2 DUP9 SWAP2 DUP9 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x24 ADD PUSH2 0x48BE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x307C SWAP2 SWAP1 PUSH2 0x46EA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x30B7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x30BC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP JUMPDEST DUP2 ISZERO PUSH2 0x110D JUMPI PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2E63 SWAP2 SWAP1 PUSH2 0x4539 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x209C02C5 PUSH1 0xE0 SHL DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2D79 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x520B JUMP JUMPDEST PUSH2 0x313F PUSH2 0x3802 JUMP JUMPDEST CALLER DUP2 MSTORE DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 DUP7 ADD MLOAD DUP3 AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x80 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP7 ADD MLOAD ISZERO ISZERO PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xA0 DUP7 ADD MLOAD SWAP1 SWAP2 AND PUSH1 0xE0 DUP4 ADD MSTORE DUP4 MLOAD PUSH2 0x31AC SWAP2 SWAP1 DUP6 ADD DUP2 ADD SWAP1 DUP6 ADD PUSH2 0x4079 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x8AA6539B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x8AA6539B SWAP1 PUSH2 0x31ED SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x54DC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x3255 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3252 SWAP2 DUP2 ADD SWAP1 PUSH2 0x4539 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x325E JUMPI PUSH2 0x17FD JUMP JUMPDEST DUP6 MLOAD PUSH2 0x326A SWAP1 DUP5 PUSH2 0x1EF1 JUMP JUMPDEST DUP7 MSTORE PUSH1 0x20 DUP7 ADD MLOAD PUSH2 0x327B SWAP1 DUP3 PUSH2 0x1EF1 JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3290 PUSH2 0x3845 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x32A4 SWAP2 SWAP1 PUSH2 0x3CFA JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP1 DUP6 ADD MLOAD ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 DUP6 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x32E9 DUP3 PUSH2 0x19C2 JUMP JUMPDEST MLOAD DUP7 MLOAD SWAP1 SWAP2 POP PUSH2 0x326A SWAP1 DUP5 PUSH2 0x1EF1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xE593D3FDFA8B60E5E17A1B2204662ECBE15C23F2084B9AD5BAE40359540A7DA9 DUP2 MSTORE DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x100 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 DUP2 KECCAK256 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3465 SWAP3 SWAP2 SWAP1 PUSH2 0x4706 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x34AA JUMPI PUSH2 0x34AA PUSH2 0x1574 PUSH1 0x3 DUP5 PUSH2 0x35C3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x2F754524DE756AE72459EFBE1EC88C19A745639821DE528AC3FB88F9E65E35C8 DUP2 MSTORE DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x120 DUP2 KECCAK256 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xC996AF7B PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x35E0 SWAP3 SWAP2 SWAP1 PUSH2 0x4982 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x140 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x157E DUP2 PUSH2 0x5696 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x38A7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x38BA PUSH2 0x38B5 DUP3 PUSH2 0x55E2 JUMP JUMPDEST PUSH2 0x55BB JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x38DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3903 JUMPI DUP2 CALLDATALOAD PUSH2 0x38F1 DUP2 PUSH2 0x5696 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x38DE JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x391E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x392C PUSH2 0x38B5 DUP3 PUSH2 0x55E2 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x394D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3903 JUMPI DUP2 MLOAD PUSH2 0x3963 DUP2 PUSH2 0x5696 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3950 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3985 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3993 PUSH2 0x38B5 DUP3 PUSH2 0x55E2 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3903 JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH1 0x60 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP13 SUB ADD SLT ISZERO PUSH2 0x39E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x39EC DUP2 PUSH2 0x55BB JUMP JUMPDEST DUP6 DUP4 ADD CALLDATALOAD PUSH2 0x39F9 DUP2 PUSH2 0x56C6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP4 DUP2 ADD CALLDATALOAD DUP8 DUP4 ADD MSTORE SWAP2 DUP4 ADD CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x3A1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3A2D DUP13 DUP9 DUP6 DUP8 ADD ADD PUSH2 0x3B0A JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x39A4 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3A55 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3A63 PUSH2 0x38B5 DUP3 PUSH2 0x55E2 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3903 JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH1 0x40 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP13 SUB ADD SLT ISZERO PUSH2 0x3AB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3ABC DUP2 PUSH2 0x55BB JUMP JUMPDEST PUSH2 0x3AC8 DUP12 DUP8 DUP6 ADD PUSH2 0x3BA5 JUMP JUMPDEST DUP2 MSTORE SWAP1 DUP3 ADD CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3AE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3AF2 DUP12 DUP8 DUP5 DUP7 ADD ADD PUSH2 0x3B0A JUMP JUMPDEST DUP2 DUP8 ADD MSTORE DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3A74 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3B1A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3B28 PUSH2 0x38B5 DUP3 PUSH2 0x5602 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3B3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3B68 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3B76 PUSH2 0x38B5 DUP3 PUSH2 0x5602 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x3B8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3B9E DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x565D JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x157E DUP2 PUSH2 0x56C6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3BC1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x3BCB PUSH1 0x80 PUSH2 0x55BB JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH1 0x4 DUP2 LT PUSH2 0x3BDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x3BF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x157E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x157E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3C5C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x988 DUP2 PUSH2 0x5696 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3C79 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3C84 DUP2 PUSH2 0x5696 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3C9F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3CAB DUP6 DUP3 DUP7 ADD PUSH2 0x3B0A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3CC7 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x3CD2 DUP2 PUSH2 0x5696 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CEE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3CAB DUP6 DUP3 DUP7 ADD PUSH2 0x3B58 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3D0C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3D23 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x3D2F DUP7 DUP4 DUP8 ADD PUSH2 0x390E JUMP JUMPDEST SWAP4 POP PUSH1 0x20 SWAP2 POP DUP2 DUP6 ADD MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x3D45 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x3D55 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x3D63 PUSH2 0x38B5 DUP3 PUSH2 0x55E2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP4 DUP7 ADD DUP8 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x3DFC JUMPI DUP2 MLOAD DUP7 ADD PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP16 SUB ADD SLT ISZERO PUSH2 0x3DAC JUMPI DUP10 DUP11 REVERT JUMPDEST PUSH2 0x3DB6 PUSH1 0x40 PUSH2 0x55BB JUMP JUMPDEST DUP10 DUP3 ADD MLOAD PUSH2 0x3DC3 DUP2 PUSH2 0x56C6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP10 DUP2 GT ISZERO PUSH2 0x3DD6 JUMPI DUP12 DUP13 REVERT JUMPDEST PUSH2 0x3DE4 DUP16 DUP13 DUP4 DUP7 ADD ADD PUSH2 0x3B58 JUMP JUMPDEST DUP3 DUP13 ADD MSTORE POP DUP6 MSTORE POP SWAP3 DUP8 ADD SWAP3 SWAP1 DUP8 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3D6F JUMP JUMPDEST POP SWAP8 SWAP11 SWAP1 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3E21 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3E38 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3E44 DUP8 DUP4 DUP9 ADD PUSH2 0x3897 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3E59 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x3E66 DUP7 DUP3 DUP8 ADD PUSH2 0x3A45 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3E8C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3EA3 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x3EAF DUP9 DUP4 DUP10 ADD PUSH2 0x3897 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3EC4 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x3ED1 DUP8 DUP3 DUP9 ADD PUSH2 0x3A45 JUMP JUMPDEST SWAP5 SWAP8 SWAP5 SWAP7 POP POP POP POP PUSH1 0x40 DUP4 ADD CALLDATALOAD SWAP3 PUSH1 0x60 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3EFA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3F10 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3F1C DUP6 DUP3 DUP7 ADD PUSH2 0x3897 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x3F2D DUP2 PUSH2 0x56B8 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3F4A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3F60 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3F6C DUP6 DUP3 DUP7 ADD PUSH2 0x390E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x3F2D DUP2 PUSH2 0x56B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3F8F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3FA6 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3FB9 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3FC7 PUSH2 0x38B5 DUP3 PUSH2 0x55E2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP8 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x406A JUMPI DUP2 MLOAD DUP8 ADD PUSH1 0x60 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP16 SUB ADD SLT ISZERO PUSH2 0x4011 JUMPI DUP11 DUP12 REVERT JUMPDEST PUSH2 0x401A DUP2 PUSH2 0x55BB JUMP JUMPDEST DUP11 DUP4 ADD MLOAD PUSH2 0x4027 DUP2 PUSH2 0x56C6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP4 DUP2 ADD MLOAD DUP13 DUP4 ADD MSTORE SWAP2 DUP4 ADD MLOAD SWAP2 DUP10 DUP4 GT ISZERO PUSH2 0x4044 JUMPI DUP13 DUP14 REVERT JUMPDEST PUSH2 0x4052 DUP16 DUP14 DUP6 DUP8 ADD ADD PUSH2 0x3B58 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE DUP7 MSTORE POP POP SWAP3 DUP8 ADD SWAP3 SWAP1 DUP8 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3FD3 JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x408B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x40A2 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x40B5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x40C3 PUSH2 0x38B5 DUP3 PUSH2 0x55E2 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP8 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x406A JUMPI DUP2 MLOAD DUP8 ADD PUSH1 0x40 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP16 SUB ADD SLT ISZERO PUSH2 0x410D JUMPI DUP11 DUP12 REVERT JUMPDEST PUSH2 0x4116 DUP2 PUSH2 0x55BB JUMP JUMPDEST DUP11 DUP4 ADD MLOAD PUSH2 0x4123 DUP2 PUSH2 0x570D JUMP JUMPDEST DUP2 MSTORE SWAP1 DUP3 ADD MLOAD SWAP1 DUP9 DUP3 GT ISZERO PUSH2 0x4136 JUMPI DUP12 DUP13 REVERT JUMPDEST PUSH2 0x4144 DUP15 DUP13 DUP5 DUP7 ADD ADD PUSH2 0x3B58 JUMP JUMPDEST DUP2 DUP13 ADD MSTORE DUP7 MSTORE POP POP SWAP3 DUP8 ADD SWAP3 SWAP1 DUP8 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x40CF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x416D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x988 DUP2 PUSH2 0x56B8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x418C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x4197 DUP2 PUSH2 0x5696 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x41B2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3E66 DUP7 DUP3 DUP8 ADD PUSH2 0x3975 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x41D3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x41DE DUP2 PUSH2 0x5696 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x41F9 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3ED1 DUP8 DUP3 DUP9 ADD PUSH2 0x3975 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x421C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x4227 DUP2 PUSH2 0x5696 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x4237 DUP2 PUSH2 0x5696 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4252 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x425E DUP9 DUP3 DUP10 ADD PUSH2 0x3975 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP5 SWAP6 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP6 POP PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x428C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x42A3 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0xC0 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x42B6 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x42CB JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x42DE JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x42EC JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x42FD JUMPI DUP5 DUP6 REVERT JUMPDEST SWAP6 SWAP9 PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP8 POP SWAP5 SWAP6 PUSH1 0x40 ADD CALLDATALOAD SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 SUB PUSH2 0x180 DUP2 SLT ISZERO PUSH2 0x4329 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x100 DUP1 DUP3 SLT ISZERO PUSH2 0x4338 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x4341 DUP2 PUSH2 0x55BB JUMP JUMPDEST SWAP2 POP DUP5 MLOAD PUSH2 0x434E DUP2 PUSH2 0x5696 JUMP JUMPDEST DUP3 MSTORE PUSH2 0x435D DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x388C JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x436F DUP7 PUSH1 0x40 DUP8 ADD PUSH2 0x3C13 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x4381 DUP7 PUSH1 0x60 DUP8 ADD PUSH2 0x3C13 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4393 DUP7 PUSH1 0x80 DUP8 ADD PUSH2 0x388C JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x43A5 DUP7 PUSH1 0xA0 DUP8 ADD PUSH2 0x388C JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x43B7 DUP7 PUSH1 0xC0 DUP8 ADD PUSH2 0x388C JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE DUP2 SWAP4 POP PUSH2 0x43D5 DUP7 DUP3 DUP8 ADD PUSH2 0x3BB0 JUMP JUMPDEST SWAP3 POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 SUB PUSH2 0x1C0 DUP2 SLT ISZERO PUSH2 0x43F4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x140 DUP1 DUP3 SLT ISZERO PUSH2 0x4403 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x440C DUP2 PUSH2 0x55BB JUMP JUMPDEST SWAP2 POP PUSH2 0x4418 DUP7 DUP7 PUSH2 0x388C JUMP JUMPDEST DUP3 MSTORE PUSH2 0x4427 DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x388C JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4439 DUP7 PUSH1 0x40 DUP8 ADD PUSH2 0x3C13 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x444B DUP7 PUSH1 0x60 DUP8 ADD PUSH2 0x3C13 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x445D DUP7 PUSH1 0x80 DUP8 ADD PUSH2 0x388C JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x446F DUP7 PUSH1 0xA0 DUP8 ADD PUSH2 0x388C JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x4481 DUP7 PUSH1 0xC0 DUP8 ADD PUSH2 0x388C JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 PUSH2 0x449F DUP8 DUP3 DUP9 ADD PUSH2 0x3C33 JUMP JUMPDEST DUP2 DUP5 ADD MSTORE POP PUSH2 0x120 DUP1 DUP7 ADD MLOAD DUP2 DUP5 ADD MSTORE POP DUP2 SWAP4 POP PUSH2 0x43D5 DUP7 DUP3 DUP8 ADD PUSH2 0x3BB0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x44D3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x44DE DUP2 PUSH2 0x56D3 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x44EF DUP2 PUSH2 0x56D3 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x4500 DUP2 PUSH2 0x570D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x451D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x4528 DUP2 PUSH2 0x56EF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x3F2D DUP2 PUSH2 0x56EF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x454A JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x9 DUP2 LT PUSH2 0x455F JUMPI INVALID JUMPDEST DUP1 DUP5 MSTORE POP PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x60 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x471 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x4613 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD DUP1 DUP2 SWAP7 POP DUP3 DUP5 MUL DUP2 ADD SWAP2 POP DUP3 DUP7 ADD DUP6 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x4600 JUMPI DUP3 DUP5 SUB DUP10 MSTORE DUP2 MLOAD DUP1 MLOAD PUSH4 0xFFFFFFFF AND DUP6 MSTORE DUP6 ADD MLOAD PUSH1 0x40 DUP7 DUP7 ADD DUP2 SWAP1 MSTORE PUSH2 0x45EC DUP2 DUP8 ADD DUP4 PUSH2 0x4613 JUMP JUMPDEST SWAP11 DUP8 ADD SWAP11 SWAP6 POP POP POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x45BC JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST ISZERO ISZERO SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x462B DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x565D JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x4668 DUP2 PUSH2 0x5689 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 SWAP4 DUP5 SHL DUP2 AND DUP3 MSTORE SWAP2 SWAP1 SWAP3 SHL AND PUSH1 0x14 DUP3 ADD MSTORE PUSH1 0x28 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x46FC DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x565D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP4 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x35 DUP3 ADD MSTORE PUSH1 0x55 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND DUP2 MSTORE SWAP5 DUP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x48D1 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x4613 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND DUP4 MSTORE DUP1 DUP9 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP8 AND PUSH1 0x40 DUP5 ADD MSTORE DUP1 DUP7 AND PUSH1 0x60 DUP5 ADD MSTORE POP DUP4 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x4955 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x4613 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x496E DUP6 PUSH2 0x5689 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x498F DUP5 PUSH2 0x5689 JUMP JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x20 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x988 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4613 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x33 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F65786563757465426174636853 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x656C6C2F494E56414C49445F53554243414C4C00000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x39 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F65786563757465426174636853 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x656C6C2F494E434F52524543545F414D4F554E545F534F4C4400000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x31 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F6D756C7469706C657842617463 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6853656C6C2F554E444552424F55474854000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x39 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C65784F74633A3A5F626174636853656C6C4F74634F72646572 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x2F4F54435F4F524445525F494E56414C49445F544F4B454E5300000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x39 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578556E697377617056323A3A5F6D756C7469486F7053656C PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6C556E697377617056322F494E56414C49445F544F4B454E5300000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x33 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F636F6D70757465486F70546172 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6765742F494E56414C49445F53554243414C4C00000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x41 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F6D756C7469706C65784D756C74 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x69486F7053656C6C2F4D49534D4154434845445F41525241595F4C454E475448 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x5300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578556E697377617056333A3A5F6D756C7469486F7053656C PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6C556E697377617056332F535741505F4641494C454400000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578556E697377617056323A3A5F626174636853656C6C556E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x697377617056322F494E56414C49445F544F4B454E5300000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A6D756C7469706C65784D756C7469 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x486F7053656C6C457468466F72546F6B656E2F4E4F545F574554480000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F636F6D70757465486F70546172 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6765742F5441524745545F49535F4E554C4C0000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x49 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C65784C697175696469747950726F76696465723A3A5F626174 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x636853656C6C556E6973776170563245787465726E616C2F4F4E4C595F44454C PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x454741544543414C4C0000000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x39 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C65785266713A3A5F626174636853656C6C5266714F72646572 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x2F5246515F4F524445525F494E56414C49445F544F4B454E5300000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x34 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F6D756C7469706C65784D756C74 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x69486F7053656C6C2F554E444552424F55474854000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x51 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C65784C697175696469747950726F76696465723A3A5F626174 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x636853656C6C4C697175696469747950726F766964657245787465726E616C2F PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x4F4E4C595F44454C454741544543414C4C000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x466978696E546F6B656E5370656E6465722F43414E4E4F545F494E564F4B455F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x53454C4600000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A6D756C7469706C65784D756C7469 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x486F7053656C6C546F6B656E466F724574682F4E4F545F574554480000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x49 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578556E697377617056323A3A5F636F6D70757465556E6973 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7761704F7574707574416D6F756E742F494E53554646494349454E545F494E50 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x55545F414D4F554E540000000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F7472616E736665724574682F54 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x52414E534645525F4641494C4544000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x46 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578556E697377617056323A3A5F636F6D70757465556E6973 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x7761704F7574707574416D6F756E742F494E53554646494349454E545F4C4951 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x5549444954590000000000000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x36 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D756C7469706C6578466561747572653A3A5F657865637574654D756C746948 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6F7053656C6C2F494E56414C49445F53554243414C4C00000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x120 DUP3 ADD PUSH2 0x5220 DUP7 MLOAD PUSH2 0x5644 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 DUP9 ADD MLOAD AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x40 DUP8 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0xC0 DUP1 DUP7 ADD MSTORE DUP3 DUP2 MLOAD PUSH2 0x5268 DUP2 DUP7 PUSH2 0x480A JUMP JUMPDEST SWAP5 POP SWAP2 DUP4 ADD SWAP2 DUP5 SWAP2 POP DUP1 DUP5 MUL DUP3 ADD DUP7 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x52A2 JUMPI DUP7 DUP3 SUB DUP5 MSTORE PUSH2 0x5290 DUP3 DUP7 MLOAD PUSH2 0x4551 JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP4 DUP7 ADD SWAP4 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x5278 JUMP JUMPDEST POP PUSH1 0x80 DUP12 ADD MLOAD SWAP6 POP PUSH2 0x52B7 PUSH1 0xE0 DUP10 ADD DUP8 PUSH2 0x460D JUMP JUMPDEST PUSH1 0xA0 DUP12 ADD MLOAD SWAP6 POP PUSH2 0x52CC PUSH2 0x100 DUP10 ADD DUP8 PUSH2 0x4586 JUMP JUMPDEST DUP8 DUP2 SUB DUP6 DUP10 ADD MSTORE PUSH2 0x52DD DUP2 DUP12 PUSH2 0x4613 JUMP JUMPDEST SWAP7 POP POP POP POP POP POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP7 MLOAD PUSH2 0x200 DUP3 ADD SWAP1 PUSH2 0x5304 SWAP1 PUSH2 0x5644 JUMP JUMPDEST DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP10 ADD MLOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP9 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x40 DUP6 ADD MSTORE DUP1 PUSH1 0x60 DUP12 ADD MLOAD AND PUSH1 0x60 DUP6 ADD MSTORE POP POP PUSH1 0x80 DUP9 ADD MLOAD PUSH2 0x5364 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP PUSH1 0xA0 DUP9 ADD MLOAD PUSH2 0x5377 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP PUSH1 0xC0 DUP9 ADD MLOAD PUSH2 0x538A PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP PUSH1 0xE0 DUP9 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x53A3 PUSH2 0x100 DUP4 ADD DUP9 PUSH2 0x465D JUMP JUMPDEST PUSH2 0x53B1 PUSH2 0x180 DUP4 ADD DUP8 PUSH2 0x468C JUMP JUMPDEST PUSH2 0x53BF PUSH2 0x1A0 DUP4 ADD DUP7 PUSH2 0x4586 JUMP JUMPDEST PUSH2 0x53CD PUSH2 0x1C0 DUP4 ADD DUP6 PUSH2 0x460D JUMP JUMPDEST PUSH2 0x53DB PUSH2 0x1E0 DUP4 ADD DUP5 PUSH2 0x4586 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x240 DUP3 ADD SWAP1 POP PUSH2 0x53FA DUP3 DUP10 MLOAD PUSH2 0x4586 JUMP JUMPDEST PUSH1 0x20 DUP9 ADD MLOAD PUSH2 0x540C PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP PUSH1 0x40 DUP9 ADD MLOAD PUSH2 0x541F PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x468C JUMP JUMPDEST POP PUSH1 0x60 DUP9 ADD MLOAD PUSH2 0x5432 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x468C JUMP JUMPDEST POP PUSH1 0x80 DUP9 ADD MLOAD PUSH2 0x5445 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP PUSH1 0xA0 DUP9 ADD MLOAD PUSH2 0x5458 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP PUSH1 0xC0 DUP9 ADD MLOAD PUSH2 0x546B PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP PUSH1 0xE0 DUP9 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP10 ADD MLOAD PUSH2 0x5489 DUP3 DUP6 ADD DUP3 PUSH2 0x46A2 JUMP JUMPDEST POP POP PUSH2 0x120 DUP9 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x54A4 PUSH2 0x140 DUP4 ADD DUP9 PUSH2 0x465D JUMP JUMPDEST PUSH2 0x54B2 PUSH2 0x1C0 DUP4 ADD DUP8 PUSH2 0x468C JUMP JUMPDEST PUSH2 0x54C0 PUSH2 0x1E0 DUP4 ADD DUP7 PUSH2 0x4586 JUMP JUMPDEST PUSH2 0x54CE PUSH2 0x200 DUP4 ADD DUP6 PUSH2 0x460D JUMP JUMPDEST PUSH2 0x53DB PUSH2 0x220 DUP4 ADD DUP5 PUSH2 0x4586 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x20 DUP6 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x551F PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x100 DUP1 PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0x5550 PUSH2 0x120 DUP6 ADD DUP4 PUSH2 0x45A0 JUMP JUMPDEST SWAP2 POP PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x5564 PUSH1 0xE0 DUP7 ADD DUP3 PUSH2 0x460D JUMP JUMPDEST POP PUSH1 0xE0 DUP6 ADD MLOAD PUSH2 0x5576 DUP3 DUP7 ADD DUP3 PUSH2 0x4586 JUMP JUMPDEST POP SWAP1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0xB93 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x4613 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x55DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x55F8 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x5618 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x5678 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x5660 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x24CB JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x5693 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5693 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x5693 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x9 DUP2 LT PUSH2 0x5693 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH14 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5693 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5693 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5693 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0x698F RETURN PUSH16 0x33BC6810EF488849CE415F6C4787AEC4 0xC6 0x5D 0xC2 0xE1 MSTORE8 PUSH5 0xABD0BBCD90 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "1461:27681:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1838:75;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2101:1986:22;;;;;;:::i;:::-;;:::i;12621:570:17:-;;;;;;;;;;-1:-1:-1;12621:570:17;;;;;:::i;:::-;;:::i;1899:2060:18:-;;;;;;:::i;:::-;;:::i;9297:882:17:-;;;;;;:::i;:::-;;:::i;1729:65::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;5173:947::-;;;;;;;;;;-1:-1:-1;5173:947:17;;;;;:::i;:::-;;:::i;6654:646::-;;;;;;;;;;-1:-1:-1;6654:646:17;;;;;:::i;:::-;;:::i;2965:610::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;10832:1060::-;;;;;;;;;;-1:-1:-1;10832:1060:17;;;;;:::i;:::-;;:::i;990:48:25:-;;;;;;;;;;;;;:::i;3976:738:17:-;;;;;;:::i;:::-;;:::i;1838:75::-;;;:::o;2101:1986:22:-;2321:20;2427:4;2419:32;2436:15;2419:32;;;2398:152;;;;;;;;;;;;:::i;:::-;;;;;;;;;2562:23;2587:12;2603:80;;;;2627:15;2603:80;:::i;:::-;2561:122;;;;2758:1;2741:6;:13;:18;;:73;;;;-1:-1:-1;2796:17:22;;;;:6;:17;:::i;:::-;2775:39;;:6;2782:1;2775:9;;;;;;;;;;;;;;:39;;;2741:73;:145;;;;-1:-1:-1;2867:18:22;;;;;;;;:::i;:::-;2830:56;;:6;2853:1;2837:6;:13;:17;2830:25;;;;;;;;;;;;;;:56;;;2741:145;2720:246;;;;;;;;;;;;:::i;:::-;3079:24;3106:103;3146:6;3153:1;3146:9;;;;;;;;;;;;;;3169:6;3176:1;3169:9;;;;;;;;;;;;;;3192:7;3106:26;:103::i;:::-;3079:130;-1:-1:-1;3476:21:22;;;;;;;;:::i;:::-;3472:393;;;3513:139;3566:6;3573:1;3566:9;;;;;;;;;;;;;;3594:16;3628:10;3513:20;:139::i;:::-;3472:393;;;3683:171;3740:6;3747:1;3740:9;;;;;;;;;;;;;;3768:10;3796:16;3830:10;3683:24;:171::i;:::-;3929:151;3959:6;3979:10;4003:7;4024:16;4054;;;;;;;;:::i;:::-;3929;:151::i;:::-;3922:158;;;;;2101:1986;;;;;;;:::o;12621:570:17:-;12855:20;12898:286;12934:214;;;;;;;;12979:6;12934:214;;;;13015:10;12934:214;;;;13050:5;12934:214;;;;13089:5;12934:214;;;;;;13123:10;12934:214;;;;;13162:12;12898:22;:286::i;:::-;12891:293;12621:570;-1:-1:-1;;;;;12621:570:17:o;1899:2060:18:-;2127:20;2233:4;2225:32;2242:15;2225:32;;;2204:160;;;;;;;;;;;;:::i;:::-;2435:16;2453:26;2483:79;;;;2507:15;2483:79;:::i;:::-;2434:128;;-1:-1:-1;2434:128:18;-1:-1:-1;2577:21:18;;;;;;;;:::i;:::-;2573:537;;;2719:123;2757:17;;;;:6;:17;:::i;:::-;2792:8;2818:10;2719:20;:123::i;:::-;2573:537;;;2944:155;2986:17;;;;:6;:17;:::i;:::-;3021:10;3049:8;3075:10;2944:24;:155::i;:::-;3181:21;3205:18;;;;;;;;:::i;:::-;:41;;;3247:16;;;;;;;;:::i;:::-;3205:59;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3181:83;-1:-1:-1;3303:32:18;:7;:32;;3368:8;3391:17;;;;:6;:17;:::i;:::-;3422:18;;;;;;;;:::i;:::-;3454:16;;;;;;;;:::i;:::-;3484:1;3499:13;3303:219;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3627:95;3708:13;3627:6;:18;;;;;;;;;;:::i;:::-;:41;;;3669:16;;;;;;;;:::i;:::-;3627:59;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:80;;:95::i;:::-;3612:110;-1:-1:-1;3738:214:18;3781:17;;;;:6;:17;:::i;:::-;3821:18;;;;;;;;:::i;:::-;3854:10;3878:12;3904:8;3926:6;:16;;;;;;;;;;:::i;:::-;3738:214;;;;;;;;;;;:::i;:::-;;;;;;;;1899:2060;;;;;;;;;:::o;9297:882:17:-;9517:20;9632:4;9611:26;;:6;9618:1;9611:9;;;;;;;;;;;;;;:26;;;9590:132;;;;;;;;;;;;:::i;:::-;9753:4;:12;;;9773:9;9753:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9924:212:17;;;;;;;;;;;10005:9;9924:212;;;;;;;;;;10078:4;9924:212;;;;10111:10;9924:212;;;;9888:284;;-1:-1:-1;9924:212:17;-1:-1:-1;10150:12:17;;-1:-1:-1;9888:22:17;:284::i;:::-;9881:291;;9297:882;;;;;;:::o;1729:65::-;;;;;;;;;;;;;;;;;;;:::o;5173:947::-;5401:20;5637:326;5670:257;;;;;;;;5716:10;5670:257;;;;;;5757:4;5670:257;;;;;;5791:10;5670:257;;;;5826:5;5670:257;;;;5865:5;5670:257;;;;;;5907:4;5670:257;;;;;5941:12;5637:19;:326::i;:::-;5997:27;;;;;5622:341;;-1:-1:-1;5997:13:17;:4;:13;;;;:27;;5622:341;;5997:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6075:38;6088:10;6100:12;6075;:38::i;6654:646::-;6920:20;6963:330;6996:261;;;;;;;;7042:10;6996:261;;;;;;7083:11;6996:261;;;;;;7124:10;6996:261;;;;7159:5;6996:261;;;;7198:5;6996:261;;;;;;7232:10;6996:261;;;;;7271:12;6963:19;:330::i;:::-;6956:337;6654:646;-1:-1:-1;;;;;;6654:646:17:o;2965:610::-;3018:14;3048:69;3073:43;3048:24;:69::i;:::-;3127;3152:43;3127:24;:69::i;:::-;3206:71;3231:45;3206:24;:71::i;:::-;3287:72;3312:46;3287:24;:72::i;:::-;3369;3394:46;3369:24;:72::i;:::-;3451:74;3476:48;3451:24;:74::i;:::-;-1:-1:-1;3542:26:17;2965:610;:::o;10832:1060::-;11064:20;11194:4;11157:42;;:6;11180:1;11164:6;:13;:17;11157:25;;;;;;;;;;;;;;:42;;;11136:148;;;;;;;;;;;;:::i;:::-;11482:217;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11482:217:17;;;;11679:4;11482:217;;;;11446:289;;11713:12;11446:22;:289::i;990:48:25:-;;;:::o;3976:738:17:-;4193:20;4250:4;:12;;;4270:9;4250:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4385:322;4418:253;;;;;;;;4464:4;4418:253;;;;;;4499:11;4418:253;;;;;;4540:9;4418:253;;;;4574:5;4418:253;;;;4613:4;4418:253;;;;;;4646:10;4418:253;;;;;4685:12;4385:19;:322::i;7706:1049:22:-;7865:19;7973:14;7989;8016:6;8007:15;;:6;:15;;;:77;;8069:6;8077;8007:77;;;8038:6;8046;8007:77;7972:112;;;;8098:7;8094:655;;;8275:17;8337:6;8345;8320:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8310:43;;;;;;8371:29;8216:198;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8206:209;;;;;;8198:218;;8183:234;;;;;;8094:655;8600:15;8660:6;8668;8643:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8633:43;;;;;;8694:27;8541:194;;;;;;;;;;:::i;3238:1617:26:-;3387:31;;;3413:4;3387:31;;3379:80;;;;;;;;;;;;:::i;:::-;3510:4;3504:11;3618:66;3613:3;3606:79;3729:12;3725:2;3721:21;3714:4;3709:3;3705:14;3698:45;3779:6;3772:4;3767:3;3763:14;3756:30;3985:2;3964:3;3942:4;3921:3;3902:1;3871:12;3864:5;3860:24;3837:5;3815:186;4029:16;4615:1;4609:3;4603:10;4600:17;4544:2;4536:6;4533:14;4526:22;4497:179;4429:6;4422:14;4398:296;4320:7;4299:409;4288:420;;4732:7;4722:2;;4782:6;4779:1;4774:3;4759:30;4818:6;4813:3;4806:19;4722:2;;;;3479:1370;;;:::o;1310:1717::-;1486:31;;;1512:4;1486:31;;1478:80;;;;;;;;;;;;:::i;:::-;1609:4;1603:11;1729:66;1724:3;1717:79;1843:12;1836:5;1832:24;1825:4;1820:3;1816:14;1809:48;1901:12;1897:2;1893:21;1886:4;1881:3;1877:14;1870:45;1951:6;1944:4;1939:3;1935:14;1928:30;2157:2;2136:3;2114:4;2093:3;2074:1;2043:12;2036:5;2032:24;2009:5;1987:186;2201:16;2787:1;2781:3;2775:10;2772:17;2716:2;2708:6;2705:14;2698:22;2669:179;2601:6;2594:14;2570:296;2492:7;2471:409;2460:420;;2904:7;2894:2;;2954:6;2951:1;2946:3;2931:30;2990:6;2985:3;2978:19;2894:2;;;;1578:1443;;;;:::o;5903:1708:22:-;6107:25;;6281:1324;6321:1;6305:6;:13;:17;6301:1;:21;6281:1324;;;6344:18;6364:19;6388:6;6395:1;6388:9;;;;;;;;;;;;;;6399:6;6406:1;6410;6406:5;6399:13;;;;;;;;;;;;;;6343:70;;;;6494:155;6539:11;6568:10;6596:11;6625:10;6494:27;:155::i;:::-;6474:175;;6664:18;6684;6719:11;6706:24;;:10;:24;;;:124;;6800:17;6827:1;6706:124;;;6758:1;6762:17;6706:124;6663:167;;;;7025:10;7058:1;7042:6;:13;:17;7038:1;:21;:131;;7160:9;7038:131;;;7078:63;7105:11;7118:6;7125:1;7129;7125:5;7118:13;;;;;;;;;;;;;;7133:7;7078:26;:63::i;:::-;7342:12;;;7352:1;7342:12;;;;;;;;;7216:152;;;;7025:144;;-1:-1:-1;7216:32:22;;;;;;:152;;7266:10;;7294;;7025:144;;7216:152;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7511:2;7497:16;;7577:17;7564:30;;6281:1324;;;;;6324:3;;;;;;;6281:1324;;;;5903:1708;;;;;;;:::o;13565:1499:17:-;13970:12;;;;:19;13946:13;;:20;13708;;13992:1;13970:23;13946:47;13925:159;;;;;;;;;;;;:::i;:::-;14210:13;;14224:20;;14153:26;;14210:13;14224:24;;;;14210:39;;;;;;;;;;;;14153:106;;14331:21;14355:11;:21;;;14377:6;:16;;;14355:39;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;14331:63;;14443:30;;:::i;:::-;14476:28;14497:6;14476:20;:28::i;:::-;14443:61;;14576:20;14599:75;14660:13;14599:11;:21;;;14621:6;:16;;;14599:39;;;;;;;;;;;;;;;:::i;:75::-;14576:98;;14825:60;14847:12;14861:5;:23;;;14825:21;:60::i;:::-;14810:75;;14967:12;14951;:28;;14930:127;;;;;;;;;;;;:::i;:::-;13565:1499;;;;;;;;:::o;1625:373:35:-;1711:7;1742:1;1738;:5;1734:236;;;1759:200;1784:174;1844:62;1924:1;1943;1784:42;:174::i;:::-;1759:24;:200::i;:::-;-1:-1:-1;1986:5:35;;;1625:373;;;;;:::o;7665:972:17:-;7802:20;7908:21;7932:6;:18;;;:28;;;7961:6;:16;;;7932:46;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7908:70;;8023:27;;:::i;:::-;8053:25;8071:6;8053:17;:25::i;:::-;8023:55;;8150:20;8173:82;8241:13;8173:6;:18;;;:28;;;8202:6;:16;;;8173:46;;;;;;;;;;;;;;;:::i;:82::-;8150:105;;8406:55;8428:12;8442:5;:18;;;8406:21;:55::i;:::-;8391:70;;8543:12;8527;:28;;8506:124;;;;;;;;;;;;:::i;:::-;7665:972;;;;;;;:::o;24271:229::-;24367:12;24384:9;:14;;24406:6;24384:33;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;24366:51;;;24435:7;24427:66;;;;;;;;;;;;:::i;:::-;24271:229;;;:::o;2201:168:24:-;2283:79;;;;;2322:4;;2283:52;;:79;;2336:8;;2346:15;;2283:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2201:168;:::o;8883:1284:22:-;9087:20;9202:1;9188:11;:15;9167:135;;;;;;;;;;;;:::i;:::-;9365:16;9383;9419:11;9404:39;;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9364:81;;;;;;;;;9525:1;9514:8;:12;:28;;;;;9541:1;9530:8;:12;9514:28;9493:145;;;;;;;;;;;;:::i;:::-;9721:20;9743:21;9781:11;9768:24;;:10;:24;;;:94;;9843:8;9853;9768:94;;;9808:8;9818;9768:94;9720:142;;-1:-1:-1;9720:142:22;-1:-1:-1;9910:26:22;9939:24;:11;9959:3;9939:19;:24::i;:::-;9910:53;-1:-1:-1;9973:17:22;9993:41;9910:53;10020:13;9993:26;:41::i;:::-;9973:61;-1:-1:-1;10044:19:22;10066:54;10101:18;10066:26;:12;10087:4;10066:20;:26::i;:::-;:34;;:54::i;:::-;10044:76;;10149:11;10137:9;:23;;;;;;;8883:1284;-1:-1:-1;;;;;;;;;;;;8883:1284:22:o;18238:2908:17:-;18335:30;;:::i;:::-;18588:17;;;;18562:43;;18862:28;18588:6;18562:23;18862:17;:28::i;:::-;18849:41;;:10;;;:41;19050:21;;;;19049:22;:50;;;;-1:-1:-1;19075:10:17;;;;:24;;19089:10;19075:24;;19049:50;19045:260;;;19115:179;19172:6;:13;;;19186:1;19172:16;;;;;;;;;;;;;;19207:10;19235:5;:10;;;19263:6;:17;;;19115:24;:179::i;:::-;19462:6;:21;;;:52;;;;-1:-1:-1;19487:10:17;;;;:27;;19509:4;19487:27;;19462:52;19458:230;;;19530:147;19583:6;:13;;;19597:1;19583:16;;;;;;;;;;;;;;19618:5;:10;;;19646:6;:17;;;19530:20;:147::i;:::-;19778:1;19761:14;;;:18;19756:1384;19799:6;:12;;;:19;19781:5;:14;;;:37;19756:1384;;19852:34;;:::i;:::-;19889:6;:12;;;19902:5;:14;;;19889:28;;;;;;;;;;;;;;19852:65;;20048:45;20066:6;20074:5;:14;;;20091:1;20074:18;20048:17;:45::i;:::-;20037:56;;:8;;;:56;20126:26;20112:10;;:40;;;;;;;;;20108:877;;;20172:129;20216:5;20243:6;20271:7;:12;;;20172:22;:129::i;:::-;20108:877;;;20340:26;20326:10;;:40;;;;;;;;;20322:663;;;20386:43;20409:5;20416:7;:12;;;20386:22;:43::i;20322:663::-;20468:34;20454:10;;:48;;;;;;;;;20450:535;;;20522:137;20574:5;20601:6;20629:7;:12;;;20522:30;:137::i;20450:535::-;20698:26;20684:10;;:40;;;;;;;;;20680:305;;;20744:123;20782:5;20809:6;20837:7;:12;;;20744:16;:123::i;20680:305::-;20906:64;;;;;;;;;;:::i;20680:305::-;-1:-1:-1;21121:8:17;;;;21108:21;;:10;;;:21;19820:14;;;:16;;;;;;19756:1384;;;18238:2908;;;:::o;2544:135:35:-;2629:7;2663:1;2659;:5;:13;;2671:1;2659:13;;;-1:-1:-1;2667:1:35;;2652:20;-1:-1:-1;2544:135:35:o;1401:322:38:-;1554:12;818:10;1625:28;;1667:9;1690:1;1705;1589:127;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1401:322:38;;;;;:::o;1531:170:37:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;15386:2726:17;15477:27;;:::i;:::-;15631:9;15626:2329;15651:6;:12;;;:19;15646:1;:24;15626:2329;;15761:17;;;;15741:16;;:37;15737:53;;15782:5;;15737:53;15803:31;;:::i;:::-;15837:6;:12;;;15850:1;15837:15;;;;;;;;;;;;;;15803:49;;15913:24;15940:139;15978:7;:18;;;16014:6;:17;;;16049:5;:16;;;15940:20;:139::i;:::-;15913:166;-1:-1:-1;16111:20:17;16097:10;;:34;;;;;;;;;16093:1852;;;16151:163;16191:5;16218:6;16246:7;:12;;;16280:16;16151:18;:163::i;:::-;16093:1852;;;16353:20;16339:10;;:34;;;;;;;;;16335:1610;;;16393:163;16433:5;16460:6;16488:7;:12;;;16522:16;16393:18;:163::i;16335:1610::-;16595:26;16581:10;;:40;;;;;;;;;16577:1368;;;16641:164;16682:5;16709:6;16737:7;:12;;;16771:16;16641:19;:164::i;16577:1368::-;16844:26;16830:10;;:40;;;;;;;;;16826:1119;;;16890:164;16931:5;16958:6;16986:7;:12;;;17020:16;16890:19;:164::i;16826:1119::-;17093:34;17079:10;;:48;;;;;;;;;17075:870;;;17147:172;17196:5;17223:6;17251:7;:12;;;17285:16;17147:27;:172::i;17075:870::-;17358:31;17344:10;;:45;;;;;;;;;17340:605;;;17409:169;17455:5;17482:6;17510:7;:12;;;17544:16;17409:24;:169::i;17340:605::-;17617:29;17603:10;;:43;;;;;;;;;17599:346;;;17666:164;17707:5;17734:6;17762:7;:12;;;17796:16;17666:19;:164::i;17599:346::-;17869:61;;;;;;;;;;:::i;17599:346::-;-1:-1:-1;;15672:3:17;;15626:2329;;;-1:-1:-1;18005:17:17;;;;17985:16;;:37;17964:141;;;;;;;;;;;;:::i;764:457:35:-;850:7;877:6;873:45;;-1:-1:-1;906:1:35;899:8;;873:45;939:5;;;943:1;939;:5;:1;958:5;;;;;:10;954:243;;984:202;1009:176;1069:64;1151:1;1170;1009:42;:176::i;2004:392::-;2090:7;2125:5;;;2144;;;2140:232;;;2165:196;2190:170;2250:58;2326:1;2345;2190:42;:170::i;24822:3298:17:-;24962:14;25001:6;:12;;;:19;24996:1;:24;24992:2995;;;-1:-1:-1;25152:16:17;;;;24992:2995;;;25199:34;;:::i;:::-;25236:6;:12;;;25249:1;25236:15;;;;;;;;;;;;;;25199:52;;25283:26;25269:40;;;;;;;;:10;;:40;;;;;;;;;25265:2712;;;25535:23;25560:12;25608:7;:12;;;25576:101;;;;;;;;;;;;:::i;:::-;25534:143;;;;25704:135;25752:6;25759:1;25752:9;;;;;;;;;;;;;;25783:6;25790:1;25783:9;;;;;;;;;;;;;;25814:7;25704:26;:135::i;:::-;25695:144;;25265:2712;;;;;25878:34;25864:10;;:48;;;;;;;;;25860:2117;;;26226:7;:12;;;26194:100;;;;;;;;;;;;:::i;:::-;-1:-1:-1;26182:112:17;-1:-1:-1;25860:2117:17;;;26350:26;26336:10;;:40;;;;;;;;;:100;;;-1:-1:-1;26410:26:17;26396:10;;:40;;;;;;;;;26336:100;26315:1662;;;27700:6;;:32;;;;;27711:6;:21;;;27710:22;27700:32;27696:167;;;27765:10;27756:19;;27696:167;;;27839:4;27822:22;;27696:167;26315:1662;;;27901:61;;;;;;;;;;:::i;26315:1662::-;24992:2995;;28017:20;;;27996:117;;;;;;;;;;;;:::i;5010:887:22:-;5236:23;5261:12;5301:15;5277:80;;;;;;;;;;;;:::i;:::-;5235:122;;;;5436:1;5419:6;:13;:18;;:76;;;;-1:-1:-1;5466:13:22;;5480:14;;;;5466:29;;;;;;;;;;;;;;5453:42;;:6;5460:1;5453:9;;;;;;;;;;;;;;:42;;;5419:76;:154;;;;;5540:6;:13;;;5554:5;:14;;;5571:1;5554:18;5540:33;;;;;;;;;;;;;;5511:62;;:6;5534:1;5518:6;:13;:17;5511:25;;;;;;;;;;;;;;:62;;;5419:154;5398:258;;;;;;;;;;;;:::i;:::-;5740:150;5770:6;5790:5;:23;;;5827:7;5848:5;:10;;;5872:5;:8;;;5740:16;:150::i;:::-;5714:176;;;-1:-1:-1;;;;5010:887:22:o;2863:1626:23:-;3028:12;3050:23;3109:4;3087:27;;:5;:10;;;:27;;;3083:1141;;;3565:23;;3633:8;;;;;3402:257;;3374:4;;3446:60;;3402:257;;3528:15;;3565:23;;;3402:257;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3366:307;;;;3402:257;3366:307;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3342:331:23;;-1:-1:-1;3342:331:23;-1:-1:-1;3083:1141:23;;;4105:23;;4173:8;;;;;3947:252;;3911:4;;3991:55;;3947:252;;4068:15;;4105:23;;;3947:252;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3903:310;;;;3947:252;3903:310;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3879:334:23;;-1:-1:-1;3879:334:23;-1:-1:-1;3083:1141:23;4237:7;4233:250;;;4355:10;4344:33;;;;;;;;;;;;:::i;:::-;4318:59;;4233:250;;;4408:64;;;;;;;;;;:::i;4233:250::-;2863:1626;;;;:::o;5039:1735:18:-;5272:25;5315:6;:13;;;5329:5;:14;;;5315:29;;;;;;;;;;;;;;5272:73;;5355:26;5399:6;:13;;;5413:5;:14;;;5430:1;5413:18;5399:33;;;;;;;;;;;;;;5355:78;;5503:16;5521:26;5575:15;5551:79;;;;;;;;;;;;:::i;:::-;5502:128;;;;5702:21;5726:11;:34;;;5761:5;:8;;;5726:44;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5702:68;;5809:7;:32;;;5874:8;5897:10;5921:11;5946:5;:8;;;5968:1;5983:13;5809:197;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6329:23:18;;6503:8;;;;;6468:44;;;;;6329:23;;-1:-1:-1;6468:80:18;;-1:-1:-1;6534:13:18;;6468:34;;;;;;:44;;6503:8;6468:44;;;:::i;:80::-;6442:106;;;6749:8;;;;;6564:203;;;;;;6607:10;;6640:11;;6666:10;;6442:106;;6727:8;;6749;6564:203;:::i;:::-;;;;;;;;5039:1735;;;;;;;;;:::o;22465:1699:17:-;22672:38;;:::i;:::-;22823:4;22799:72;;;;;;;;;;;;:::i;:::-;22775:21;;;;:96;;;;23083:13;;23097:14;;;;23083:29;;;;;;;;;;;;;;;;;;23026:96;;;;23190:13;;23204:14;;;;23190:33;;23221:1;23204:18;;;;23190:33;;;;;;;;;;;;;;;;;23132:101;;:27;;;:101;23380:23;;23351:26;;;:52;23794:14;;;;:18;;;:43;;;23816:6;:21;;;23794:43;23761:76;;:30;;;:76;24012:8;;;;23984:36;;:25;;;:36;24110:34;23761:15;24110:17;:34::i;:::-;:47;;;24072:85;;;-1:-1:-1;;;22465:1699:17:o;28346:794::-;28516:18;2004:8;;28555:9;:20;28554:34;28550:584;;;28744:226;28899:4;28821:55;2120:12;28843:26;;28899:4;28821:21;:55::i;:::-;28783:15;:93;:120;;;;;;28921:35;:15;28945:10;28921:23;:35::i;:::-;28744:21;:226::i;:::-;28737:233;;;;28550:584;29008:115;29047:9;29074:35;:15;29098:10;29074:23;:35::i;1120:1882:20:-;1424:36;;:::i;:::-;1474:39;;:::i;:::-;1550:15;1526:112;;;;;;;;;;;;:::i;:::-;1410:228;;;;1731:15;1708:39;;:5;:12;;;:39;;;1704:333;;1763:17;1783:89;1815:43;1852:5;1815:36;:43::i;:::-;1783:14;:89::i;:::-;1763:109;;1891:115;1924:9;1951:5;:11;;;1980:5;:12;;;1891:115;;;;;;;;:::i;:::-;;;;;;;;2020:7;;;;;1704:333;2115:6;:17;;;2095:37;;:5;:16;;;:37;;;:91;;;;;2168:6;:18;;;2148:38;;:5;:16;;;:38;;;2095:91;2074:195;;;;;;;;;;;;:::i;:::-;2380:4;2351:49;2439:5;2466:9;2497:34;:10;:32;:34::i;:::-;2553:10;2585:6;:21;;;2628:6;:16;;;2351:311;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2351:311:20;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;2335:661;;;;;2843:16;;:48;;;;;:24;:48::i;:::-;2824:67;;2926:18;;;;:50;;;;;:26;:50::i;:::-;2905:18;;;:71;-1:-1:-1;;1120:1882:20;;;;;;:::o;1117:1928:19:-;1421:36;;:::i;:::-;1471:39;;:::i;:::-;1547:15;1523:112;;;;;;;;;;;;:::i;:::-;1407:228;;;;1714:6;:17;;;1694:37;;:5;:16;;;:37;;;:91;;;;;1767:6;:18;;;1747:38;;:5;:16;;;:38;;;1694:91;1673:195;;;;;;;;;;;;:::i;:::-;1957:20;;;;1981:3;1957:27;1999:33;2016:15;1999:33;;;1995:321;;2048:17;2068:89;2100:43;2137:5;2100:36;:43::i;2068:89::-;2048:109;;2176;2209:9;2236:5;:11;;;2265:6;2176:109;;;;;;;;:::i;:::-;;;;;;;;2299:7;;;;;;1995:321;2423:4;2397:46;2482:5;2509:9;2540:34;:10;:32;:34::i;:::-;2596:10;2628:6;:21;;;2671:6;:16;;;2397:308;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2397:308:19;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;2381:658;;;;;2886:16;;:48;;;;;:24;:48::i;:::-;2867:67;;2969:18;;;;:50;;;;;:26;:50::i;:::-;2948:18;;;:71;-1:-1:-1;;1117:1928:19;;;;;;;:::o;4093:911:22:-;4365:12;4379:23;4406:15;:28;;4488:41;;;4547:6;4571:15;4604:10;4448:180;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4406:232;;;;4448:180;4406:232;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4364:274;;;;4652:7;4648:350;;;4733:20;4767:10;4756:33;;;;;;;;;;;;:::i;:::-;4876:16;;4733:56;;-1:-1:-1;4876:36:22;;4901:10;4876:24;:36::i;:::-;4857:55;;4947:18;;;;:40;;4974:12;4947:26;:40::i;:::-;4926:18;;;:61;-1:-1:-1;4093:911:22;;;;;;:::o;1058:1799:23:-;1302:12;1324:23;1361:6;:21;;;1357:1125;;;1888:16;;;;1670:252;;1642:4;;1714:60;;1670:252;;1796:15;;1833:10;;1865:1;;1670:252;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1634:302;;;;1670:252;1634:302;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1610:326:23;;-1:-1:-1;1610:326:23;-1:-1:-1;1357:1125:23;;;2423:16;;;;2210:247;;2174:4;;2254:55;;2210:247;;2331:15;;2368:10;;2400:1;;2210:247;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2166:305;;;;2210:247;2166:305;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2142:329:23;;-1:-1:-1;2142:329:23;-1:-1:-1;1357:1125:23;2495:7;2491:360;;;2576:25;2615:10;2604:33;;;;;;;;;;;;:::i;3965:927:18:-;4245:12;4259:23;4286:15;:28;;4368:49;;;4435:6;4459:15;4492:10;4328:188;;;;;;;;;;:::i;932:1278:21:-;1181:53;;:::i;:::-;1349:10;1336:23;;1387:17;;1336:23;1369:35;;;:15;;;;:35;;;;1433:18;;;;1414:37;;:16;;;:37;1461:21;;;:34;;;1336:10;1505:25;;;;:29;;;;1566:21;;;1544:43;;:19;;;:43;1622:16;;;;1597:42;;;:14;;;:42;1674:104;;;;;;;;;;;;;:::i;:::-;1650:20;;;1649:129;1852:72;;;;;1883:4;;1852:53;;:72;;1650:4;;1852:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1852:72:21;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;1848:356;;;;;2068:16;;:36;;2093:10;2068:24;:36::i;:::-;2049:55;;2139:18;;;;:45;;2166:17;2139:26;:45::i;:::-;2118:18;;;:66;-1:-1:-1;932:1278:21;;;;;:::o;21152:1307:17:-;21384:40;;:::i;:::-;21621:4;21597:86;;;;;;;;;;;;:::i;:::-;21564:20;;;21515:168;;;21693:25;;;:38;;;21913:21;;;;;21881:53;;:29;;;:53;22095:16;;;;22068:43;;:24;;;:43;21529:21;22207:36;21529:14;22207:20;:36::i;:::-;:54;22340:16;;22207:54;;-1:-1:-1;22340:36:17;;22365:10;22340:24;:36::i;6921:1727:15:-;7022:18;7482:4;7476:11;7512:19;7507:3;7500:32;7625:5;7619:12;7605;7601:31;7594:4;7589:3;7585:14;7578:55;7737:4;7730:5;7726:16;7720:23;7706:12;7702:42;7695:4;7690:3;7686:14;7679:66;7851:4;7844:5;7840:16;7834:23;7819:13;7815:43;7808:4;7803:3;7799:14;7792:67;7965:4;7958:5;7954:16;7948:23;7933:13;7929:43;7922:4;7917:3;7913:14;7906:67;8072:4;8065:5;8061:16;8055:23;8041:12;8037:42;8030:4;8025:3;8021:14;8014:66;8179:4;8172:5;8168:16;8162:23;8148:12;8144:42;8137:4;8132:3;8128:14;8121:66;8289:4;8282:5;8278:16;8272:23;8258:12;8254:42;8247:4;8242:3;8238:14;8231:66;8378:4;8371:5;8367:16;8361:23;8353:5;8348:3;8344:15;8337:48;8486:5;8479;8475:17;8469:24;8455:12;8451:43;8443:5;8438:3;8434:15;8427:68;8576:5;8569;8565:17;8559:24;8551:5;8546:3;8542:15;8535:49;8626:5;8621:3;8611:21;8597:35;;;7451:1191;;;:::o;1810:260:25:-;1901:18;2005:23;2042:10;1952:110;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1942:121;;;;;;1935:128;;1810:260;;;:::o;4618:401:35:-;4707:7;4738:17;4734:21;;4730:256;;;4771:204;4796:178;4859:82;4959:1;4796:45;:178::i;4771:204::-;-1:-1:-1;5010:1:35;4618:401::o;8797:1496:15:-;8898:18;9316:4;9310:11;9346:19;9341:3;9334:32;9459:5;9453:12;9439;9435:31;9428:4;9423:3;9419:14;9412:55;9571:4;9564:5;9560:16;9554:23;9540:12;9536:42;9529:4;9524:3;9520:14;9513:66;9685:4;9678:5;9674:16;9668:23;9653:13;9649:43;9642:4;9637:3;9633:14;9626:67;9799:4;9792:5;9788:16;9782:23;9767:13;9763:43;9756:4;9751:3;9747:14;9740:67;9906:4;9899:5;9895:16;9889:23;9875:12;9871:42;9864:4;9859:3;9855:14;9848:66;10013:4;10006:5;10002:16;9996:23;9982:12;9978:42;9971:4;9966:3;9962:14;9955:66;10123:4;10116:5;10112:16;10106:23;10092:12;10088:42;10081:4;10076:3;10072:14;10065:66;10222:4;10215:5;10211:16;10205:23;10197:5;10192:3;10188:15;10181:48;10271:5;10266:3;10256:21;10242:35;;;9285:1002;;;:::o;1729:297:38:-;1869:12;966:10;1940:31;;1985:9;2008:1;1904:115;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1729:297:38;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;142:134::-;220:13;;238:33;220:13;238:33;:::i;611:707::-;;728:3;721:4;713:6;709:17;705:27;695:2;;-1:-1;;736:12;695:2;783:6;770:20;805:80;820:64;877:6;820:64;:::i;:::-;805:80;:::i;:::-;913:21;;;796:89;-1:-1;957:4;970:14;;;;945:17;;;1059;;;1050:27;;;;1047:36;-1:-1;1044:2;;;1096:1;;1086:12;1044:2;1121:1;1106:206;1131:6;1128:1;1125:13;1106:206;;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;1199:50;;1263:14;;;;1291;;;;1153:1;1146:9;1106:206;;;1110:14;;;;;688:630;;;;:::o;1344:722::-;;1472:3;1465:4;1457:6;1453:17;1449:27;1439:2;;-1:-1;;1480:12;1439:2;1520:6;1514:13;1542:80;1557:64;1614:6;1557:64;:::i;1542:80::-;1650:21;;;1533:89;-1:-1;1694:4;1707:14;;;;1682:17;;;1796;;;1787:27;;;;1784:36;-1:-1;1781:2;;;1833:1;;1823:12;1781:2;1858:1;1843:217;1868:6;1865:1;1862:13;1843:217;;;226:6;220:13;238:33;265:5;238:33;:::i;:::-;1936:61;;2011:14;;;;2039;;;;1890:1;1883:9;1843:217;;2126:777;;2276:3;2269:4;2261:6;2257:17;2253:27;2243:2;;-1:-1;;2284:12;2243:2;2331:6;2318:20;2353:113;2368:97;2458:6;2368:97;:::i;2353:113::-;2494:21;;;2344:122;-1:-1;2538:4;2551:14;;;;2526:17;;;2646:1;2631:266;2656:6;2653:1;2650:13;2631:266;;;2739:3;2726:17;2530:6;2714:30;9269:4;;9248:19;2714:30;9252:3;9248:19;;9244:30;9241:2;;;2646:1;;9277:12;9241:2;9305:20;9269:4;9305:20;:::i;:::-;2538:4;2714:30;;8429:20;8454:53;8501:5;8454:53;:::i;:::-;9380:95;;9596:22;;;;17378:20;9557:16;;;9550:75;9699:18;;;9686:32;;9738:18;9727:30;;9724:2;;;2646:1;;9760:12;9724:2;9805:58;9859:3;2538:4;9850:6;2714:30;9835:22;;9805:58;:::i;:::-;9787:16;;;9780:84;2751:83;;-1:-1;;2848:14;;;;2876;;;;2678:1;2671:9;2631:266;;3811:786;;3964:3;3957:4;3949:6;3945:17;3941:27;3931:2;;-1:-1;;3972:12;3931:2;4019:6;4006:20;4041:116;4056:100;4149:6;4056:100;:::i;4041:116::-;4185:21;;;4032:125;-1:-1;4229:4;4242:14;;;;4217:17;;;4337:1;4322:269;4347:6;4344:1;4341:13;4322:269;;;4430:3;4417:17;4221:6;4405:30;10898:4;;10877:19;4405:30;10881:3;10877:19;;10873:30;10870:2;;;4337:1;;10906:12;10870:2;10934:20;10898:4;10934:20;:::i;:::-;11034:69;11099:3;4229:4;4405:30;;11034:69;:::i;:::-;11009:95;;11178:18;;;11165:32;;11217:18;11206:30;;11203:2;;;4337:1;;11239:12;11203:2;11284:58;11338:3;4229:4;11329:6;4405:30;11314:22;;11284:58;:::i;:::-;11266:16;;;11259:84;4442:86;;-1:-1;;4542:14;;;;4570;;;;4369:1;4362:9;4322:269;;7073:440;;7174:3;7167:4;7159:6;7155:17;7151:27;7141:2;;-1:-1;;7182:12;7141:2;7229:6;7216:20;7251:64;7266:48;7307:6;7266:48;:::i;7251:64::-;7242:73;;7335:6;7328:5;7321:21;7439:3;7371:4;7430:6;7363;7421:16;;7418:25;7415:2;;;7456:1;;7446:12;7415:2;86073:6;7371:4;7363:6;7359:17;7371:4;7397:5;7393:16;86050:30;86129:1;86111:16;;;7371:4;86111:16;86104:27;7397:5;7134:379;-1:-1;;7134:379::o;7522:442::-;;7634:3;7627:4;7619:6;7615:17;7611:27;7601:2;;-1:-1;;7642:12;7601:2;7682:6;7676:13;7704:64;7719:48;7760:6;7719:48;:::i;7704:64::-;7695:73;;7788:6;7781:5;7774:21;7892:3;7824:4;7883:6;7816;7874:16;;7871:25;7868:2;;;7909:1;;7899:12;7868:2;7919:39;7951:6;7824:4;7850:5;7846:16;7824:4;7816:6;7812:17;7919:39;:::i;:::-;;7594:370;;;;:::o;8342:170::-;8429:20;;8454:53;8429:20;8454:53;:::i;15531:828::-;;15658:4;15646:9;15641:3;15637:19;15633:30;15630:2;;;-1:-1;;15666:12;15630:2;15694:20;15658:4;15694:20;:::i;:::-;15685:29;;8802:6;8796:13;88265:1;88258:5;88255:12;88245:2;;-1:-1;;88271:12;88245:2;15780:104;;15942:2;16005:22;;17943:13;84103:4;84092:16;;88970:33;;88960:2;;-1:-1;;89007:12;88960:2;15975:58;15942:2;15961:5;15957:16;15950:84;;16092:2;16161:9;16157:22;6651:13;16092:2;16111:5;16107:16;16100:86;16244:2;16313:9;16309:22;6651:13;16244:2;16263:5;16259:16;16252:86;15624:735;;;;:::o;17170:134::-;17248:13;;83580:34;83569:46;;88480:35;;88470:2;;88529:1;;88519:12;17728:132;17805:13;;84001:18;83990:30;;88849:34;;88839:2;;88897:1;;88887:12;18004:241;;18108:2;18096:9;18087:7;18083:23;18079:32;18076:2;;;-1:-1;;18114:12;18076:2;85:6;72:20;97:33;124:5;97:33;:::i;18252:486::-;;;18390:2;18378:9;18369:7;18365:23;18361:32;18358:2;;;-1:-1;;18396:12;18358:2;371:6;358:20;383:41;418:5;383:41;:::i;:::-;18448:71;-1:-1;18584:2;18569:18;;18556:32;18608:18;18597:30;;18594:2;;;-1:-1;;18630:12;18594:2;18660:62;18714:7;18705:6;18694:9;18690:22;18660:62;:::i;:::-;18650:72;;;18352:386;;;;;:::o;18745:512::-;;;18894:2;18882:9;18873:7;18869:23;18865:32;18862:2;;;-1:-1;;18900:12;18862:2;528:6;522:13;540:41;575:5;540:41;:::i;:::-;19092:2;19077:18;;19071:25;18952:82;;-1:-1;19116:18;19105:30;;19102:2;;;-1:-1;;19138:12;19102:2;19168:73;19233:7;19224:6;19213:9;19209:22;19168:73;:::i;19264:729::-;;;19482:2;19470:9;19461:7;19457:23;19453:32;19450:2;;;-1:-1;;19488:12;19450:2;19539:17;19533:24;19577:18;;19569:6;19566:30;19563:2;;;-1:-1;;19599:12;19563:2;19629:89;19710:7;19701:6;19690:9;19686:22;19629:89;:::i;:::-;19619:99;;19776:2;;;;19765:9;19761:18;19755:25;19577:18;19792:6;19789:30;19786:2;;;-1:-1;;19822:12;19786:2;19945:22;;4817:4;4805:17;;4801:27;-1:-1;4791:2;;-1:-1;;4832:12;4791:2;4872:6;4866:13;4894:116;4909:100;5002:6;4909:100;:::i;4894:116::-;5038:21;;;5095:14;;;;5070:17;;;-1:-1;5175:273;5200:6;5197:1;5194:13;5175:273;;;5276:3;5270:10;5074:6;5258:23;19482:2;11537:19;5258:23;11541:3;11537:19;;11533:30;11530:2;;;-1:-1;;11566:12;11530:2;11594:20;19482:2;11594:20;:::i;:::-;19776:2;5258:23;;8617:13;8635:53;8682:5;8635:53;:::i;:::-;11669:106;;19482:2;11842:18;;11836:25;11870:30;;;11867:2;;;-1:-1;;11903:12;11867:2;11948:69;12013:3;19776:2;12004:6;5258:23;11989:22;;11948:69;:::i;:::-;11930:16;;;11923:95;-1:-1;5288:97;;-1:-1;5399:14;;;;5427;;;;5222:1;5215:9;5175:273;;;-1:-1;19444:549;;19842:135;;-1:-1;19444:549;-1:-1;;;;;;;;19444:549::o;20000:835::-;;;;20224:2;20212:9;20203:7;20199:23;20195:32;20192:2;;;-1:-1;;20230:12;20192:2;20288:17;20275:31;20326:18;;20318:6;20315:30;20312:2;;;-1:-1;;20348:12;20312:2;20378:78;20448:7;20439:6;20428:9;20424:22;20378:78;:::i;:::-;20368:88;;20521:2;20510:9;20506:18;20493:32;20479:46;;20326:18;20537:6;20534:30;20531:2;;;-1:-1;;20567:12;20531:2;;20597:114;20703:7;20694:6;20683:9;20679:22;20597:114;:::i;:::-;20587:124;;;20748:2;20791:9;20787:22;17378:20;20756:63;;20186:649;;;;;:::o;20842:961::-;;;;;21083:3;21071:9;21062:7;21058:23;21054:33;21051:2;;;-1:-1;;21090:12;21051:2;21148:17;21135:31;21186:18;;21178:6;21175:30;21172:2;;;-1:-1;;21208:12;21172:2;21238:78;21308:7;21299:6;21288:9;21284:22;21238:78;:::i;:::-;21228:88;;21381:2;21370:9;21366:18;21353:32;21339:46;;21186:18;21397:6;21394:30;21391:2;;;-1:-1;;21427:12;21391:2;;21457:114;21563:7;21554:6;21543:9;21539:22;21457:114;:::i;:::-;21045:758;;21447:124;;-1:-1;;;;21608:2;21647:22;;17378:20;;21716:2;21755:22;17378:20;;21045:758;-1:-1;21045:758::o;21810:496::-;;;21953:2;21941:9;21932:7;21928:23;21924:32;21921:2;;;-1:-1;;21959:12;21921:2;22017:17;22004:31;22055:18;22047:6;22044:30;22041:2;;;-1:-1;;22077:12;22041:2;22107:78;22177:7;22168:6;22157:9;22153:22;22107:78;:::i;:::-;22097:88;;;22222:2;22262:9;22258:22;6371:20;6396:30;6420:5;6396:30;:::i;:::-;22230:60;;;;21915:391;;;;;:::o;22313:522::-;;;22467:2;22455:9;22446:7;22442:23;22438:32;22435:2;;;-1:-1;;22473:12;22435:2;22524:17;22518:24;22562:18;22554:6;22551:30;22548:2;;;-1:-1;;22584:12;22548:2;22614:89;22695:7;22686:6;22675:9;22671:22;22614:89;:::i;:::-;22604:99;;;22740:2;22791:9;22787:22;6513:13;6531:30;6555:5;6531:30;:::i;22842:458::-;;23015:2;;23003:9;22994:7;22990:23;22986:32;22983:2;;;-1:-1;;23021:12;22983:2;23072:17;23066:24;23110:18;;23102:6;23099:30;23096:2;;;-1:-1;;23132:12;23096:2;23267:6;23256:9;23252:22;;;3124:3;3117:4;3109:6;3105:17;3101:27;3091:2;;-1:-1;;3132:12;3091:2;3172:6;3166:13;3194:113;3209:97;3299:6;3209:97;:::i;3194:113::-;3335:21;;;3392:14;;;;3367:17;;;-1:-1;3472:270;3497:6;3494:1;3491:13;3472:270;;;3573:3;3567:10;3371:6;3555:23;10073:4;;10052:19;3555:23;10056:3;10052:19;;10048:30;10045:2;;;-1:-1;;10081:12;10045:2;10109:20;10073:4;10109:20;:::i;:::-;23015:2;3555:23;;8617:13;8635:53;8682:5;8635:53;:::i;:::-;10184:106;;10422:22;;;;17526:13;10372:16;;;10365:86;10518:18;;;10512:25;;10546:30;;;10543:2;;;-1:-1;;10579:12;10543:2;10624:69;10689:3;23015:2;10680:6;3555:23;10665:22;;10624:69;:::i;:::-;10606:16;;;10599:95;3585:94;;-1:-1;;3693:14;;;;3721;;;;3519:1;3512:9;3472:270;;;-1:-1;23152:132;;22977:323;-1:-1;;;;;;;;;22977:323::o;23307:456::-;;23479:2;;23467:9;23458:7;23454:23;23450:32;23447:2;;;-1:-1;;23485:12;23447:2;23536:17;23530:24;23574:18;;23566:6;23563:30;23560:2;;;-1:-1;;23596:12;23560:2;23730:6;23719:9;23715:22;;;5677:3;5670:4;5662:6;5658:17;5654:27;5644:2;;-1:-1;;5685:12;5644:2;5725:6;5719:13;5747:112;5762:96;5851:6;5762:96;:::i;5747:112::-;5887:21;;;5944:14;;;;5919:17;;;-1:-1;6024:269;6049:6;6046:1;6043:13;6024:269;;;6125:3;6119:10;5923:6;6107:23;16549:4;;16528:19;6107:23;16532:3;16528:19;;16524:30;16521:2;;;-1:-1;;16557:12;16521:2;16585:20;16549:4;16585:20;:::i;:::-;23479:2;6107:23;;17666:13;17684:32;17710:5;17684:32;:::i;:::-;16673:85;;16825:18;;;16819:25;;16853:30;;;16850:2;;;-1:-1;;16886:12;16850:2;16931:69;16996:3;23479:2;16987:6;6107:23;16972:22;;16931:69;:::i;:::-;16913:16;;;16906:95;6137:93;;-1:-1;;6244:14;;;;6272;;;;6071:1;6064:9;6024:269;;23770:235;;23871:2;23859:9;23850:7;23846:23;23842:32;23839:2;;;-1:-1;;23877:12;23839:2;6384:6;6371:20;6396:30;6420:5;6396:30;:::i;24306:739::-;;;;24525:2;24513:9;24504:7;24500:23;24496:32;24493:2;;;-1:-1;;24531:12;24493:2;8075:6;8062:20;8087:56;8137:5;8087:56;:::i;:::-;24583:86;-1:-1;24734:2;24719:18;;24706:32;24758:18;24747:30;;24744:2;;;-1:-1;;24780:12;24744:2;24810:111;24913:7;24904:6;24893:9;24889:22;24810:111;:::i;25052:865::-;;;;;25288:3;25276:9;25267:7;25263:23;25259:33;25256:2;;;-1:-1;;25295:12;25256:2;8075:6;8062:20;8087:56;8137:5;8087:56;:::i;:::-;25347:86;-1:-1;25498:2;25483:18;;25470:32;25522:18;25511:30;;25508:2;;;-1:-1;;25544:12;25508:2;25574:111;25677:7;25668:6;25657:9;25653:22;25574:111;:::i;25924:1037::-;;;;;;26200:3;26188:9;26179:7;26175:23;26171:33;26168:2;;;-1:-1;;26207:12;26168:2;8075:6;8062:20;8087:56;8137:5;8087:56;:::i;:::-;26259:86;-1:-1;26382:2;26444:22;;8062:20;8087:56;8062:20;8087:56;:::i;:::-;26390:86;-1:-1;26541:2;26526:18;;26513:32;26565:18;26554:30;;26551:2;;;-1:-1;;26587:12;26551:2;26617:111;26720:7;26711:6;26700:9;26696:22;26617:111;:::i;:::-;26162:799;;;;-1:-1;26607:121;;26765:2;26804:22;;17378:20;;-1:-1;26873:3;26913:22;17378:20;;26162:799;-1:-1;;;26162:799::o;26968:769::-;;;;;27159:2;27147:9;27138:7;27134:23;27130:32;27127:2;;;-1:-1;;27165:12;27127:2;27223:17;27210:31;27261:18;;27253:6;27250:30;27247:2;;;-1:-1;;27283:12;27247:2;27368:22;;;;9044:3;9026:16;;;9022:26;9019:2;;;-1:-1;;9051:12;9019:2;27303:97;;-1:-1;27465:2;27450:18;;27437:32;;27478:30;;;27475:2;;;-1:-1;;27511:12;27475:2;27596:6;27585:9;27581:22;;;6842:3;6835:4;6827:6;6823:17;6819:27;6809:2;;-1:-1;;6850:12;6809:2;6893:6;6880:20;27261:18;6912:6;6909:30;6906:2;;;-1:-1;;6942:12;6906:2;7037:3;27465:2;7017:17;6978:6;7003:32;;7000:41;6997:2;;;-1:-1;;7044:12;6997:2;27121:616;;27465:2;6974:17;;;;;-1:-1;27531:82;;27650:2;27689:22;17378:20;;-1:-1;27121:616;-1:-1;;;27121:616::o;27744:507::-;;;27917:9;27908:7;27904:23;27929:3;27904:23;27900:33;27897:2;;;-1:-1;;27936:12;27897:2;12209:6;;12188:19;12184:32;12181:2;;;-1:-1;;12219:12;12181:2;12247:22;12209:6;12247:22;:::i;:::-;12238:31;;8262:6;8256:13;8274:56;8324:5;8274:56;:::i;:::-;12332:109;;12541:83;12620:3;12508:2;12596:22;;12541:83;:::i;:::-;12508:2;12527:5;12523:16;12516:109;12726:60;12782:3;12693:2;12762:9;12758:22;12726:60;:::i;:::-;12693:2;12712:5;12708:16;12701:86;12888:60;12944:3;12855:2;12924:9;12920:22;12888:60;:::i;:::-;12855:2;12874:5;12870:16;12863:86;13045:60;13101:3;13011;13081:9;13077:22;13045:60;:::i;:::-;13011:3;13031:5;13027:16;13020:86;13202:60;13258:3;13168;13238:9;13234:22;13202:60;:::i;:::-;13168:3;13188:5;13184:16;13177:86;13362:60;13418:3;13328;13398:9;13394:22;13362:60;:::i;:::-;13328:3;13348:5;13344:16;13337:86;13494:3;13564:9;13560:22;17526:13;13494:3;13514:5;13510:16;13503:86;27988:100;;;28144:91;28227:7;12209:6;28207:9;28203:22;28144:91;:::i;:::-;28134:101;;;;27891:360;;;;;:::o;28258:507::-;;;28431:9;28422:7;28418:23;28443:3;28418:23;28414:33;28411:2;;;-1:-1;;28450:12;28411:2;13780:6;;13759:19;13755:32;13752:2;;;-1:-1;;13790:12;13752:2;13818:22;13780:6;13818:22;:::i;:::-;13809:31;;13928:83;14007:3;13983:22;13928:83;:::i;:::-;13910:16;13903:109;14112:83;14191:3;14079:2;14171:9;14167:22;14112:83;:::i;:::-;14079:2;14098:5;14094:16;14087:109;14297:60;14353:3;14264:2;14333:9;14329:22;14297:60;:::i;:::-;14264:2;14283:5;14279:16;14272:86;14459:60;14515:3;14426:2;14495:9;14491:22;14459:60;:::i;:::-;14426:2;14445:5;14441:16;14434:86;14616:60;14672:3;14582;14652:9;14648:22;14616:60;:::i;:::-;14582:3;14602:5;14598:16;14591:86;14773:60;14829:3;14739;14809:9;14805:22;14773:60;:::i;:::-;14739:3;14759:5;14755:16;14748:86;14933:60;14989:3;14899;14969:9;14965:22;14933:60;:::i;:::-;14899:3;14919:5;14915:16;14908:86;15055:3;15125:9;15121:22;6651:13;15055:3;15075:5;15071:16;15064:86;15213:3;15249:59;15304:3;15213;15284:9;15280:22;15249:59;:::i;:::-;15213:3;15233:5;15229:18;15222:87;;15370:3;;15442:9;15438:22;17526:13;15370:3;15390:5;15386:18;15379:88;;28502:100;;;28658:91;28741:7;13780:6;28721:9;28717:22;28658:91;:::i;28772:533::-;;;;28920:2;28908:9;28899:7;28895:23;28891:32;28888:2;;;-1:-1;;28926:12;28888:2;17113:6;17107:13;17125:33;17152:5;17125:33;:::i;:::-;29089:2;29139:22;;17107:13;28978:74;;-1:-1;17125:33;17107:13;17125:33;:::i;:::-;29208:2;29257:22;;17666:13;29097:74;;-1:-1;17684:32;17666:13;17684:32;:::i;:::-;29216:73;;;;28882:423;;;;;:::o;29312:399::-;;;29444:2;29432:9;29423:7;29419:23;29415:32;29412:2;;;-1:-1;;29450:12;29412:2;17254:6;17248:13;17266:33;17293:5;17266:33;:::i;:::-;29613:2;29663:22;;17248:13;29502:74;;-1:-1;17266:33;17248:13;17266:33;:::i;29718:263::-;;29833:2;29821:9;29812:7;29808:23;29804:32;29801:2;;;-1:-1;;29839:12;29801:2;-1:-1;17526:13;;29795:186;-1:-1;29795:186::o;29989:285::-;;48807:16;48801:23;87236:1;87229:5;87226:12;87216:2;;87242:9;87216:2;85301:44;36366:3;36359:68;;48996:4;48989:5;48985:16;48979:23;48996:4;49060:3;49056:14;33913:37;49150:4;49143:5;49139:16;49133:23;48737:4;49150;49180:3;49176:14;49169:38;49222:71;48737:4;48732:3;48728:14;49274:12;49222:71;:::i;30572:142::-;83700:42;83689:54;30651:58;;30645:69::o;32548:1084::-;;32827:5;80131:12;81054:6;81049:3;81042:19;81091:4;;81086:3;81082:14;32839:115;;;;81091:4;33011:6;33007:17;33002:3;32998:27;32986:39;;81091:4;33128:5;79762:14;-1:-1;33167:426;33192:6;33189:1;33186:13;33167:426;;;33244:20;;;33232:33;;33293:13;;55858:23;;83906:10;83895:22;56734:36;;56016:16;;56010:23;55781:4;56053:14;;;56046:38;;;56099:71;55772:14;;;56010:23;56099:71;:::i;:::-;33572:14;;;;33313:136;-1:-1;;;80727:14;;;;33214:1;33207:9;33167:426;;;-1:-1;33616:10;;32726:906;-1:-1;;;;;;;32726:906::o;33640:94::-;82400:13;82393:21;33695:34;;33689:45::o;34358:323::-;;34490:5;80131:12;81054:6;81049:3;81042:19;34573:52;34618:6;81091:4;81086:3;81082:14;81091:4;34599:5;34595:16;34573:52;:::i;:::-;86789:2;86769:14;86785:7;86765:28;34637:39;;;;81091:4;34637:39;;34438:243;-1:-1;;34438:243::o;52853:800::-;53081:16;53075:23;82865:53;82912:5;82865:53;:::i;:::-;36516:66;;53259:4;53248:16;;;53242:23;84103:4;84092:16;53315:14;;;57063:35;53406:4;53395:16;;;53389:23;53466:14;;;33913:37;53557:4;53546:16;;;53540:23;53617:14;;33913:37;52973:680::o;56215:103::-;83580:34;83569:46;56276:37;;56270:48::o;56782:100::-;84001:18;83990:30;56841:36;;56835:47::o;57110:392::-;86876:14;86880:2;86876:14;;;;;31174:58;;86876:14;;;;;57363:2;57354:12;;31174:58;57465:12;;;57254:248::o;57509:271::-;;35198:5;80131:12;35309:52;35354:6;35349:3;35342:4;35335:5;35331:16;35309:52;:::i;:::-;35373:16;;;;;57643:137;-1:-1;;57643:137::o;57787:659::-;38733:66;38713:87;;38698:1;38819:11;;33913:37;;;;58298:12;;;33913:37;58409:12;;;58032:414::o;58453:798::-;41996:66;41976:87;;86880:2;86876:14;;;;;;41961:1;42082:11;;31174:58;58992:12;;;33913:37;;;;59103:12;;;33913:37;59214:12;;;58726:525::o;59258:379::-;59622:10;59446:191::o;59644:222::-;83700:42;83689:54;;;;30798:45;;59771:2;59756:18;;59742:124::o;59873:780::-;83700:42;83689:54;;;30798:45;;83689:54;;;60305:2;60290:18;;30798:45;60388:2;60373:18;;33913:37;;;;60471:2;60456:18;;33913:37;;;;83689:54;;60554:3;60539:19;;30798:45;83689:54;;;60638:3;60623:19;;30798:45;60140:3;60125:19;;60111:542::o;60660:222::-;33913:37;;;60787:2;60772:18;;60758:124::o;60889:440::-;33913:37;;;83700:42;83689:54;;;;61234:2;61219:18;;30798:45;84001:18;83990:30;61315:2;61300:18;;56841:36;61070:2;61055:18;;61041:288::o;61336:218::-;82577:66;82566:78;;;;34310:36;;61461:2;61446:18;;61432:122::o;61561:329::-;82577:66;82566:78;;;;34310:36;;83700:42;83689:54;61876:2;61861:18;;30798:45;61714:2;61699:18;;61685:205::o;61897:652::-;;62132:3;62154:17;62147:47;62208:76;62132:3;62121:9;62117:19;62270:6;62208:76;:::i;:::-;62363:2;62348:18;;33913:37;;;;-1:-1;84103:4;84092:16;;;;62452:2;62437:18;;36820:56;83700:42;83689:54;62535:2;62520:18;;;30798:45;62200:84;62103:446;-1:-1;62103:446::o;62556:1026::-;;83700:42;;35551:5;83689:54;35492:3;35485:73;83700:42;35551:5;83689:54;63137:2;63126:9;63122:18;35485:73;83700:42;35551:5;83689:54;63243:2;63232:9;63228:18;35485:73;83700:42;82210:5;83689:54;63326:2;63315:9;63311:18;30798:45;;36724:5;63417:3;63406:9;63402:19;36673:58;62922:3;63455;63444:9;63440:19;63433:49;63496:76;62922:3;62911:9;62907:19;63558:6;63496:76;:::i;:::-;63488:84;62893:689;-1:-1;;;;;;;;62893:689::o;63589:480::-;63790:2;63775:18;;82865:53;82912:5;82865:53;:::i;:::-;36025:68;;;63972:2;63957:18;;33913:37;;;;64055:2;64040:18;;;33913:37;63761:308;:::o;64076:375::-;64252:2;64237:18;;82865:53;82912:5;82865:53;:::i;:::-;36197:71;;;64437:2;64422:18;33913:37;64223:228;:::o;64458:310::-;;64605:2;64626:17;64619:47;64680:78;64605:2;64594:9;64590:18;64744:6;64680:78;:::i;64775:416::-;64975:2;64989:47;;;37467:2;64960:18;;;81042:19;37503:34;81082:14;;;37483:55;37572:21;37558:12;;;37551:43;37613:12;;;64946:245::o;65198:416::-;65398:2;65412:47;;;37864:2;65383:18;;;81042:19;37900:34;81082:14;;;37880:55;37969:27;37955:12;;;37948:49;38016:12;;;65369:245::o;65621:416::-;65821:2;65835:47;;;38267:2;65806:18;;;81042:19;38303:34;81082:14;;;38283:55;38372:19;38358:12;;;38351:41;38411:12;;;65792:245::o;66044:416::-;66244:2;66258:47;;;39069:2;66229:18;;;81042:19;39105:34;81082:14;;;39085:55;39174:27;39160:12;;;39153:49;39221:12;;;66215:245::o;66467:416::-;66667:2;66681:47;;;39472:2;66652:18;;;81042:19;39508:34;81082:14;;;39488:55;39577:27;39563:12;;;39556:49;39624:12;;;66638:245::o;66890:416::-;67090:2;67104:47;;;39875:2;67075:18;;;81042:19;39911:34;81082:14;;;39891:55;39980:21;39966:12;;;39959:43;40021:12;;;67061:245::o;67313:416::-;67513:2;67527:47;;;40272:2;67498:18;;;81042:19;40308:34;81082:14;;;40288:55;40377:34;40363:12;;;40356:56;40446:3;40432:12;;;40425:25;40469:12;;;67484:245::o;67736:416::-;67936:2;67950:47;;;40720:2;67921:18;;;81042:19;40756:34;81082:14;;;40736:55;40825:24;40811:12;;;40804:46;40869:12;;;67907:245::o;68159:416::-;68359:2;68373:47;;;41120:2;68344:18;;;81042:19;41156:34;81082:14;;;41136:55;41225:24;41211:12;;;41204:46;41269:12;;;68330:245::o;68582:416::-;68782:2;68796:47;;;41520:2;68767:18;;;81042:19;41556:34;81082:14;;;41536:55;41625:29;41611:12;;;41604:51;41674:12;;;68753:245::o;69005:416::-;69205:2;69219:47;;;42332:2;69190:18;;;81042:19;42368:34;81082:14;;;42348:55;42437:20;42423:12;;;42416:42;42477:12;;;69176:245::o;69428:416::-;69628:2;69642:47;;;42728:2;69613:18;;;81042:19;42764:34;81082:14;;;42744:55;42833:34;42819:12;;;42812:56;42902:11;42888:12;;;42881:33;42933:12;;;69599:245::o;69851:416::-;70051:2;70065:47;;;43184:2;70036:18;;;81042:19;43220:34;81082:14;;;43200:55;43289:27;43275:12;;;43268:49;43336:12;;;70022:245::o;70274:416::-;70474:2;70488:47;;;43587:2;70459:18;;;81042:19;43623:34;81082:14;;;43603:55;43692:22;43678:12;;;43671:44;43734:12;;;70445:245::o;70697:416::-;70897:2;70911:47;;;43985:2;70882:18;;;81042:19;44021:34;81082:14;;;44001:55;44090:34;44076:12;;;44069:56;44159:19;44145:12;;;44138:41;44198:12;;;70868:245::o;71120:416::-;71320:2;71334:47;;;44754:2;71305:18;;;81042:19;44790:34;81082:14;;;44770:55;44859:6;44845:12;;;44838:28;44885:12;;;71291:245::o;71543:416::-;71743:2;71757:47;;;45136:2;71728:18;;;81042:19;45172:34;81082:14;;;45152:55;45241:29;45227:12;;;45220:51;45290:12;;;71714:245::o;71966:416::-;72166:2;72180:47;;;45541:2;72151:18;;;81042:19;45577:34;81082:14;;;45557:55;45646:34;45632:12;;;45625:56;45715:11;45701:12;;;45694:33;45746:12;;;72137:245::o;72389:416::-;72589:2;72603:47;;;45997:2;72574:18;;;81042:19;46033:34;81082:14;;;46013:55;46102:16;46088:12;;;46081:38;46138:12;;;72560:245::o;72812:416::-;73012:2;73026:47;;;46389:2;72997:18;;;81042:19;46425:34;81082:14;;;46405:55;46494:34;46480:12;;;46473:56;46563:8;46549:12;;;46542:30;46591:12;;;72983:245::o;73235:416::-;73435:2;73449:47;;;46842:2;73420:18;;;81042:19;46878:34;81082:14;;;46858:55;46947:24;46933:12;;;46926:46;46991:12;;;73406:245::o;73658:704::-;;73923:2;73944:17;73937:47;47264:14;73912:9;47264:14;84358:60;47351:16;47345:23;84358:60;:::i;:::-;73923:2;73912:9;73908:18;35485:73;47546:4;83700:42;47546:4;47539:5;47535:16;47529:23;83689:54;47629:14;73912:9;47629:14;35485:73;47729:4;47722:5;47718:16;47712:23;47789:14;73912:9;47789:14;33913:37;73923:2;47877:5;47873:16;47867:23;47273:4;;73912:9;47910:14;47903:38;47956:169;31625:5;80131:12;31644:109;31746:6;31741:3;31644:109;:::i;:::-;31637:116;-1:-1;79762:14;;;;31637:116;;-1:-1;31806:17;;;31797:27;;-1:-1;31967:429;31992:6;31989:1;31986:13;31967:429;;;32054:9;32048:4;32044:20;32039:3;32032:33;32121:130;32246:4;32099:6;32093:13;32121:130;:::i;:::-;80727:14;;;;32375;;;;32113:138;-1:-1;32014:1;32007:9;31967:429;;;31971:14;47629;48213:5;48209:16;48203:23;48183:43;;48232:57;48274:14;73912:9;48274:14;48260:12;48232:57;:::i;:::-;47789:14;48366:5;48362:16;48356:23;48336:43;;48385:63;48433:14;73912:9;48433:14;48419:12;48385:63;:::i;:::-;74168:9;74162:4;74158:20;47546:4;74142:9;74138:18;74131:48;74193:76;74264:4;74255:6;74193:76;:::i;:::-;74185:84;;;;;;;;33943:5;47729:4;74337:9;74333:18;33913:37;73894:468;;;;;;:::o;74369:999::-;49628:23;;74744:3;74729:19;;;84358:60;;;:::i;:::-;35492:3;35485:73;83700:42;49828:4;49821:5;49817:16;49811:23;83689:54;49828:4;49915:3;49911:14;35485:73;50012:4;50005:5;50001:16;49995:23;83580:34;;56306:5;83569:46;50012:4;50076:3;50072:14;56276:37;83580:34;50173:4;50166:5;50162:16;50156:23;83569:46;50173:4;50237:3;50233:14;56276:37;;;50328:4;50321:5;50317:16;50311:23;50340:63;50328:4;50392:3;50388:14;50374:12;50340:63;:::i;:::-;;50483:4;50476:5;50472:16;50466:23;50495:63;50483:4;50547:3;50543:14;50529:12;50495:63;:::i;:::-;;50641:4;50634:5;50630:16;50624:23;50653:63;50641:4;50705:3;50701:14;50687:12;50653:63;:::i;:::-;;50805:4;50798:5;50794:16;50788:23;50805:4;50869:3;50865:14;33913:37;74893:127;75015:3;75004:9;75000:19;74991:6;74893:127;:::i;:::-;75031:73;75099:3;75088:9;75084:19;75075:6;75031:73;:::i;:::-;75115:81;75191:3;75180:9;75176:19;75167:6;75115:81;:::i;:::-;75207:67;75269:3;75258:9;75254:19;75245:6;75207:67;:::i;:::-;75285:73;75353:3;75342:9;75338:19;75329:6;75285:73;:::i;:::-;74715:653;;;;;;;;;:::o;75375:999::-;;75750:3;75739:9;75735:19;75727:27;;51227:86;51298:14;51204:16;51198:23;51227:86;:::i;:::-;51398:4;51391:5;51387:16;51381:23;51410:86;51398:4;51485:3;51481:14;51467:12;51410:86;:::i;:::-;;51582:4;51575:5;51571:16;51565:23;51594:63;51582:4;51646:3;51642:14;51628:12;51594:63;:::i;:::-;;51743:4;51736:5;51732:16;51726:23;51755:63;51743:4;51807:3;51803:14;51789:12;51755:63;:::i;:::-;;51898:4;51891:5;51887:16;51881:23;51910:63;51898:4;51962:3;51958:14;51944:12;51910:63;:::i;:::-;;52053:4;52046:5;52042:16;52036:23;52065:63;52053:4;52117:3;52113:14;52099:12;52065:63;:::i;:::-;;52211:4;52204:5;52200:16;52194:23;52223:63;52211:4;52275:3;52271:14;52257:12;52223:63;:::i;:::-;;52365:4;52358:5;52354:16;52348:23;52365:4;52429:3;52425:14;33913:37;52521:6;;52514:5;52510:18;52504:25;52535:63;52521:6;52585:3;52581:16;52567:12;52535:63;:::i;:::-;-1:-1;;52677:6;52666:18;;;52660:25;52739:16;;;33913:37;75899:127;76021:3;76006:19;;75997:6;75899:127;:::i;:::-;76037:73;76105:3;76094:9;76090:19;76081:6;76037:73;:::i;:::-;76121:81;76197:3;76186:9;76182:19;76173:6;76121:81;:::i;:::-;76213:67;76275:3;76264:9;76260:19;76251:6;76213:67;:::i;:::-;76291:73;76359:3;76348:9;76344:19;76335:6;76291:73;:::i;76381:414::-;;76580:2;76601:17;76594:47;83700:42;;54015:16;54009:23;83689:54;76580:2;76569:9;76565:18;30798:45;83700:42;76580:2;54195:5;54191:16;54185:23;83689:54;54285:14;76569:9;54285:14;30651:58;;54285:14;54379:5;54375:16;54369:23;54398:86;54469:14;76569:9;54469:14;54455:12;54398:86;:::i;:::-;;54469:14;54568:5;54564:16;54558:23;54635:14;76569:9;54635:14;33913:37;54635:14;54738:5;54734:16;54728:23;54805:14;76569:9;54805:14;33913:37;54805:14;54903:5;54899:16;54893:23;53940:6;;54936:14;76569:9;54936:14;54929:38;54982:167;53931:16;76569:9;53931:16;55130:12;54982:167;:::i;:::-;54974:175;;54936:14;55237:5;55233:16;55227:23;55256:57;55298:14;76569:9;55298:14;55284:12;55256:57;:::i;:::-;;55298:14;55390:5;55386:16;55380:23;55409:79;53940:6;76569:9;55473:14;55459:12;55409:79;:::i;:::-;-1:-1;76647:138;;76551:244;-1:-1;;;;76551:244::o;77031:640::-;;33943:5;33920:3;33913:37;33943:5;77425:2;77414:9;77410:18;33913:37;83700:42;82210:5;83689:54;77508:2;77497:9;77493:18;30798:45;77260:3;77545:2;77534:9;77530:18;77523:48;77585:76;77260:3;77249:9;77245:19;77647:6;77585:76;:::i;77678:256::-;77740:2;77734:9;77766:17;;;77841:18;77826:34;;77862:22;;;77823:62;77820:2;;;77898:1;;77888:12;77820:2;77740;77907:22;77718:216;;-1:-1;77718:216::o;77941:304::-;;78100:18;78092:6;78089:30;78086:2;;;-1:-1;;78122:12;78086:2;-1:-1;78167:4;78155:17;;;78220:15;;78023:222::o;79286:321::-;;79429:18;79421:6;79418:30;79415:2;;;-1:-1;;79451:12;79415:2;-1:-1;79528:4;79505:17;79524:9;79501:33;79592:4;79582:15;;79352:255::o;82130:91::-;83700:42;83689:54;;82175:46::o;86146:268::-;86211:1;86218:101;86232:6;86229:1;86226:13;86218:101;;;86299:11;;;86293:18;86280:11;;;86273:39;86254:2;86247:10;86218:101;;;86334:6;86331:1;86328:13;86325:2;;;-1:-1;;86211:1;86381:16;;86374:27;86195:219::o;86908:111::-;86997:1;86990:5;86987:12;86977:2;;87003:9;86977:2;86971:48;:::o;87381:117::-;83700:42;87468:5;83689:54;87443:5;87440:35;87430:2;;87489:1;;87479:12;87645:111;87726:5;82400:13;82393:21;87704:5;87701:32;87691:2;;87747:1;;87737:12;88057:114;88146:1;88139:5;88136:12;88126:2;;88162:1;;88152:12;88297:117;83464:30;88384:5;83453:42;88359:5;88356:35;88346:2;;88405:1;;88395:12;88421:117;83580:34;88508:5;83569:46;88483:5;88480:35;88470:2;;88529:1;;88519:12;88669:115;83906:10;88754:5;83895:22;88730:5;88727:34;88717:2;;88775:1;;88765:12"
            },
            "methodIdentifiers": {
                "EIP712_DOMAIN_SEPARATOR()": "dab400f3",
                "FEATURE_NAME()": "6ae4b4f7",
                "FEATURE_VERSION()": "031b905c",
                "_batchSellLiquidityProviderExternal((address,address,uint256,(uint8,uint256,bytes)[],bool,address),bytes,uint256)": "209c02c5",
                "_batchSellUniswapV2External((address,address,uint256,(uint8,uint256,bytes)[],bool,address),bytes,uint256)": "08378817",
                "migrate()": "8fd3ab80",
                "multiplexBatchSellEthForToken(address,(uint8,uint256,bytes)[],uint256)": "f35b4733",
                "multiplexBatchSellTokenForEth(address,(uint8,uint256,bytes)[],uint256,uint256)": "77725df6",
                "multiplexBatchSellTokenForToken(address,address,(uint8,uint256,bytes)[],uint256,uint256)": "7a1eb1b9",
                "multiplexMultiHopSellEthForToken(address[],(uint8,bytes)[],uint256)": "5161b966",
                "multiplexMultiHopSellTokenForEth(address[],(uint8,bytes)[],uint256,uint256)": "9a2967d2",
                "multiplexMultiHopSellTokenForToken(address[],(uint8,bytes)[],uint256,uint256)": "0f3b31b2"
            }
        }
    },
    "sourceTreeHashHex": "0x8ba99ede2d2d90c8ac1a97f94684656dbeb1943f262568ffc604b9cdf1587a0b",
    "sources": {
        "./MultiplexFeature.sol": {
            "id": 17,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../external/ILiquidityProviderSandbox.sol\";\nimport \"../../fixins/FixinCommon.sol\";\nimport \"../../fixins/FixinEIP712.sol\";\nimport \"../../migrations/LibMigrate.sol\";\nimport \"../interfaces/IFeature.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\nimport \"./MultiplexLiquidityProvider.sol\";\nimport \"./MultiplexOtc.sol\";\nimport \"./MultiplexRfq.sol\";\nimport \"./MultiplexTransformERC20.sol\";\nimport \"./MultiplexUniswapV2.sol\";\nimport \"./MultiplexUniswapV3.sol\";\n\n\n/// @dev This feature enables efficient batch and multi-hop trades\n///      using different liquidity sources.\ncontract MultiplexFeature is\n    IFeature,\n    IMultiplexFeature,\n    FixinCommon,\n    MultiplexLiquidityProvider,\n    MultiplexOtc,\n    MultiplexRfq,\n    MultiplexTransformERC20,\n    MultiplexUniswapV2,\n    MultiplexUniswapV3\n{\n    /// @dev Name of this feature.\n    string public constant override FEATURE_NAME = \"MultiplexFeature\";\n    /// @dev Version of this feature.\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(2, 0, 0);\n    /// @dev The highest bit of a uint256 value.\n    uint256 private constant HIGH_BIT = 2 ** 255;\n    /// @dev Mask of the lower 255 bits of a uint256 value.\n    uint256 private constant LOWER_255_BITS = HIGH_BIT - 1;\n\n    /// @dev The WETH token contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(\n        address zeroExAddress,\n        IEtherTokenV06 weth,\n        ILiquidityProviderSandbox sandbox,\n        address uniswapFactory,\n        address sushiswapFactory,\n        bytes32 uniswapPairInitCodeHash,\n        bytes32 sushiswapPairInitCodeHash\n    )\n        public\n        FixinEIP712(zeroExAddress)\n        MultiplexLiquidityProvider(sandbox)\n        MultiplexUniswapV2(\n            uniswapFactory,\n            sushiswapFactory,\n            uniswapPairInitCodeHash,\n            sushiswapPairInitCodeHash\n        )\n    {\n        WETH = weth;\n    }\n\n    /// @dev Initialize and register this feature.\n    ///      Should be delegatecalled by `Migrate.migrate()`.\n    /// @return success `LibMigrate.SUCCESS` on success.\n    function migrate()\n        external\n        returns (bytes4 success)\n    {\n        _registerFeatureFunction(this.multiplexBatchSellEthForToken.selector);\n        _registerFeatureFunction(this.multiplexBatchSellTokenForEth.selector);\n        _registerFeatureFunction(this.multiplexBatchSellTokenForToken.selector);\n        _registerFeatureFunction(this.multiplexMultiHopSellEthForToken.selector);\n        _registerFeatureFunction(this.multiplexMultiHopSellTokenForEth.selector);\n        _registerFeatureFunction(this.multiplexMultiHopSellTokenForToken.selector);\n        return LibMigrate.MIGRATE_SUCCESS;\n    }\n\n    /// @dev Sells attached ETH for `outputToken` using the provided\n    ///      calls.\n    /// @param outputToken The token to buy.\n    /// @param calls The calls to use to sell the attached ETH.\n    /// @param minBuyAmount The minimum amount of `outputToken` that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function multiplexBatchSellEthForToken(\n        IERC20TokenV06 outputToken,\n        BatchSellSubcall[] memory calls,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        payable\n        returns (uint256 boughtAmount)\n    {\n        // Wrap ETH.\n        WETH.deposit{value: msg.value}();\n        // WETH is now held by this contract,\n        // so `useSelfBalance` is true.\n        return _multiplexBatchSell(\n            BatchSellParams({\n                inputToken: WETH,\n                outputToken: outputToken,\n                sellAmount: msg.value,\n                calls: calls,\n                useSelfBalance: true,\n                recipient: msg.sender\n            }),\n            minBuyAmount\n        );\n    }\n\n    /// @dev Sells `sellAmount` of the given `inputToken` for ETH\n    ///      using the provided calls.\n    /// @param inputToken The token to sell.\n    /// @param calls The calls to use to sell the input tokens.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of ETH that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of ETH bought.\n    function multiplexBatchSellTokenForEth(\n        IERC20TokenV06 inputToken,\n        BatchSellSubcall[] memory calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        returns (uint256 boughtAmount)\n    {\n        // The outputToken is implicitly WETH. The `recipient`\n        // of the WETH is set to  this contract, since we\n        // must unwrap the WETH and transfer the resulting ETH.\n        boughtAmount = _multiplexBatchSell(\n            BatchSellParams({\n                inputToken: inputToken,\n                outputToken: WETH,\n                sellAmount: sellAmount,\n                calls: calls,\n                useSelfBalance: false,\n                recipient: address(this)\n            }),\n            minBuyAmount\n        );\n        // Unwrap WETH.\n        WETH.withdraw(boughtAmount);\n        // Transfer ETH to `msg.sender`.\n        _transferEth(msg.sender, boughtAmount);\n    }\n\n    /// @dev Sells `sellAmount` of the given `inputToken` for\n    ///      `outputToken` using the provided calls.\n    /// @param inputToken The token to sell.\n    /// @param outputToken The token to buy.\n    /// @param calls The calls to use to sell the input tokens.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of `outputToken`\n    ///        that must be bought for this function to not revert.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function multiplexBatchSellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        BatchSellSubcall[] memory calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        returns (uint256 boughtAmount)\n    {\n        return _multiplexBatchSell(\n            BatchSellParams({\n                inputToken: inputToken,\n                outputToken: outputToken,\n                sellAmount: sellAmount,\n                calls: calls,\n                useSelfBalance: false,\n                recipient: msg.sender\n            }),\n            minBuyAmount\n        );\n    }\n\n    /// @dev Executes a batch sell and checks that at least\n    ///      `minBuyAmount` of `outputToken` was bought.\n    /// @param params Batch sell parameters.\n    /// @param minBuyAmount The minimum amount of `outputToken` that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function _multiplexBatchSell(\n        BatchSellParams memory params,\n        uint256 minBuyAmount\n    )\n        private\n        returns (uint256 boughtAmount)\n    {\n        // Cache the recipient's initial balance of the output token.\n        uint256 balanceBefore = params.outputToken.balanceOf(params.recipient);\n        // Execute the batch sell.\n        BatchSellState memory state = _executeBatchSell(params);\n        // Compute the change in balance of the output token.\n        uint256 balanceDelta = params.outputToken.balanceOf(params.recipient)\n            .safeSub(balanceBefore);\n        // Use the minimum of the balanceDelta and the returned bought\n        // amount in case of weird tokens and whatnot.\n        boughtAmount = LibSafeMathV06.min256(balanceDelta, state.boughtAmount);\n        // Enforce `minBuyAmount`.\n        require(\n            boughtAmount >= minBuyAmount,\n            \"MultiplexFeature::_multiplexBatchSell/UNDERBOUGHT\"\n        );\n    }\n\n    /// @dev Sells attached ETH via the given sequence of tokens\n    ///      and calls. `tokens[0]` must be WETH.\n    ///      The last token in `tokens` is the output token that\n    ///      will ultimately be sent to `msg.sender`\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param minBuyAmount The minimum amount of output tokens that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of output tokens bought.\n    function multiplexMultiHopSellEthForToken(\n        address[] memory tokens,\n        MultiHopSellSubcall[] memory calls,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        payable\n        returns (uint256 boughtAmount)\n    {\n        // First token must be WETH.\n        require(\n            tokens[0] == address(WETH),\n            \"MultiplexFeature::multiplexMultiHopSellEthForToken/NOT_WETH\"\n        );\n        // Wrap ETH.\n        WETH.deposit{value: msg.value}();\n        // WETH is now held by this contract,\n        // so `useSelfBalance` is true.\n        return _multiplexMultiHopSell(\n            MultiHopSellParams({\n                tokens: tokens,\n                sellAmount: msg.value,\n                calls: calls,\n                useSelfBalance: true,\n                recipient: msg.sender\n            }),\n            minBuyAmount\n        );\n    }\n\n    /// @dev Sells `sellAmount` of the input token (`tokens[0]`)\n    ///      for ETH via the given sequence of tokens and calls.\n    ///      The last token in `tokens` must be WETH.\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of ETH that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of ETH bought.\n    function multiplexMultiHopSellTokenForEth(\n        address[] memory tokens,\n        MultiHopSellSubcall[] memory calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        returns (uint256 boughtAmount)\n    {\n        // Last token must be WETH.\n        require(\n            tokens[tokens.length - 1] == address(WETH),\n            \"MultiplexFeature::multiplexMultiHopSellTokenForEth/NOT_WETH\"\n        );\n        // The `recipient of the WETH is set to  this contract, since\n        // we must unwrap the WETH and transfer the resulting ETH.\n        boughtAmount = _multiplexMultiHopSell(\n            MultiHopSellParams({\n                tokens: tokens,\n                sellAmount: sellAmount,\n                calls: calls,\n                useSelfBalance: false,\n                recipient: address(this)\n            }),\n            minBuyAmount\n        );\n        // Unwrap WETH.\n        WETH.withdraw(boughtAmount);\n        // Transfer ETH to `msg.sender`.\n        _transferEth(msg.sender, boughtAmount);\n    }\n\n    /// @dev Sells `sellAmount` of the input token (`tokens[0]`)\n    ///      via the given sequence of tokens and calls.\n    ///      The last token in `tokens` is the output token that\n    ///      will ultimately be sent to `msg.sender`\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of output tokens that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of output tokens bought.\n    function multiplexMultiHopSellTokenForToken(\n        address[] memory tokens,\n        MultiHopSellSubcall[] memory calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        returns (uint256 boughtAmount)\n    {\n        return _multiplexMultiHopSell(\n            MultiHopSellParams({\n                tokens: tokens,\n                sellAmount: sellAmount,\n                calls: calls,\n                useSelfBalance: false,\n                recipient: msg.sender\n            }),\n            minBuyAmount\n        );\n    }\n\n    /// @dev Executes a multi-hop sell and checks that at least\n    ///      `minBuyAmount` of output tokens were bought.\n    /// @param params Multi-hop sell parameters.\n    /// @param minBuyAmount The minimum amount of output tokens that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of output tokens bought.\n    function _multiplexMultiHopSell(\n        MultiHopSellParams memory params,\n        uint256 minBuyAmount\n    )\n        private\n        returns (uint256 boughtAmount)\n    {\n        // There should be one call/hop between every two tokens\n        // in the path.\n        // tokens[0]b\u0000\u0013b\u0000\u0013calls[0]b\u0000\u0013b\u0000\u0013>tokens[1]b\u0000\u0013b\u0000\u0013...b\u0000\u0013b\u0000\u0013calls[n-1]b\u0000\u0013b\u0000\u0013>tokens[n]\n        require(\n            params.tokens.length == params.calls.length + 1,\n            \"MultiplexFeature::_multiplexMultiHopSell/MISMATCHED_ARRAY_LENGTHS\"\n        );\n        // The output token is the last token in the path.\n        IERC20TokenV06 outputToken = IERC20TokenV06(\n            params.tokens[params.tokens.length - 1]\n        );\n        // Cache the recipient's balance of the output token.\n        uint256 balanceBefore = outputToken.balanceOf(params.recipient);\n        // Execute the multi-hop sell.\n        MultiHopSellState memory state = _executeMultiHopSell(params);\n        // Compute the change in balance of the output token.\n        uint256 balanceDelta = outputToken.balanceOf(params.recipient)\n            .safeSub(balanceBefore);\n        // Use the minimum of the balanceDelta and the returned bought\n        // amount in case of weird tokens and whatnot.\n        boughtAmount = LibSafeMathV06.min256(balanceDelta, state.outputTokenAmount);\n        // Enforce `minBuyAmount`.\n        require(\n            boughtAmount >= minBuyAmount,\n            \"MultiplexFeature::_multiplexMultiHopSell/UNDERBOUGHT\"\n        );\n    }\n\n    /// @dev Iterates through the constituent calls of a batch\n    ///      sell and executes each one, until the full amount\n    //       has been sold.\n    /// @param params Batch sell parameters.\n    /// @return state A struct containing the amounts of `inputToken`\n    ///         sold and `outputToken` bought.\n    function _executeBatchSell(BatchSellParams memory params)\n        private\n        returns (BatchSellState memory state)\n    {\n        // Iterate through the calls and execute each one\n        // until the full amount has been sold.\n        for (uint256 i = 0; i != params.calls.length; i++) {\n            // Check if we've hit our target.\n            if (state.soldAmount >= params.sellAmount) { break; }\n            BatchSellSubcall memory subcall = params.calls[i];\n            // Compute the input token amount.\n            uint256 inputTokenAmount = _normalizeSellAmount(\n                subcall.sellAmount,\n                params.sellAmount,\n                state.soldAmount\n            );\n            if (subcall.id == MultiplexSubcall.RFQ) {\n                _batchSellRfqOrder(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.OTC) {\n                _batchSellOtcOrder(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.UniswapV2) {\n                _batchSellUniswapV2(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.UniswapV3) {\n                _batchSellUniswapV3(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.LiquidityProvider) {\n                _batchSellLiquidityProvider(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.TransformERC20) {\n                _batchSellTransformERC20(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.MultiHopSell) {\n                _nestedMultiHopSell(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else {\n                revert(\"MultiplexFeature::_executeBatchSell/INVALID_SUBCALL\");\n            }\n        }\n        require(\n            state.soldAmount == params.sellAmount,\n            \"MultiplexFeature::_executeBatchSell/INCORRECT_AMOUNT_SOLD\"\n        );\n    }\n\n    // This function executes a sequence of fills \"hopping\" through the\n    // path of tokens given by `params.tokens`.\n    function _executeMultiHopSell(MultiHopSellParams memory params)\n        private\n        returns (MultiHopSellState memory state)\n    {\n        // This variable is used for the input and output amounts of\n        // each hop. After the final hop, this will contain the output\n        // amount of the multi-hop fill.\n        state.outputTokenAmount = params.sellAmount;\n        // The first call may expect the input tokens to be held by\n        // `msg.sender`, `address(this)`, or some other address.\n        // Compute the expected address and transfer the input tokens\n        // there if necessary.\n        state.from = _computeHopTarget(params, 0);\n        // If the input tokens are currently held by `msg.sender` but\n        // the first hop expects them elsewhere, perform a `transferFrom`.\n        if (!params.useSelfBalance && state.from != msg.sender) {\n            _transferERC20TokensFrom(\n                IERC20TokenV06(params.tokens[0]),\n                msg.sender,\n                state.from,\n                params.sellAmount\n            );\n        }\n        // If the input tokens are currently held by `address(this)` but\n        // the first hop expects them elsewhere, perform a `transfer`.\n        if (params.useSelfBalance && state.from != address(this)) {\n            _transferERC20Tokens(\n                IERC20TokenV06(params.tokens[0]),\n                state.from,\n                params.sellAmount\n            );\n        }\n        // Iterate through the calls and execute each one.\n        for (state.hopIndex = 0; state.hopIndex != params.calls.length; state.hopIndex++) {\n            MultiHopSellSubcall memory subcall = params.calls[state.hopIndex];\n            // Compute the recipient of the tokens that will be\n            // bought by the current hop.\n            state.to = _computeHopTarget(params, state.hopIndex + 1);\n\n            if (subcall.id == MultiplexSubcall.UniswapV2) {\n                _multiHopSellUniswapV2(\n                    state,\n                    params,\n                    subcall.data\n                );\n            } else if (subcall.id == MultiplexSubcall.UniswapV3) {\n                _multiHopSellUniswapV3(state, subcall.data);\n            } else if (subcall.id == MultiplexSubcall.LiquidityProvider) {\n                _multiHopSellLiquidityProvider(\n                    state,\n                    params,\n                    subcall.data\n                );\n            } else if (subcall.id == MultiplexSubcall.BatchSell) {\n                _nestedBatchSell(\n                    state,\n                    params,\n                    subcall.data\n                );\n            } else {\n                revert(\"MultiplexFeature::_executeMultiHopSell/INVALID_SUBCALL\");\n            }\n            // The recipient of the current hop will be the source\n            // of tokens for the next hop.\n            state.from = state.to;\n        }\n    }\n\n    function _nestedMultiHopSell(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory data,\n        uint256 sellAmount\n    )\n        private\n    {\n        MultiHopSellParams memory multiHopParams;\n        // Decode the tokens and calls for the nested\n        // multi-hop sell.\n        (\n            multiHopParams.tokens,\n            multiHopParams.calls\n        ) = abi.decode(\n            data,\n            (address[], MultiHopSellSubcall[])\n        );\n        multiHopParams.sellAmount = sellAmount;\n        // If the batch sell is using input tokens held by\n        // `address(this)`, then so should the nested\n        // multi-hop sell.\n        multiHopParams.useSelfBalance = params.useSelfBalance;\n        // Likewise, the recipient of the multi-hop sell is\n        // equal to the recipient of its containing batch sell.\n        multiHopParams.recipient = params.recipient;\n        // Execute the nested multi-hop sell.\n        uint256 outputTokenAmount =\n            _executeMultiHopSell(multiHopParams).outputTokenAmount;\n        // Increment the sold and bought amounts.\n        state.soldAmount = state.soldAmount.safeAdd(sellAmount);\n        state.boughtAmount = state.boughtAmount.safeAdd(outputTokenAmount);\n    }\n\n    function _nestedBatchSell(\n        IMultiplexFeature.MultiHopSellState memory state,\n        IMultiplexFeature.MultiHopSellParams memory params,\n        bytes memory data\n    )\n        private\n    {\n        BatchSellParams memory batchSellParams;\n        // Decode the calls for the nested batch sell.\n        batchSellParams.calls = abi.decode(\n            data,\n            (BatchSellSubcall[])\n        );\n        // The input and output tokens of the batch\n        // sell are the current and next tokens in\n        // `params.tokens`, respectively.\n        batchSellParams.inputToken = IERC20TokenV06(\n            params.tokens[state.hopIndex]\n        );\n        batchSellParams.outputToken = IERC20TokenV06(\n            params.tokens[state.hopIndex + 1]\n        );\n        // The `sellAmount` for the batch sell is the\n        // `outputTokenAmount` from the previous hop.\n        batchSellParams.sellAmount = state.outputTokenAmount;\n        // If the nested batch sell is the first hop\n        // and `useSelfBalance` for the containing multi-\n        // hop sell is false, the nested batch sell should\n        // pull tokens from `msg.sender` (so  `batchSellParams.useSelfBalance`\n        // should be false). Otherwise `batchSellParams.useSelfBalance`\n        // should be true.\n        batchSellParams.useSelfBalance = state.hopIndex > 0 || params.useSelfBalance;\n        // `state.to` has been populated with the address\n        // that should receive the output tokens of the\n        // batch sell.\n        batchSellParams.recipient = state.to;\n        // Execute the nested batch sell.\n        state.outputTokenAmount =\n            _executeBatchSell(batchSellParams).boughtAmount;\n    }\n\n    // Transfers some amount of ETH to the given recipient and\n    // reverts if the transfer fails.\n    function _transferEth(address payable recipient, uint256 amount)\n        private\n    {\n        (bool success,) = recipient.call{value: amount}(\"\");\n        require(success, \"MultiplexFeature::_transferEth/TRANSFER_FAILED\");\n    }\n\n    // This function computes the \"target\" address of hop index `i` within\n    // a multi-hop sell.\n    // If `i == 0`, the target is the address which should hold the input\n    // tokens prior to executing `calls[0]`. Otherwise, it is the address\n    // that should receive `tokens[i]` upon executing `calls[i-1]`.\n    function _computeHopTarget(\n        MultiHopSellParams memory params,\n        uint256 i\n    )\n        private\n        view\n        returns (address target)\n    {\n        if (i == params.calls.length) {\n            // The last call should send the output tokens to the\n            // multi-hop sell recipient.\n            target = params.recipient;\n        } else {\n            MultiHopSellSubcall memory subcall = params.calls[i];\n            if (subcall.id == MultiplexSubcall.UniswapV2) {\n                // UniswapV2 (and Sushiswap) allow tokens to be\n                // transferred into the pair contract before `swap`\n                // is called, so we compute the pair contract's address.\n                (address[] memory tokens, bool isSushi) = abi.decode(\n                    subcall.data,\n                    (address[], bool)\n                );\n                target = _computeUniswapPairAddress(\n                    tokens[0],\n                    tokens[1],\n                    isSushi\n                );\n            } else if (subcall.id == MultiplexSubcall.LiquidityProvider) {\n                // Similar to UniswapV2, LiquidityProvider contracts\n                // allow tokens to be transferred in before the swap\n                // is executed, so we the target is the address encoded\n                // in the subcall data.\n                (target,) = abi.decode(\n                    subcall.data,\n                    (address, bytes)\n                );\n            } else if (\n                subcall.id == MultiplexSubcall.UniswapV3 ||\n                subcall.id == MultiplexSubcall.BatchSell\n            ) {\n                // UniswapV3 uses a callback to pull in the tokens being\n                // sold to it. The callback implemented in `UniswapV3Feature`\n                // can either:\n                // - call `transferFrom` to move tokens from `msg.sender` to the\n                //   UniswapV3 pool, or\n                // - call `transfer` to move tokens from `address(this)` to the\n                //   UniswapV3 pool.\n                // A nested batch sell is similar, in that it can either:\n                // - use tokens from `msg.sender`, or\n                // - use tokens held by `address(this)`.\n\n                // Suppose UniswapV3/BatchSell is the first call in the multi-hop\n                // path. The input tokens are either held by `msg.sender`,\n                // or in the case of `multiplexMultiHopSellEthForToken` WETH is\n                // held by `address(this)`. The target is set accordingly.\n\n                // If this is _not_ the first call in the multi-hop path, we\n                // are dealing with an \"intermediate\" token in the multi-hop path,\n                // which `msg.sender` may not have an allowance set for. Thus\n                // target must be set to `address(this)` for `i > 0`.\n                if (i == 0 && !params.useSelfBalance) {\n                    target = msg.sender;\n                } else {\n                    target = address(this);\n                }\n            } else {\n                revert(\"MultiplexFeature::_computeHopTarget/INVALID_SUBCALL\");\n            }\n        }\n        require(\n            target != address(0),\n            \"MultiplexFeature::_computeHopTarget/TARGET_IS_NULL\"\n        );\n    }\n\n    // If `rawAmount` encodes a proportion of `totalSellAmount`, this function\n    // converts it to an absolute quantity. Caps the normalized amount to\n    // the remaining sell amount (`totalSellAmount - soldAmount`).\n    function _normalizeSellAmount(\n        uint256 rawAmount,\n        uint256 totalSellAmount,\n        uint256 soldAmount\n    )\n        private\n        pure\n        returns (uint256 normalized)\n    {\n        if ((rawAmount & HIGH_BIT) == HIGH_BIT) {\n            // If the high bit of `rawAmount` is set then the lower 255 bits\n            // specify a fraction of `totalSellAmount`.\n            return LibSafeMathV06.min256(\n                totalSellAmount\n                    * LibSafeMathV06.min256(rawAmount & LOWER_255_BITS, 1e18)\n                    / 1e18,\n                totalSellAmount.safeSub(soldAmount)\n            );\n        } else {\n            return LibSafeMathV06.min256(\n                rawAmount,\n                totalSellAmount.safeSub(soldAmount)\n            );\n        }\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 31,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": {
            "id": 32,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 35,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 37,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 38,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"
        },
        "../../external/ILiquidityProviderSandbox.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../vendor/ILiquidityProvider.sol\";\n\n\ninterface ILiquidityProviderSandbox {\n\n    /// @dev Calls `sellTokenForToken` on the given `provider` contract to\n    ///      trigger a trade.\n    /// @param provider The address of the on-chain liquidity provider.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\n    function executeSellTokenForToken(\n        ILiquidityProvider provider,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external;\n\n    /// @dev Calls `sellEthForToken` on the given `provider` contract to\n    ///      trigger a trade.\n    /// @param provider The address of the on-chain liquidity provider.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\n    function executeSellEthForToken(\n        ILiquidityProvider provider,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external;\n\n    /// @dev Calls `sellTokenForEth` on the given `provider` contract to\n    ///      trigger a trade.\n    /// @param provider The address of the on-chain liquidity provider.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\n    function executeSellTokenForEth(\n        ILiquidityProvider provider,\n        IERC20TokenV06 inputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external;\n}\n"
        },
        "../../vendor/ILiquidityProvider.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n"
        },
        "../../fixins/FixinCommon.sol": {
            "id": 24,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\nimport \"../features/interfaces/IOwnableFeature.sol\";\nimport \"../features/interfaces/ISimpleFunctionRegistryFeature.sol\";\n\n\n/// @dev Common feature utilities.\nabstract contract FixinCommon {\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The implementation address of this feature.\n    address internal immutable _implementation;\n\n    /// @dev The caller must be this contract.\n    modifier onlySelf() virtual {\n        if (msg.sender != address(this)) {\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\n        }\n        _;\n    }\n\n    /// @dev The caller of this function must be the owner.\n    modifier onlyOwner() virtual {\n        {\n            address owner = IOwnableFeature(address(this)).owner();\n            if (msg.sender != owner) {\n                LibOwnableRichErrors.OnlyOwnerError(\n                    msg.sender,\n                    owner\n                ).rrevert();\n            }\n        }\n        _;\n    }\n\n    constructor() internal {\n        // Remember this feature's original address.\n        _implementation = address(this);\n    }\n\n    /// @dev Registers a function implemented by this feature at `_implementation`.\n    ///      Can and should only be called within a `migrate()`.\n    /// @param selector The selector of the function whose implementation\n    ///        is at `_implementation`.\n    function _registerFeatureFunction(bytes4 selector)\n        internal\n    {\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\n    }\n\n    /// @dev Encode a feature version as a `uint256`.\n    /// @param major The major version number of the feature.\n    /// @param minor The minor version number of the feature.\n    /// @param revision The revision number of the feature.\n    /// @return encodedVersion The encoded version number.\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\n        internal\n        pure\n        returns (uint256 encodedVersion)\n    {\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\n    }\n}\n"
        },
        "../../errors/LibCommonRichErrors.sol": {
            "id": 0,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibCommonRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyCallableBySelfError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableBySelfError(address)\")),\n            sender\n        );\n    }\n\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IllegalReentrancyError(bytes4,uint256)\")),\n            selector,\n            reentrancyFlags\n        );\n    }\n}\n"
        },
        "../../errors/LibOwnableRichErrors.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOwnerError(address,address)\")),\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n        );\n    }\n\n    function MigrateCallFailedError(address target, bytes memory resultData)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MigrateCallFailedError(address,bytes)\")),\n            target,\n            resultData\n        );\n    }\n}\n"
        },
        "../interfaces/IOwnableFeature.sol": {
            "id": 11,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\n/// @dev Owner management and migration features.\ninterface IOwnableFeature is\n    IOwnableV06\n{\n    /// @dev Emitted when `migrate()` is called.\n    /// @param caller The caller of `migrate()`.\n    /// @param migrator The migration contract.\n    /// @param newOwner The address of the new owner.\n    event Migrated(address caller, address migrator, address newOwner);\n\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\n    ///      The result of the function being called should be the magic bytes\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\n    ///      The owner will be temporarily set to `address(this)` inside the call.\n    ///      Before returning, the owner will be set to `newOwner`.\n    /// @param target The migrator contract address.\n    /// @param newOwner The address of the new owner.\n    /// @param data The call data.\n    function migrate(address target, bytes calldata data, address newOwner) external;\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": {
            "id": 39,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n"
        },
        "../interfaces/ISimpleFunctionRegistryFeature.sol": {
            "id": 12,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic registry management features.\ninterface ISimpleFunctionRegistryFeature {\n\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\n    /// @param selector The function selector.\n    /// @param oldImpl The implementation contract address being replaced.\n    /// @param newImpl The replacement implementation contract address.\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\n\n    /// @dev Roll back to a prior implementation of a function.\n    /// @param selector The function selector.\n    /// @param targetImpl The address of an older implementation of the function.\n    function rollback(bytes4 selector, address targetImpl) external;\n\n    /// @dev Register or replace a function.\n    /// @param selector The function selector.\n    /// @param impl The implementation contract for the function.\n    function extend(bytes4 selector, address impl) external;\n\n    /// @dev Retrieve the length of the rollback history for a function.\n    /// @param selector The function selector.\n    /// @return rollbackLength The number of items in the rollback history for\n    ///         the function.\n    function getRollbackLength(bytes4 selector)\n        external\n        view\n        returns (uint256 rollbackLength);\n\n    /// @dev Retrieve an entry in the rollback history for a function.\n    /// @param selector The function selector.\n    /// @param idx The index in the rollback history.\n    /// @return impl An implementation address for the function at\n    ///         index `idx`.\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\n        external\n        view\n        returns (address impl);\n}\n"
        },
        "../../fixins/FixinEIP712.sol": {
            "id": 25,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\n/// @dev EIP712 helpers for features.\nabstract contract FixinEIP712 {\n\n    /// @dev The domain hash separator for the entire exchange proxy.\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\n\n    constructor(address zeroExAddress) internal {\n        // Compute `EIP712_DOMAIN_SEPARATOR`\n        {\n            uint256 chainId;\n            assembly { chainId := chainid() }\n            EIP712_DOMAIN_SEPARATOR = keccak256(\n                abi.encode(\n                    keccak256(\n                        \"EIP712Domain(\"\n                            \"string name,\"\n                            \"string version,\"\n                            \"uint256 chainId,\"\n                            \"address verifyingContract\"\n                        \")\"\n                    ),\n                    keccak256(\"ZeroEx\"),\n                    keccak256(\"1.0.0\"),\n                    chainId,\n                    zeroExAddress\n                )\n            );\n        }\n    }\n\n    function _getEIP712Hash(bytes32 structHash)\n        internal\n        view\n        returns (bytes32 eip712Hash)\n    {\n        return keccak256(abi.encodePacked(\n            hex\"1901\",\n            EIP712_DOMAIN_SEPARATOR,\n            structHash\n        ));\n    }\n}\n"
        },
        "../../migrations/LibMigrate.sol": {
            "id": 27,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\nlibrary LibMigrate {\n\n    /// @dev Magic bytes returned by a migrator to indicate success.\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\n    /// @param target The call target.\n    /// @param data The call data.\n    function delegatecallMigrateFunction(\n        address target,\n        bytes memory data\n    )\n        internal\n    {\n        (bool success, bytes memory resultData) = target.delegatecall(data);\n        if (!success ||\n            resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\n        {\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\n        }\n    }\n}\n"
        },
        "../interfaces/IFeature.sol": {
            "id": 6,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic interface for a feature contract.\ninterface IFeature {\n\n    // solhint-disable func-name-mixedcase\n\n    /// @dev The name of this feature set.\n    function FEATURE_NAME() external view returns (string memory name);\n\n    /// @dev The version of this feature set.\n    function FEATURE_VERSION() external view returns (uint256 version);\n}\n"
        },
        "../interfaces/IMultiplexFeature.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IMultiplexFeature {\n    // Identifies the type of subcall.\n    enum MultiplexSubcall {\n        Invalid,\n        RFQ,\n        OTC,\n        UniswapV2,\n        UniswapV3,\n        LiquidityProvider,\n        TransformERC20,\n        BatchSell,\n        MultiHopSell\n    }\n\n    // Parameters for a batch sell.\n    struct BatchSellParams {\n        // The token being sold.\n        IERC20TokenV06 inputToken;\n        // The token being bought.\n        IERC20TokenV06 outputToken;\n        // The amount of `inputToken` to sell.\n        uint256 sellAmount;\n        // The nested calls to perform.\n        BatchSellSubcall[] calls;\n        // Whether to use the Exchange Proxy's balance\n        // of input tokens.\n        bool useSelfBalance;\n        // The recipient of the bought output tokens.\n        address recipient;\n    }\n\n    // Represents a constituent call of a batch sell.\n    struct BatchSellSubcall {\n        // The function to call.\n        MultiplexSubcall id;\n        // Amount of input token to sell. If the highest bit is 1,\n        // this value represents a proportion of the total\n        // `sellAmount` of the batch sell. See `_normalizeSellAmount`\n        // for details.\n        uint256 sellAmount;\n        // ABI-encoded parameters needed to perform the call.\n        bytes data;\n    }\n\n    // Parameters for a multi-hop sell.\n    struct MultiHopSellParams {\n        // The sell path, i.e.\n        // tokens = [inputToken, hopToken1, ..., hopTokenN, outputToken]\n        address[] tokens;\n        // The amount of `tokens[0]` to sell.\n        uint256 sellAmount;\n        // The nested calls to perform.\n        MultiHopSellSubcall[] calls;\n        // Whether to use the Exchange Proxy's balance\n        // of input tokens.\n        bool useSelfBalance;\n        // The recipient of the bought output tokens.\n        address recipient;\n    }\n\n    // Represents a constituent call of a multi-hop sell.\n    struct MultiHopSellSubcall {\n        // The function to call.\n        MultiplexSubcall id;\n        // ABI-encoded parameters needed to perform the call.\n        bytes data;\n    }\n\n    struct BatchSellState {\n        // Tracks the amount of input token sold.\n        uint256 soldAmount;\n        // Tracks the amount of output token bought.\n        uint256 boughtAmount;\n    }\n\n    struct MultiHopSellState {\n        // This variable is used for the input and output amounts of\n        // each hop. After the final hop, this will contain the output\n        // amount of the multi-hop sell.\n        uint256 outputTokenAmount;\n        // For each hop in a multi-hop sell, `from` is the\n        // address that holds the input tokens of the hop,\n        // `to` is the address that receives the output tokens\n        // of the hop.\n        // See `_computeHopTarget` for details.\n        address from;\n        address to;\n        // The index of the current hop in the multi-hop chain.\n        uint256 hopIndex;\n    }\n\n    /// @dev Sells attached ETH for `outputToken` using the provided\n    ///      calls.\n    /// @param outputToken The token to buy.\n    /// @param calls The calls to use to sell the attached ETH.\n    /// @param minBuyAmount The minimum amount of `outputToken` that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function multiplexBatchSellEthForToken(\n        IERC20TokenV06 outputToken,\n        BatchSellSubcall[] calldata calls,\n        uint256 minBuyAmount\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Sells `sellAmount` of the given `inputToken` for ETH\n    ///      using the provided calls.\n    /// @param inputToken The token to sell.\n    /// @param calls The calls to use to sell the input tokens.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of ETH that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of ETH bought.\n    function multiplexBatchSellTokenForEth(\n        IERC20TokenV06 inputToken,\n        BatchSellSubcall[] calldata calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Sells `sellAmount` of the given `inputToken` for\n    ///      `outputToken` using the provided calls.\n    /// @param inputToken The token to sell.\n    /// @param outputToken The token to buy.\n    /// @param calls The calls to use to sell the input tokens.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of `outputToken`\n    ///        that must be bought for this function to not revert.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function multiplexBatchSellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        BatchSellSubcall[] calldata calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Sells attached ETH via the given sequence of tokens\n    ///      and calls. `tokens[0]` must be WETH.\n    ///      The last token in `tokens` is the output token that\n    ///      will ultimately be sent to `msg.sender`\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param minBuyAmount The minimum amount of output tokens that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of output tokens bought.\n    function multiplexMultiHopSellEthForToken(\n        address[] calldata tokens,\n        MultiHopSellSubcall[] calldata calls,\n        uint256 minBuyAmount\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Sells `sellAmount` of the input token (`tokens[0]`)\n    ///      for ETH via the given sequence of tokens and calls.\n    ///      The last token in `tokens` must be WETH.\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param minBuyAmount The minimum amount of ETH that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of ETH bought.\n    function multiplexMultiHopSellTokenForEth(\n        address[] calldata tokens,\n        MultiHopSellSubcall[] calldata calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Sells `sellAmount` of the input token (`tokens[0]`)\n    ///      via the given sequence of tokens and calls.\n    ///      The last token in `tokens` is the output token that\n    ///      will ultimately be sent to `msg.sender`\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param minBuyAmount The minimum amount of output tokens that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of output tokens bought.\n    function multiplexMultiHopSellTokenForToken(\n        address[] calldata tokens,\n        MultiHopSellSubcall[] calldata calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n"
        },
        "./MultiplexLiquidityProvider.sol": {
            "id": 18,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../external/ILiquidityProviderSandbox.sol\";\nimport \"../../fixins/FixinCommon.sol\";\nimport \"../../fixins/FixinTokenSpender.sol\";\nimport \"../../vendor/ILiquidityProvider.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\n\n\nabstract contract MultiplexLiquidityProvider is\n    FixinCommon,\n    FixinTokenSpender\n{\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n\n    // Same event fired by LiquidityProviderFeature\n    event LiquidityProviderSwap(\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        address provider,\n        address recipient\n    );\n\n    /// @dev The sandbox contract address.\n    ILiquidityProviderSandbox private immutable SANDBOX;\n\n    constructor(ILiquidityProviderSandbox sandbox)\n        internal\n    {\n        SANDBOX = sandbox;\n    }\n\n    // A payable external function that we can delegatecall to\n    // swallow reverts and roll back the input token transfer.\n    function _batchSellLiquidityProviderExternal(\n        IMultiplexFeature.BatchSellParams calldata params,\n        bytes calldata wrappedCallData,\n        uint256 sellAmount\n    )\n        external\n        payable\n        returns (uint256 boughtAmount)\n    {\n        // Revert if not a delegatecall.\n        require(\n            address(this) != _implementation,\n            \"MultiplexLiquidityProvider::_batchSellLiquidityProviderExternal/ONLY_DELEGATECALL\"\n        );\n\n        // Decode the provider address and auxiliary data.\n        (address provider, bytes memory auxiliaryData) = abi.decode(\n            wrappedCallData,\n            (address, bytes)\n        );\n\n        if (params.useSelfBalance) {\n            // If `useSelfBalance` is true, use the input tokens\n            // held by `address(this)`.\n            _transferERC20Tokens(\n                params.inputToken,\n                provider,\n                sellAmount\n            );\n        } else {\n            // Otherwise, transfer the input tokens from `msg.sender`.\n            _transferERC20TokensFrom(\n                params.inputToken,\n                msg.sender,\n                provider,\n                sellAmount\n            );\n        }\n        // Cache the recipient's balance of the output token.\n        uint256 balanceBefore = params.outputToken\n            .balanceOf(params.recipient);\n        // Execute the swap.\n        SANDBOX.executeSellTokenForToken(\n            ILiquidityProvider(provider),\n            params.inputToken,\n            params.outputToken,\n            params.recipient,\n            0,\n            auxiliaryData\n        );\n        // Compute amount of output token received by the\n        // recipient.\n        boughtAmount = params.outputToken\n            .balanceOf(params.recipient)\n            .safeSub(balanceBefore);\n\n        emit LiquidityProviderSwap(\n            address(params.inputToken),\n            address(params.outputToken),\n            sellAmount,\n            boughtAmount,\n            provider,\n            params.recipient\n        );\n    }\n\n    function _batchSellLiquidityProvider(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        // Swallow reverts\n        (bool success, bytes memory resultData) = _implementation.delegatecall(\n            abi.encodeWithSelector(\n                this._batchSellLiquidityProviderExternal.selector,\n                params,\n                wrappedCallData,\n                sellAmount\n            )\n        );\n        if (success) {\n            // Decode the output token amount on success.\n            uint256 boughtAmount = abi.decode(resultData, (uint256));\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(sellAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(boughtAmount);\n        }\n    }\n\n    // This function is called after tokens have already been transferred\n    // into the liquidity provider contract (in the previous hop).\n    function _multiHopSellLiquidityProvider(\n        IMultiplexFeature.MultiHopSellState memory state,\n        IMultiplexFeature.MultiHopSellParams memory params,\n        bytes memory wrappedCallData\n    )\n        internal\n    {\n        IERC20TokenV06 inputToken = IERC20TokenV06(params.tokens[state.hopIndex]);\n        IERC20TokenV06 outputToken = IERC20TokenV06(params.tokens[state.hopIndex + 1]);\n        // Decode the provider address and auxiliary data.\n        (address provider, bytes memory auxiliaryData) = abi.decode(\n            wrappedCallData,\n            (address, bytes)\n        );\n        // Cache the recipient's balance of the output token.\n        uint256 balanceBefore = outputToken\n            .balanceOf(state.to);\n        // Execute the swap.\n        SANDBOX.executeSellTokenForToken(\n            ILiquidityProvider(provider),\n            inputToken,\n            outputToken,\n            state.to,\n            0,\n            auxiliaryData\n        );\n        // The previous `ouputTokenAmount` was effectively the\n        // input amount for this call. Cache the value before\n        // overwriting it with the new output token amount so\n        // that both the input and ouput amounts can be in the\n        // `LiquidityProviderSwap` event.\n        uint256 sellAmount = state.outputTokenAmount;\n        // Compute amount of output token received by the\n        // recipient.\n        state.outputTokenAmount = outputToken\n            .balanceOf(state.to)\n            .safeSub(balanceBefore);\n\n        emit LiquidityProviderSwap(\n            address(inputToken),\n            address(outputToken),\n            sellAmount,\n            state.outputTokenAmount,\n            provider,\n            state.to\n        );\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 33,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        // Revert if the call reverted.\n        if (!didSucceed) {\n            LibRichErrorsV06.rrevert(resultData);\n        }\n        // If we get back 0 returndata, this may be a non-standard ERC-20 that\n        // does not return a boolean. Check that it at least contains code.\n        if (resultData.length == 0) {\n            uint256 size;\n            assembly { size := extcodesize(target) }\n            require(size > 0, \"invalid token address, contains no code\");\n            return;\n        }\n        // If we get back at least 32 bytes, we know the target address\n        // contains code, and we assume it is a token that returned a boolean\n        // success value, which must be true.\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return;\n            } else {\n                LibRichErrorsV06.rrevert(resultData);\n            }\n        }\n        // If 0 < returndatasize < 32, the target is a contract, but not a\n        // valid token.\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 34,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 36,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "../../fixins/FixinTokenSpender.sol": {
            "id": 26,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\n/// @dev Helpers for moving tokens around.\nabstract contract FixinTokenSpender {\n\n    // Mask of the lower 20 bytes of a bytes32.\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\n\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _transferERC20TokensFrom(\n        IERC20TokenV06 token,\n        address owner,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        require(address(token) != address(this), \"FixinTokenSpender/CANNOT_INVOKE_SELF\");\n\n        assembly {\n            let ptr := mload(0x40) // free memory pointer\n\n            // selector for transferFrom(address,address,uint256)\n            mstore(ptr, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(ptr, 0x04), and(owner, ADDRESS_MASK))\n            mstore(add(ptr, 0x24), and(to, ADDRESS_MASK))\n            mstore(add(ptr, 0x44), amount)\n\n            let success := call(\n                gas(),\n                and(token, ADDRESS_MASK),\n                0,\n                ptr,\n                0x64,\n                ptr,\n                32\n            )\n\n            let rdsize := returndatasize()\n\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\n            // but some don't. We accept 0-length return data as success, or at\n            // least 32 bytes that starts with a 32-byte boolean true.\n            success := and(\n                success,                             // call itself succeeded\n                or(\n                    iszero(rdsize),                  // no return data, or\n                    and(\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\n                        eq(mload(ptr), 1)            // starts with uint256(1)\n                    )\n                )\n            )\n\n            if iszero(success) {\n                returndatacopy(ptr, 0, rdsize)\n                revert(ptr, rdsize)\n            }\n        }\n    }\n\n    /// @dev Transfers ERC20 tokens from ourselves to `to`.\n    /// @param token The token to spend.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _transferERC20Tokens(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        require(address(token) != address(this), \"FixinTokenSpender/CANNOT_INVOKE_SELF\");\n\n        assembly {\n            let ptr := mload(0x40) // free memory pointer\n\n            // selector for transfer(address,uint256)\n            mstore(ptr, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(ptr, 0x04), and(to, ADDRESS_MASK))\n            mstore(add(ptr, 0x24), amount)\n\n            let success := call(\n                gas(),\n                and(token, ADDRESS_MASK),\n                0,\n                ptr,\n                0x44,\n                ptr,\n                32\n            )\n\n            let rdsize := returndatasize()\n\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\n            // but some don't. We accept 0-length return data as success, or at\n            // least 32 bytes that starts with a 32-byte boolean true.\n            success := and(\n                success,                             // call itself succeeded\n                or(\n                    iszero(rdsize),                  // no return data, or\n                    and(\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\n                        eq(mload(ptr), 1)            // starts with uint256(1)\n                    )\n                )\n            )\n\n            if iszero(success) {\n                returndatacopy(ptr, 0, rdsize)\n                revert(ptr, rdsize)\n            }\n        }\n    }\n\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\n    ///      pulled from `owner` by this address.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @return amount The amount of tokens that can be pulled.\n    function _getSpendableERC20BalanceOf(\n        IERC20TokenV06 token,\n        address owner\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        return LibSafeMathV06.min256(\n            token.allowance(owner, address(this)),\n            token.balanceOf(owner)\n        );\n    }\n}\n"
        },
        "./MultiplexOtc.sol": {
            "id": 19,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../fixins/FixinEIP712.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\nimport \"../interfaces/IOtcOrdersFeature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\n\n\nabstract contract MultiplexOtc is\n    FixinEIP712\n{\n    using LibSafeMathV06 for uint256;\n\n    event ExpiredOtcOrder(\n        bytes32 orderHash,\n        address maker,\n        uint64 expiry\n    );\n\n    function _batchSellOtcOrder(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        // Decode the Otc order and signature.\n        (\n            LibNativeOrder.OtcOrder memory order,\n            LibSignature.Signature memory signature\n        ) = abi.decode(\n            wrappedCallData,\n            (LibNativeOrder.OtcOrder, LibSignature.Signature)\n        );\n        // Validate tokens.\n        require(\n            order.takerToken == params.inputToken &&\n            order.makerToken == params.outputToken,\n            \"MultiplexOtc::_batchSellOtcOrder/OTC_ORDER_INVALID_TOKENS\"\n        );\n        // Pre-emptively check if the order is expired.\n        uint64 expiry = uint64(order.expiryAndNonce >> 192);\n        if (expiry <= uint64(block.timestamp)) {\n            bytes32 orderHash = _getEIP712Hash(\n                LibNativeOrder.getOtcOrderStructHash(order)\n            );\n            emit ExpiredOtcOrder(\n                orderHash,\n                order.maker,\n                expiry\n            );\n            return;\n        }\n        // Try filling the Otc order. Swallows reverts.\n        try\n            IOtcOrdersFeature(address(this))._fillOtcOrder\n                (\n                    order,\n                    signature,\n                    sellAmount.safeDowncastToUint128(),\n                    msg.sender,\n                    params.useSelfBalance,\n                    params.recipient\n                )\n            returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n        {\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(takerTokenFilledAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(makerTokenFilledAmount);\n        } catch {}\n    }\n}\n"
        },
        "../interfaces/IOtcOrdersFeature.sol": {
            "id": 10,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibNativeOrder.sol\";\nimport \"../libs/LibSignature.sol\";\n\n\n/// @dev Feature for interacting with OTC orders.\ninterface IOtcOrdersFeature {\n\n    /// @dev Emitted whenever an `OtcOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    event OtcOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address makerToken,\n        address takerToken,\n        uint128 makerTokenFilledAmount,\n        uint128 takerTokenFilledAmount\n    );\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrder(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    ///      Unwraps bought WETH into ETH before sending it to \n    ///      the taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrderForEth(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an OTC order whose taker token is WETH for up\n    ///      to `msg.value`.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrderWithEth(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fully fill an OTC order. \"Meta-transaction\" variant,\n    ///      requires order to be signed by both maker and taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerSignature The order signature from the taker.\n    function fillTakerSignedOtcOrder(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        LibSignature.Signature calldata takerSignature\n    )\n        external;\n\n    /// @dev Fully fill an OTC order. \"Meta-transaction\" variant,\n    ///      requires order to be signed by both maker and taker.\n    ///      Unwraps bought WETH into ETH before sending it to \n    ///      the taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerSignature The order signature from the taker.\n    function fillTakerSignedOtcOrderForEth(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        LibSignature.Signature calldata takerSignature\n    )\n        external;\n\n    /// @dev Fills multiple taker-signed OTC orders.\n    /// @param orders Array of OTC orders.\n    /// @param makerSignatures Array of maker signatures for each order.\n    /// @param takerSignatures Array of taker signatures for each order.\n    /// @param unwrapWeth Array of booleans representing whether or not \n    ///        to unwrap bought WETH into ETH for each order. Should be set \n    ///        to false if the maker token is not WETH.\n    /// @return successes Array of booleans representing whether or not\n    ///         each order in `orders` was filled successfully.\n    function batchFillTakerSignedOtcOrders(\n        LibNativeOrder.OtcOrder[] calldata orders,\n        LibSignature.Signature[] calldata makerSignatures,\n        LibSignature.Signature[] calldata takerSignatures,\n        bool[] calldata unwrapWeth\n    )\n        external\n        returns (bool[] memory successes);\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    ///      Internal variant.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @param taker The address to fill the order in the context of.\n    /// @param useSelfBalance Whether to use the Exchange Proxy's balance\n    ///        of input tokens.\n    /// @param recipient The recipient of the bought maker tokens.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillOtcOrder(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        bool useSelfBalance,\n        address recipient\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Get the order info for an OTC order.\n    /// @param order The OTC order.\n    /// @return orderInfo Info about the order.\n    function getOtcOrderInfo(LibNativeOrder.OtcOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OtcOrderInfo memory orderInfo);\n\n    /// @dev Get the canonical hash of an OTC order.\n    /// @param order The OTC order.\n    /// @return orderHash The order hash.\n    function getOtcOrderHash(LibNativeOrder.OtcOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the last nonce used for a particular\n    ///      tx.origin address and nonce bucket.\n    /// @param txOrigin The address.\n    /// @param nonceBucket The nonce bucket index.\n    /// @return lastNonce The last nonce value used.\n    function lastOtcTxOriginNonce(address txOrigin, uint64 nonceBucket)\n        external\n        view\n        returns (uint128 lastNonce);\n}\n"
        },
        "../libs/LibNativeOrder.sol": {
            "id": 15,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../errors/LibNativeOrdersRichErrors.sol\";\n\n\n/// @dev A library for common native order operations.\nlibrary LibNativeOrder {\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An OTC limit order.\n    struct OtcOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        uint256 expiryAndNonce; // [uint64 expiry, uint64 nonceBucket, uint128 nonce]\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Info on an OTC order.\n    struct OtcOrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n    }\n\n    uint256 private constant UINT_128_MASK = (1 << 128) - 1;\n    uint256 private constant UINT_64_MASK = (1 << 64) - 1;\n    uint256 private constant ADDRESS_MASK = (1 << 160) - 1;\n\n    // The type hash for limit orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"LimitOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"uint128 takerTokenFeeAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address sender,\",\n    //       \"address feeRecipient,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _LIMIT_ORDER_TYPEHASH =\n        0xce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d49;\n\n    // The type hash for RFQ orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"RfqOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _RFQ_ORDER_TYPEHASH =\n        0xe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da9;\n\n    // The type hash for OTC orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"OtcOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"uint256 expiryAndNonce\"\n    //     \")\"\n    // ))\n    uint256 private constant _OTC_ORDER_TYPEHASH =\n        0x2f754524de756ae72459efbe1ec88c19a745639821de528ac3fb88f9e65e35c8;\n\n    /// @dev Get the struct hash of a limit order.\n    /// @param order The limit order.\n    /// @return structHash The struct hash of the order.\n    function getLimitOrderStructHash(LimitOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.takerTokenFeeAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.sender,\n        //   order.feeRecipient,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _LIMIT_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.takerTokenFeeAmount;\n            mstore(add(mem, 0xA0), and(UINT_128_MASK, mload(add(order, 0x80))))\n            // order.maker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.taker;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.sender;\n            mstore(add(mem, 0x100), and(ADDRESS_MASK, mload(add(order, 0xE0))))\n            // order.feeRecipient;\n            mstore(add(mem, 0x120), and(ADDRESS_MASK, mload(add(order, 0x100))))\n            // order.pool;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            // order.expiry;\n            mstore(add(mem, 0x160), and(UINT_64_MASK, mload(add(order, 0x140))))\n            // order.salt;\n            mstore(add(mem, 0x180), mload(add(order, 0x160)))\n            structHash := keccak256(mem, 0x1A0)\n        }\n    }\n\n    /// @dev Get the struct hash of a RFQ order.\n    /// @param order The RFQ order.\n    /// @return structHash The struct hash of the order.\n    function getRfqOrderStructHash(RfqOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _RFQ_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.pool;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            // order.expiry;\n            mstore(add(mem, 0x120), and(UINT_64_MASK, mload(add(order, 0x100))))\n            // order.salt;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            structHash := keccak256(mem, 0x160)\n        }\n    }\n\n    /// @dev Get the struct hash of an OTC order.\n    /// @param order The OTC order.\n    /// @return structHash The struct hash of the order.\n    function getOtcOrderStructHash(OtcOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.expiryAndNonce,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _OTC_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.expiryAndNonce;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            structHash := keccak256(mem, 0x120)\n        }\n    }\n\n    /// @dev Refund any leftover protocol fees in `msg.value` to `msg.sender`.\n    /// @param ethProtocolFeePaid How much ETH was paid in protocol fees.\n    function refundExcessProtocolFeeToSender(uint256 ethProtocolFeePaid)\n        internal\n    {\n        if (msg.value > ethProtocolFeePaid && msg.sender != address(this)) {\n            uint256 refundAmount = msg.value.safeSub(ethProtocolFeePaid);\n            (bool success,) = msg\n                .sender\n                .call{value: refundAmount}(\"\");\n            if (!success) {\n                LibNativeOrdersRichErrors.ProtocolFeeRefundFailed(\n                    msg.sender,\n                    refundAmount\n                ).rrevert();\n            }\n        }\n    }\n}\n"
        },
        "../../errors/LibNativeOrdersRichErrors.sol": {
            "id": 1,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibNativeOrdersRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function ProtocolFeeRefundFailed(\n        address receiver,\n        uint256 refundAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"ProtocolFeeRefundFailed(address,uint256)\")),\n            receiver,\n            refundAmount\n        );\n    }\n\n    function OrderNotFillableByOriginError(\n        bytes32 orderHash,\n        address txOrigin,\n        address orderTxOrigin\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByOriginError(bytes32,address,address)\")),\n            orderHash,\n            txOrigin,\n            orderTxOrigin\n        );\n    }\n\n    function OrderNotFillableError(\n        bytes32 orderHash,\n        uint8 orderStatus\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableError(bytes32,uint8)\")),\n            orderHash,\n            orderStatus\n        );\n    }\n\n    function OrderNotSignedByMakerError(\n        bytes32 orderHash,\n        address signer,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotSignedByMakerError(bytes32,address,address)\")),\n            orderHash,\n            signer,\n            maker\n        );\n    }\n\n    function InvalidSignerError(\n        address maker,\n        address signer\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidSignerError(address,address)\")),\n            maker,\n            signer\n        );\n    }\n\n    function OrderNotFillableBySenderError(\n        bytes32 orderHash,\n        address sender,\n        address orderSender\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableBySenderError(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            orderSender\n        );\n    }\n\n    function OrderNotFillableByTakerError(\n        bytes32 orderHash,\n        address taker,\n        address orderTaker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByTakerError(bytes32,address,address)\")),\n            orderHash,\n            taker,\n            orderTaker\n        );\n    }\n\n    function CancelSaltTooLowError(\n        uint256 minValidSalt,\n        uint256 oldMinValidSalt\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"CancelSaltTooLowError(uint256,uint256)\")),\n            minValidSalt,\n            oldMinValidSalt\n        );\n    }\n\n    function FillOrKillFailedError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"FillOrKillFailedError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n\n    function OnlyOrderMakerAllowed(\n        bytes32 orderHash,\n        address sender,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOrderMakerAllowed(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            maker\n        );\n    }\n\n    function BatchFillIncompleteError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"BatchFillIncompleteError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n}\n"
        },
        "../libs/LibSignature.sol": {
            "id": 16,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../../errors/LibSignatureRichErrors.sol\";\n\n\n/// @dev A library for validating signatures.\nlibrary LibSignature {\n    using LibRichErrorsV06 for bytes;\n\n    // '\\x19Ethereum Signed Message:\\n32\\x00\\x00\\x00\\x00' in a word.\n    uint256 private constant ETH_SIGN_HASH_PREFIX =\n        0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\n    ///      The valid range is given by fig (282) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\n    ///      The valid range is given by fig (283) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Retrieve the signer of a signature.\n    ///      Throws if the signature can't be validated.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    /// @return recovered The recovered signer address.\n    function getSignerOfHash(\n        bytes32 hash,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address recovered)\n    {\n        // Ensure this is a signature type that can be validated against a hash.\n        _validateHashCompatibleSignature(hash, signature);\n\n        if (signature.signatureType == SignatureType.EIP712) {\n            // Signed using EIP712\n            recovered = ecrecover(\n                hash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\n            // Signed using `eth_sign`\n            // Need to hash `hash` with \"\\x19Ethereum Signed Message:\\n32\" prefix\n            // in packed encoding.\n            bytes32 ethSignHash;\n            assembly {\n                // Use scratch space\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\n                mstore(28, hash) // length of 32 bytes\n                ethSignHash := keccak256(0, 60)\n            }\n            recovered = ecrecover(\n                ethSignHash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        }\n        // `recovered` can be null if the signature values are out of range.\n        if (recovered == address(0)) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n    }\n\n    /// @dev Validates that a signature is compatible with a hash signee.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    function _validateHashCompatibleSignature(\n        bytes32 hash,\n        Signature memory signature\n    )\n        private\n        pure\n    {\n        // Ensure the r and s are within malleability limits.\n        if (uint256(signature.r) >= ECDSA_SIGNATURE_R_LIMIT ||\n            uint256(signature.s) >= ECDSA_SIGNATURE_S_LIMIT)\n        {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n\n        // Always illegal signature.\n        if (signature.signatureType == SignatureType.ILLEGAL) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\n                hash\n            ).rrevert();\n        }\n\n        // Always invalid.\n        if (signature.signatureType == SignatureType.INVALID) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\n                hash\n            ).rrevert();\n        }\n\n        // Solidity should check that the signature type is within enum range for us\n        // when abi-decoding.\n    }\n}\n"
        },
        "../../errors/LibSignatureRichErrors.sol": {
            "id": 3,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSignatureRichErrors {\n\n    enum SignatureValidationErrorCodes {\n        ALWAYS_INVALID,\n        INVALID_LENGTH,\n        UNSUPPORTED,\n        ILLEGAL,\n        WRONG_SIGNER,\n        BAD_SIGNATURE_DATA\n    }\n\n    // solhint-disable func-name-mixedcase\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32,address,bytes)\")),\n            code,\n            hash,\n            signerAddress,\n            signature\n        );\n    }\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32)\")),\n            code,\n            hash\n        );\n    }\n}\n"
        },
        "./MultiplexRfq.sol": {
            "id": 20,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../fixins/FixinEIP712.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\nimport \"../interfaces/INativeOrdersFeature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\n\n\nabstract contract MultiplexRfq is\n    FixinEIP712\n{\n    using LibSafeMathV06 for uint256;\n\n    event ExpiredRfqOrder(\n        bytes32 orderHash,\n        address maker,\n        uint64 expiry\n    );\n\n    function _batchSellRfqOrder(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        // Decode the RFQ order and signature.\n        (\n            LibNativeOrder.RfqOrder memory order,\n            LibSignature.Signature memory signature\n        ) = abi.decode(\n            wrappedCallData,\n            (LibNativeOrder.RfqOrder, LibSignature.Signature)\n        );\n        // Pre-emptively check if the order is expired.\n        if (order.expiry <= uint64(block.timestamp)) {\n            bytes32 orderHash = _getEIP712Hash(\n                LibNativeOrder.getRfqOrderStructHash(order)\n            );\n            emit ExpiredRfqOrder(\n                orderHash,\n                order.maker,\n                order.expiry\n            );\n            return;\n        }\n        // Validate tokens.\n        require(\n            order.takerToken == params.inputToken &&\n            order.makerToken == params.outputToken,\n            \"MultiplexRfq::_batchSellRfqOrder/RFQ_ORDER_INVALID_TOKENS\"\n        );\n        // Try filling the RFQ order. Swallows reverts.\n        try\n            INativeOrdersFeature(address(this))._fillRfqOrder\n                (\n                    order,\n                    signature,\n                    sellAmount.safeDowncastToUint128(),\n                    msg.sender,\n                    params.useSelfBalance,\n                    params.recipient\n                )\n            returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n        {\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(takerTokenFilledAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(makerTokenFilledAmount);\n        } catch {}\n    }\n}\n"
        },
        "../interfaces/INativeOrdersFeature.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\nimport \"./INativeOrdersEvents.sol\";\n\n\n/// @dev Feature for interacting with limit orders.\ninterface INativeOrdersFeature is\n    INativeOrdersEvents\n{\n\n    /// @dev Transfers protocol fees from the `FeeCollector` pools into\n    ///      the staking contract.\n    /// @param poolIds Staking pool IDs\n    function transferProtocolFeesForPools(bytes32[] calldata poolIds)\n        external;\n\n    /// @dev Fill a limit order. The taker and sender will be the caller.\n    /// @param order The limit order. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill a limit order. Internal variant. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      `msg.sender` (not `sender`).\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param sender The order sender.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        address sender\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order. Internal variant.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param useSelfBalance Whether to use the ExchangeProxy's transient\n    ///        balance of taker tokens to fill the order.\n    /// @param recipient The recipient of the maker tokens.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        bool useSelfBalance,\n        address recipient\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Cancel a single limit order. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The limit order.\n    function cancelLimitOrder(LibNativeOrder.LimitOrder calldata order)\n        external;\n\n    /// @dev Cancel a single RFQ order. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The RFQ order.\n    function cancelRfqOrder(LibNativeOrder.RfqOrder calldata order)\n        external;\n\n    /// @dev Mark what tx.origin addresses are allowed to fill an order that\n    ///      specifies the message sender as its txOrigin.\n    /// @param origins An array of origin addresses to update.\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedRfqOrigins(address[] memory origins, bool allowed)\n        external;\n\n    /// @dev Cancel multiple limit orders. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The limit orders.\n    function batchCancelLimitOrders(LibNativeOrder.LimitOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel multiple RFQ orders. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The RFQ orders.\n    function batchCancelRfqOrders(LibNativeOrder.RfqOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrdersWithSigner(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrdersWithSigner(\n        address maker,\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrdersWithSigner(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrdersWithSigner(\n        address maker,\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        external;\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the order info for an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderInfo Info about the order.\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the canonical hash of a limit order.\n    /// @param order The limit order.\n    /// @return orderHash The order hash.\n    function getLimitOrderHash(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the canonical hash of an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderHash The order hash.\n    function getRfqOrderHash(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the protocol fee multiplier. This should be multiplied by the\n    ///      gas price to arrive at the required protocol fee to fill a native order.\n    /// @return multiplier The protocol fee multiplier.\n    function getProtocolFeeMultiplier()\n        external\n        view\n        returns (uint32 multiplier);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Get order info, fillable amount, and signature validity for an RFQ order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getRfqOrderRelevantState(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Batch version of `getLimitOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getLimitOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The limit orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetLimitOrderRelevantStates(\n        LibNativeOrder.LimitOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n\n    /// @dev Batch version of `getRfqOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getRfqOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The RFQ orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetRfqOrderRelevantStates(\n        LibNativeOrder.RfqOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n\n    /// @dev Register a signer who can sign on behalf of msg.sender\n    ///      This allows one to sign on behalf of a contract that calls this function\n    /// @param signer The address from which you plan to generate signatures\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedOrderSigner(\n        address signer,\n        bool allowed\n    )\n        external;\n\n    /// @dev checks if a given address is registered to sign on behalf of a maker address\n    /// @param maker The maker address encoded in an order (can be a contract)\n    /// @param signer The address that is providing a signature\n    function isValidOrderSigner(\n        address maker,\n        address signer\n    )\n        external\n        view\n        returns (bool isAllowed);\n}\n"
        },
        "../interfaces/INativeOrdersEvents.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\n\n\n/// @dev Events emitted by NativeOrdersFeature.\ninterface INativeOrdersEvents {\n\n    /// @dev Emitted whenever a `LimitOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param feeRecipient Fee recipient of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param protocolFeePaid How much protocol fee was paid.\n    /// @param pool The fee pool associated with this order.\n    event LimitOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address feeRecipient,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        uint128 takerTokenFeeFilledAmount,\n        uint256 protocolFeePaid,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever an `RfqOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param pool The fee pool associated with this order.\n    event RfqOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever a limit or RFQ order is cancelled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The order maker.\n    event OrderCancelled(\n        bytes32 orderHash,\n        address maker\n    );\n\n    /// @dev Emitted whenever Limit orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledLimitOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted whenever RFQ orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledRfqOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted when new addresses are allowed or disallowed to fill\n    ///      orders with a given txOrigin.\n    /// @param origin The address doing the allowing.\n    /// @param addrs The address being allowed/disallowed.\n    /// @param allowed Indicates whether the address should be allowed.\n    event RfqOrderOriginsAllowed(\n        address origin,\n        address[] addrs,\n        bool allowed\n    );\n\n    /// @dev Emitted when new order signers are registered\n    /// @param maker The maker address that is registering a designated signer.\n    /// @param signer The address that will sign on behalf of maker.\n    /// @param allowed Indicates whether the address should be allowed.\n    event OrderSignerRegistered(\n        address maker,\n        address signer,\n        bool allowed\n    );\n}\n"
        },
        "./MultiplexTransformERC20.sol": {
            "id": 21,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\nimport \"../interfaces/ITransformERC20Feature.sol\";\n\n\nabstract contract MultiplexTransformERC20 {\n\n    using LibSafeMathV06 for uint256;\n\n    function _batchSellTransformERC20(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        ITransformERC20Feature.TransformERC20Args memory args;\n        // We want the TransformedERC20 event to have\n        // `msg.sender` as the taker.\n        args.taker = msg.sender;\n        args.inputToken = params.inputToken;\n        args.outputToken = params.outputToken;\n        args.inputTokenAmount = sellAmount;\n        args.minOutputTokenAmount = 0;\n        args.useSelfBalance = params.useSelfBalance;\n        args.recipient = payable(params.recipient);\n        (args.transformations) = abi.decode(\n            wrappedCallData,\n            (ITransformERC20Feature.Transformation[])\n        );\n        // Execute the transformations and swallow reverts.\n        try ITransformERC20Feature(address(this))._transformERC20\n            (args)\n            returns (uint256 outputTokenAmount)\n        {\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(sellAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(outputTokenAmount);\n        } catch {}\n    }\n}\n"
        },
        "../interfaces/ITransformERC20Feature.sol": {
            "id": 13,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../../transformers/IERC20Transformer.sol\";\nimport \"../../external/IFlashWallet.sol\";\n\n\n/// @dev Feature to composably transform between ERC20 tokens.\ninterface ITransformERC20Feature {\n\n    /// @dev Defines a transformation to run in `transformERC20()`.\n    struct Transformation {\n        // The deployment nonce for the transformer.\n        // The address of the transformer contract will be derived from this\n        // value.\n        uint32 deploymentNonce;\n        // Arbitrary data to pass to the transformer.\n        bytes data;\n    }\n\n    /// @dev Arguments for `_transformERC20()`.\n    struct TransformERC20Args {\n        // The taker address.\n        address payable taker;\n        // The token being provided by the taker.\n        // If `0xeee...`, ETH is implied and should be provided with the call.`\n        IERC20TokenV06 inputToken;\n        // The token to be acquired by the taker.\n        // `0xeee...` implies ETH.\n        IERC20TokenV06 outputToken;\n        // The amount of `inputToken` to take from the taker.\n        // If set to `uint256(-1)`, the entire spendable balance of the taker\n        // will be solt.\n        uint256 inputTokenAmount;\n        // The minimum amount of `outputToken` the taker\n        // must receive for the entire transformation to succeed. If set to zero,\n        // the minimum output token transfer will not be asserted.\n        uint256 minOutputTokenAmount;\n        // The transformations to execute on the token balance(s)\n        // in sequence.\n        Transformation[] transformations;\n        // Whether to use the Exchange Proxy's balance of `inputToken`.\n        bool useSelfBalance;\n        // The recipient of the bought `outputToken`.\n        address payable recipient;\n    }\n\n    /// @dev Raised upon a successful `transformERC20`.\n    /// @param taker The taker (caller) address.\n    /// @param inputToken The token being provided by the taker.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the taker.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the taker.\n    /// @param outputTokenAmount The amount of `outputToken` received by the taker.\n    event TransformedERC20(\n        address indexed taker,\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    /// @dev Raised when `setTransformerDeployer()` is called.\n    /// @param transformerDeployer The new deployer address.\n    event TransformerDeployerUpdated(address transformerDeployer);\n\n    /// @dev Raised when `setQuoteSigner()` is called.\n    /// @param quoteSigner The new quote signer.\n    event QuoteSignerUpdated(address quoteSigner);\n\n    /// @dev Replace the allowed deployer for transformers.\n    ///      Only callable by the owner.\n    /// @param transformerDeployer The address of the new trusted deployer\n    ///        for transformers.\n    function setTransformerDeployer(address transformerDeployer)\n        external;\n\n    /// @dev Replace the optional signer for `transformERC20()` calldata.\n    ///      Only callable by the owner.\n    /// @param quoteSigner The address of the new calldata signer.\n    function setQuoteSigner(address quoteSigner)\n        external;\n\n    /// @dev Deploy a new flash wallet instance and replace the current one with it.\n    ///      Useful if we somehow break the current wallet instance.\n    ///       Only callable by the owner.\n    /// @return wallet The new wallet instance.\n    function createTransformWallet()\n        external\n        returns (IFlashWallet wallet);\n\n    /// @dev Executes a series of transformations to convert an ERC20 `inputToken`\n    ///      to an ERC20 `outputToken`.\n    /// @param inputToken The token being provided by the sender.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the sender.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the sender.\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the sender\n    ///        must receive for the entire transformation to succeed.\n    /// @param transformations The transformations to execute on the token balance(s)\n    ///        in sequence.\n    /// @return outputTokenAmount The amount of `outputToken` received by the sender.\n    function transformERC20(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 minOutputTokenAmount,\n        Transformation[] calldata transformations\n    )\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Internal version of `transformERC20()`. Only callable from within.\n    /// @param args A `TransformERC20Args` struct.\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\n    function _transformERC20(TransformERC20Args calldata args)\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Return the current wallet instance that will serve as the execution\n    ///      context for transformations.\n    /// @return wallet The wallet instance.\n    function getTransformWallet()\n        external\n        view\n        returns (IFlashWallet wallet);\n\n    /// @dev Return the allowed deployer for transformers.\n    /// @return deployer The transform deployer address.\n    function getTransformerDeployer()\n        external\n        view\n        returns (address deployer);\n\n    /// @dev Return the optional signer for `transformERC20()` calldata.\n    /// @return signer The transform deployer address.\n    function getQuoteSigner()\n        external\n        view\n        returns (address signer);\n}\n"
        },
        "../../transformers/IERC20Transformer.sol": {
            "id": 28,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev A transformation callback used in `TransformERC20.transformERC20()`.\ninterface IERC20Transformer {\n\n    /// @dev Context information to pass into `transform()` by `TransformERC20.transformERC20()`.\n    struct TransformContext {\n        // The caller of `TransformERC20.transformERC20()`.\n        address payable sender;\n        // The recipient address, which may be distinct from `sender` e.g. in\n        // meta-transactions.\n        address payable recipient;\n        // Arbitrary data to pass to the transformer.\n        bytes data;\n    }\n\n    /// @dev Called from `TransformERC20.transformERC20()`. This will be\n    ///      delegatecalled in the context of the FlashWallet instance being used.\n    /// @param context Context information.\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\n    function transform(TransformContext calldata context)\n        external\n        returns (bytes4 success);\n}\n"
        },
        "../../external/IFlashWallet.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n/// @dev A contract that can execute arbitrary calls from its owner.\ninterface IFlashWallet {\n\n    /// @dev Execute an arbitrary call. Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @param value Ether to attach to the call.\n    /// @return resultData The data returned by the call.\n    function executeCall(\n        address payable target,\n        bytes calldata callData,\n        uint256 value\n    )\n        external\n        payable\n        returns (bytes memory resultData);\n\n    /// @dev Execute an arbitrary delegatecall, in the context of this puppet.\n    ///      Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @return resultData The data returned by the call.\n    function executeDelegateCall(\n        address payable target,\n        bytes calldata callData\n    )\n        external\n        payable\n        returns (bytes memory resultData);\n\n    /// @dev Allows the puppet to receive ETH.\n    receive() external payable;\n\n    /// @dev Fetch the immutable owner/deployer of this contract.\n    /// @return owner_ The immutable owner/deployer/\n    function owner() external view returns (address owner_);\n}\n"
        },
        "./MultiplexUniswapV2.sol": {
            "id": 22,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../fixins/FixinCommon.sol\";\nimport \"../../fixins/FixinTokenSpender.sol\";\nimport \"../../vendor/IUniswapV2Pair.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\n\n\nabstract contract MultiplexUniswapV2 is\n    FixinCommon,\n    FixinTokenSpender\n{\n    using LibSafeMathV06 for uint256;\n\n    // address of the UniswapV2Factory contract.\n    address private immutable UNISWAP_FACTORY;\n    // address of the (Sushiswap) UniswapV2Factory contract.\n    address private immutable SUSHISWAP_FACTORY;\n    // Init code hash of the UniswapV2Pair contract.\n    bytes32 private immutable UNISWAP_PAIR_INIT_CODE_HASH;\n    // Init code hash of the (Sushiswap) UniswapV2Pair contract.\n    bytes32 private immutable SUSHISWAP_PAIR_INIT_CODE_HASH;\n\n    constructor(\n        address uniswapFactory,\n        address sushiswapFactory,\n        bytes32 uniswapPairInitCodeHash,\n        bytes32 sushiswapPairInitCodeHash\n    )\n        internal\n    {\n        UNISWAP_FACTORY = uniswapFactory;\n        SUSHISWAP_FACTORY = sushiswapFactory;\n        UNISWAP_PAIR_INIT_CODE_HASH = uniswapPairInitCodeHash;\n        SUSHISWAP_PAIR_INIT_CODE_HASH = sushiswapPairInitCodeHash;\n    }\n\n    // A payable external function that we can delegatecall to\n    // swallow reverts and roll back the input token transfer.\n    function _batchSellUniswapV2External(\n        IMultiplexFeature.BatchSellParams calldata params,\n        bytes calldata wrappedCallData,\n        uint256 sellAmount\n    )\n        external\n        payable\n        returns (uint256 boughtAmount)\n    {\n        // Revert is not a delegatecall.\n        require(\n            address(this) != _implementation,\n            \"MultiplexLiquidityProvider::_batchSellUniswapV2External/ONLY_DELEGATECALL\"\n        );\n\n        (address[] memory tokens, bool isSushi) = abi.decode(\n            wrappedCallData,\n            (address[], bool)\n        );\n        // Validate tokens\n        require(\n            tokens.length >= 2 &&\n            tokens[0] == address(params.inputToken) &&\n            tokens[tokens.length - 1] == address(params.outputToken),\n            \"MultiplexUniswapV2::_batchSellUniswapV2/INVALID_TOKENS\"\n        );\n        // Compute the address of the first Uniswap pair\n        // contract that will execute a swap.\n        address firstPairAddress = _computeUniswapPairAddress(\n            tokens[0],\n            tokens[1],\n            isSushi\n        );\n        // `_sellToUniswapV2` assumes the input tokens have been\n        // transferred into the pair contract before it is called,\n        // so we transfer the tokens in now (either from `msg.sender`\n        // or using the Exchange Proxy's balance).\n        if (params.useSelfBalance) {\n            _transferERC20Tokens(\n                IERC20TokenV06(tokens[0]),\n                firstPairAddress,\n                sellAmount\n            );\n        } else {\n            _transferERC20TokensFrom(\n                IERC20TokenV06(tokens[0]),\n                msg.sender,\n                firstPairAddress,\n                sellAmount\n            );\n        }\n        // Execute the Uniswap/Sushiswap trade.\n        return _sellToUniswapV2(\n            tokens,\n            sellAmount,\n            isSushi,\n            firstPairAddress,\n            params.recipient\n        );\n    }\n\n    function _batchSellUniswapV2(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        // Swallow reverts\n        (bool success, bytes memory resultData) = _implementation.delegatecall(\n            abi.encodeWithSelector(\n                this._batchSellUniswapV2External.selector,\n                params,\n                wrappedCallData,\n                sellAmount\n            )\n        );\n        if (success) {\n            // Decode the output token amount on success.\n            uint256 boughtAmount = abi.decode(resultData, (uint256));\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(sellAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(boughtAmount);\n        }\n    }\n\n    function _multiHopSellUniswapV2(\n        IMultiplexFeature.MultiHopSellState memory state,\n        IMultiplexFeature.MultiHopSellParams memory params,\n        bytes memory wrappedCallData\n    )\n        internal\n    {\n        (address[] memory tokens, bool isSushi) = abi.decode(\n            wrappedCallData,\n            (address[], bool)\n        );\n        // Validate the tokens\n        require(\n            tokens.length >= 2 &&\n            tokens[0] == params.tokens[state.hopIndex] &&\n            tokens[tokens.length - 1] == params.tokens[state.hopIndex + 1],\n            \"MultiplexUniswapV2::_multiHopSellUniswapV2/INVALID_TOKENS\"\n        );\n        // Execute the Uniswap/Sushiswap trade.\n        state.outputTokenAmount = _sellToUniswapV2(\n            tokens,\n            state.outputTokenAmount,\n            isSushi,\n            state.from,\n            state.to\n        );\n    }\n\n    function _sellToUniswapV2(\n        address[] memory tokens,\n        uint256 sellAmount,\n        bool isSushi,\n        address pairAddress,\n        address recipient\n    )\n        private\n        returns (uint256 outputTokenAmount)\n    {\n        // Iterate through `tokens` perform a swap against the Uniswap\n        // pair contract for each `(tokens[i], tokens[i+1])`.\n        for (uint256 i = 0; i < tokens.length - 1; i++) {\n            (address inputToken, address outputToken) = (tokens[i], tokens[i + 1]);\n            // Compute the output token amount\n            outputTokenAmount = _computeUniswapOutputAmount(\n                pairAddress,\n                inputToken,\n                outputToken,\n                sellAmount\n            );\n            (uint256 amount0Out, uint256 amount1Out) = inputToken < outputToken\n                ? (uint256(0), outputTokenAmount)\n                : (outputTokenAmount, uint256(0));\n            // The Uniswap pair contract will transfer the output tokens to\n            // the next pair contract if there is one, otherwise transfer to\n            // `recipient`.\n            address to = i < tokens.length - 2\n                ? _computeUniswapPairAddress(outputToken, tokens[i + 2], isSushi)\n                : recipient;\n            // Execute the swap.\n            IUniswapV2Pair(pairAddress).swap(\n                amount0Out,\n                amount1Out,\n                to,\n                new bytes(0)\n            );\n            // To avoid recomputing the pair address of the next pair, store\n            // `to` in `pairAddress`.\n            pairAddress = to;\n            // The outputTokenAmount\n            sellAmount = outputTokenAmount;\n        }\n    }\n\n    // Computes the Uniswap/Sushiswap pair contract address for the\n    // given tokens.\n    function _computeUniswapPairAddress(\n        address tokenA,\n        address tokenB,\n        bool isSushi\n    )\n        internal\n        view\n        returns (address pairAddress)\n    {\n        // Tokens are lexicographically sorted in the Uniswap contract.\n        (address token0, address token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        if (isSushi) {\n            // Use the Sushiswap factory address and codehash\n            return address(uint256(keccak256(abi.encodePacked(\n                hex'ff',\n                SUSHISWAP_FACTORY,\n                keccak256(abi.encodePacked(token0, token1)),\n                SUSHISWAP_PAIR_INIT_CODE_HASH\n            ))));\n        } else {\n            // Use the Uniswap factory address and codehash\n            return address(uint256(keccak256(abi.encodePacked(\n                hex'ff',\n                UNISWAP_FACTORY,\n                keccak256(abi.encodePacked(token0, token1)),\n                UNISWAP_PAIR_INIT_CODE_HASH\n            ))));\n        }\n    }\n\n    // Computes the the amount of output token that would be bought\n    // from Uniswap/Sushiswap given the input amount.\n    function _computeUniswapOutputAmount(\n        address pairAddress,\n        address inputToken,\n        address outputToken,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount)\n    {\n        // Input amount should be non-zero.\n        require(\n            inputAmount > 0,\n            \"MultiplexUniswapV2::_computeUniswapOutputAmount/INSUFFICIENT_INPUT_AMOUNT\"\n        );\n        // Query the reserves of the pair contract.\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pairAddress).getReserves();\n        // Reserves must be non-zero.\n        require(\n            reserve0 > 0 && reserve1 > 0,\n            'MultiplexUniswapV2::_computeUniswapOutputAmount/INSUFFICIENT_LIQUIDITY'\n        );\n        // Tokens are lexicographically sorted in the Uniswap contract.\n        (uint256 inputReserve, uint256 outputReserve) = inputToken < outputToken\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        // Compute the output amount.\n        uint256 inputAmountWithFee = inputAmount.safeMul(997);\n        uint256 numerator = inputAmountWithFee.safeMul(outputReserve);\n        uint256 denominator = inputReserve.safeMul(1000).safeAdd(inputAmountWithFee);\n        return numerator / denominator;\n    }\n}\n"
        },
        "../../vendor/IUniswapV2Pair.sol": {
            "id": 30,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.12;\n\n\ninterface IUniswapV2Pair {\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n\n    function swap(\n        uint amount0Out,\n        uint amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n}\n"
        },
        "./MultiplexUniswapV3.sol": {
            "id": 23,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../fixins/FixinTokenSpender.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\nimport \"../interfaces/IUniswapV3Feature.sol\";\n\n\nabstract contract MultiplexUniswapV3 is\n    FixinTokenSpender\n{\n    using LibSafeMathV06 for uint256;\n\n    function _batchSellUniswapV3(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        bool success;\n        bytes memory resultData;\n        if (params.useSelfBalance) {\n            // If the tokens are held by `address(this)`, we call\n            // the `onlySelf` variant `_sellHeldTokenForTokenToUniswapV3`,\n            // which uses the Exchange Proxy's balance of input token.\n            (success, resultData) = address(this).call(\n                abi.encodeWithSelector(\n                    IUniswapV3Feature._sellHeldTokenForTokenToUniswapV3.selector,\n                    wrappedCallData,\n                    sellAmount,\n                    0,\n                    params.recipient\n                )\n            );\n        } else {\n            // Otherwise, we self-delegatecall the normal variant\n            // `sellTokenForTokenToUniswapV3`, which pulls the input token\n            // from `msg.sender`.\n            (success, resultData) = address(this).delegatecall(\n                abi.encodeWithSelector(\n                    IUniswapV3Feature.sellTokenForTokenToUniswapV3.selector,\n                    wrappedCallData,\n                    sellAmount,\n                    0,\n                    params.recipient\n                )\n            );\n        }\n        if (success) {\n            // Decode the output token amount on success.\n            uint256 outputTokenAmount = abi.decode(resultData, (uint256));\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(sellAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(outputTokenAmount);\n        }\n    }\n\n    function _multiHopSellUniswapV3(\n        IMultiplexFeature.MultiHopSellState memory state,\n        bytes memory wrappedCallData\n    )\n        internal\n    {\n        bool success;\n        bytes memory resultData;\n        if (state.from == address(this)) {\n            // If the tokens are held by `address(this)`, we call\n            // the `onlySelf` variant `_sellHeldTokenForTokenToUniswapV3`,\n            // which uses the Exchange Proxy's balance of input token.\n            (success, resultData) = address(this).call(\n                abi.encodeWithSelector(\n                    IUniswapV3Feature._sellHeldTokenForTokenToUniswapV3.selector,\n                    wrappedCallData,\n                    state.outputTokenAmount,\n                    0,\n                    state.to\n                )\n            );\n        } else {\n            // Otherwise, we self-delegatecall the normal variant\n            // `sellTokenForTokenToUniswapV3`, which pulls the input token\n            // from `msg.sender`.\n            (success, resultData) = address(this).delegatecall(\n                abi.encodeWithSelector(\n                    IUniswapV3Feature.sellTokenForTokenToUniswapV3.selector,\n                    wrappedCallData,\n                    state.outputTokenAmount,\n                    0,\n                    state.to\n                )\n            );\n        }\n        if (success) {\n            // Decode the output token amount on success.\n            state.outputTokenAmount = abi.decode(resultData, (uint256));\n        } else {\n            revert(\"MultiplexUniswapV3::_multiHopSellUniswapV3/SWAP_FAILED\");\n        }\n    }\n}\n"
        },
        "../interfaces/IUniswapV3Feature.sol": {
            "id": 14,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev VIP uniswap v3 fill functions.\ninterface IUniswapV3Feature {\n\n    /// @dev Sell attached ETH directly against uniswap v3.\n    /// @param encodedPath Uniswap-encoded path, where the first token is WETH.\n    /// @param minBuyAmount Minimum amount of the last token in the path to buy.\n    /// @param recipient The recipient of the bought tokens. Can be zero for sender.\n    /// @return buyAmount Amount of the last token in the path bought.\n    function sellEthForTokenToUniswapV3(\n        bytes memory encodedPath,\n        uint256 minBuyAmount,\n        address recipient\n    )\n        external\n        payable\n        returns (uint256 buyAmount);\n\n    /// @dev Sell a token for ETH directly against uniswap v3.\n    /// @param encodedPath Uniswap-encoded path, where the last token is WETH.\n    /// @param sellAmount amount of the first token in the path to sell.\n    /// @param minBuyAmount Minimum amount of ETH to buy.\n    /// @param recipient The recipient of the bought tokens. Can be zero for sender.\n    /// @return buyAmount Amount of ETH bought.\n    function sellTokenForEthToUniswapV3(\n        bytes memory encodedPath,\n        uint256 sellAmount,\n        uint256 minBuyAmount,\n        address payable recipient\n    )\n        external\n        returns (uint256 buyAmount);\n\n    /// @dev Sell a token for another token directly against uniswap v3.\n    /// @param encodedPath Uniswap-encoded path.\n    /// @param sellAmount amount of the first token in the path to sell.\n    /// @param minBuyAmount Minimum amount of the last token in the path to buy.\n    /// @param recipient The recipient of the bought tokens. Can be zero for sender.\n    /// @return buyAmount Amount of the last token in the path bought.\n    function sellTokenForTokenToUniswapV3(\n        bytes memory encodedPath,\n        uint256 sellAmount,\n        uint256 minBuyAmount,\n        address recipient\n    )\n        external\n        returns (uint256 buyAmount);\n\n    /// @dev Sell a token for another token directly against uniswap v3.\n    ///      Private variant, uses tokens held by `address(this)`.\n    /// @param encodedPath Uniswap-encoded path.\n    /// @param sellAmount amount of the first token in the path to sell.\n    /// @param minBuyAmount Minimum amount of the last token in the path to buy.\n    /// @param recipient The recipient of the bought tokens. Can be zero for sender.\n    /// @return buyAmount Amount of the last token in the path bought.\n    function _sellHeldTokenForTokenToUniswapV3(\n        bytes memory encodedPath,\n        uint256 sellAmount,\n        uint256 minBuyAmount,\n        address recipient\n    )\n        external\n        returns (uint256 buyAmount);\n\n    /// @dev The UniswapV3 pool swap callback which pays the funds requested\n    ///      by the caller/pool to the pool. Can only be called by a valid\n    ///      UniswapV3 pool.\n    /// @param amount0Delta Token0 amount owed.\n    /// @param amount1Delta Token1 amount owed.\n    /// @param data Arbitrary data forwarded from swap() caller. An ABI-encoded\n    ///        struct of: inputToken, outputToken, fee, payer\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    )\n        external;\n}\n"
        }
    },
    "sourceCodes": {
        "./MultiplexFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../external/ILiquidityProviderSandbox.sol\";\nimport \"../../fixins/FixinCommon.sol\";\nimport \"../../fixins/FixinEIP712.sol\";\nimport \"../../migrations/LibMigrate.sol\";\nimport \"../interfaces/IFeature.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\nimport \"./MultiplexLiquidityProvider.sol\";\nimport \"./MultiplexOtc.sol\";\nimport \"./MultiplexRfq.sol\";\nimport \"./MultiplexTransformERC20.sol\";\nimport \"./MultiplexUniswapV2.sol\";\nimport \"./MultiplexUniswapV3.sol\";\n\n\n/// @dev This feature enables efficient batch and multi-hop trades\n///      using different liquidity sources.\ncontract MultiplexFeature is\n    IFeature,\n    IMultiplexFeature,\n    FixinCommon,\n    MultiplexLiquidityProvider,\n    MultiplexOtc,\n    MultiplexRfq,\n    MultiplexTransformERC20,\n    MultiplexUniswapV2,\n    MultiplexUniswapV3\n{\n    /// @dev Name of this feature.\n    string public constant override FEATURE_NAME = \"MultiplexFeature\";\n    /// @dev Version of this feature.\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(2, 0, 0);\n    /// @dev The highest bit of a uint256 value.\n    uint256 private constant HIGH_BIT = 2 ** 255;\n    /// @dev Mask of the lower 255 bits of a uint256 value.\n    uint256 private constant LOWER_255_BITS = HIGH_BIT - 1;\n\n    /// @dev The WETH token contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(\n        address zeroExAddress,\n        IEtherTokenV06 weth,\n        ILiquidityProviderSandbox sandbox,\n        address uniswapFactory,\n        address sushiswapFactory,\n        bytes32 uniswapPairInitCodeHash,\n        bytes32 sushiswapPairInitCodeHash\n    )\n        public\n        FixinEIP712(zeroExAddress)\n        MultiplexLiquidityProvider(sandbox)\n        MultiplexUniswapV2(\n            uniswapFactory,\n            sushiswapFactory,\n            uniswapPairInitCodeHash,\n            sushiswapPairInitCodeHash\n        )\n    {\n        WETH = weth;\n    }\n\n    /// @dev Initialize and register this feature.\n    ///      Should be delegatecalled by `Migrate.migrate()`.\n    /// @return success `LibMigrate.SUCCESS` on success.\n    function migrate()\n        external\n        returns (bytes4 success)\n    {\n        _registerFeatureFunction(this.multiplexBatchSellEthForToken.selector);\n        _registerFeatureFunction(this.multiplexBatchSellTokenForEth.selector);\n        _registerFeatureFunction(this.multiplexBatchSellTokenForToken.selector);\n        _registerFeatureFunction(this.multiplexMultiHopSellEthForToken.selector);\n        _registerFeatureFunction(this.multiplexMultiHopSellTokenForEth.selector);\n        _registerFeatureFunction(this.multiplexMultiHopSellTokenForToken.selector);\n        return LibMigrate.MIGRATE_SUCCESS;\n    }\n\n    /// @dev Sells attached ETH for `outputToken` using the provided\n    ///      calls.\n    /// @param outputToken The token to buy.\n    /// @param calls The calls to use to sell the attached ETH.\n    /// @param minBuyAmount The minimum amount of `outputToken` that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function multiplexBatchSellEthForToken(\n        IERC20TokenV06 outputToken,\n        BatchSellSubcall[] memory calls,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        payable\n        returns (uint256 boughtAmount)\n    {\n        // Wrap ETH.\n        WETH.deposit{value: msg.value}();\n        // WETH is now held by this contract,\n        // so `useSelfBalance` is true.\n        return _multiplexBatchSell(\n            BatchSellParams({\n                inputToken: WETH,\n                outputToken: outputToken,\n                sellAmount: msg.value,\n                calls: calls,\n                useSelfBalance: true,\n                recipient: msg.sender\n            }),\n            minBuyAmount\n        );\n    }\n\n    /// @dev Sells `sellAmount` of the given `inputToken` for ETH\n    ///      using the provided calls.\n    /// @param inputToken The token to sell.\n    /// @param calls The calls to use to sell the input tokens.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of ETH that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of ETH bought.\n    function multiplexBatchSellTokenForEth(\n        IERC20TokenV06 inputToken,\n        BatchSellSubcall[] memory calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        returns (uint256 boughtAmount)\n    {\n        // The outputToken is implicitly WETH. The `recipient`\n        // of the WETH is set to  this contract, since we\n        // must unwrap the WETH and transfer the resulting ETH.\n        boughtAmount = _multiplexBatchSell(\n            BatchSellParams({\n                inputToken: inputToken,\n                outputToken: WETH,\n                sellAmount: sellAmount,\n                calls: calls,\n                useSelfBalance: false,\n                recipient: address(this)\n            }),\n            minBuyAmount\n        );\n        // Unwrap WETH.\n        WETH.withdraw(boughtAmount);\n        // Transfer ETH to `msg.sender`.\n        _transferEth(msg.sender, boughtAmount);\n    }\n\n    /// @dev Sells `sellAmount` of the given `inputToken` for\n    ///      `outputToken` using the provided calls.\n    /// @param inputToken The token to sell.\n    /// @param outputToken The token to buy.\n    /// @param calls The calls to use to sell the input tokens.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of `outputToken`\n    ///        that must be bought for this function to not revert.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function multiplexBatchSellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        BatchSellSubcall[] memory calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        returns (uint256 boughtAmount)\n    {\n        return _multiplexBatchSell(\n            BatchSellParams({\n                inputToken: inputToken,\n                outputToken: outputToken,\n                sellAmount: sellAmount,\n                calls: calls,\n                useSelfBalance: false,\n                recipient: msg.sender\n            }),\n            minBuyAmount\n        );\n    }\n\n    /// @dev Executes a batch sell and checks that at least\n    ///      `minBuyAmount` of `outputToken` was bought.\n    /// @param params Batch sell parameters.\n    /// @param minBuyAmount The minimum amount of `outputToken` that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function _multiplexBatchSell(\n        BatchSellParams memory params,\n        uint256 minBuyAmount\n    )\n        private\n        returns (uint256 boughtAmount)\n    {\n        // Cache the recipient's initial balance of the output token.\n        uint256 balanceBefore = params.outputToken.balanceOf(params.recipient);\n        // Execute the batch sell.\n        BatchSellState memory state = _executeBatchSell(params);\n        // Compute the change in balance of the output token.\n        uint256 balanceDelta = params.outputToken.balanceOf(params.recipient)\n            .safeSub(balanceBefore);\n        // Use the minimum of the balanceDelta and the returned bought\n        // amount in case of weird tokens and whatnot.\n        boughtAmount = LibSafeMathV06.min256(balanceDelta, state.boughtAmount);\n        // Enforce `minBuyAmount`.\n        require(\n            boughtAmount >= minBuyAmount,\n            \"MultiplexFeature::_multiplexBatchSell/UNDERBOUGHT\"\n        );\n    }\n\n    /// @dev Sells attached ETH via the given sequence of tokens\n    ///      and calls. `tokens[0]` must be WETH.\n    ///      The last token in `tokens` is the output token that\n    ///      will ultimately be sent to `msg.sender`\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param minBuyAmount The minimum amount of output tokens that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of output tokens bought.\n    function multiplexMultiHopSellEthForToken(\n        address[] memory tokens,\n        MultiHopSellSubcall[] memory calls,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        payable\n        returns (uint256 boughtAmount)\n    {\n        // First token must be WETH.\n        require(\n            tokens[0] == address(WETH),\n            \"MultiplexFeature::multiplexMultiHopSellEthForToken/NOT_WETH\"\n        );\n        // Wrap ETH.\n        WETH.deposit{value: msg.value}();\n        // WETH is now held by this contract,\n        // so `useSelfBalance` is true.\n        return _multiplexMultiHopSell(\n            MultiHopSellParams({\n                tokens: tokens,\n                sellAmount: msg.value,\n                calls: calls,\n                useSelfBalance: true,\n                recipient: msg.sender\n            }),\n            minBuyAmount\n        );\n    }\n\n    /// @dev Sells `sellAmount` of the input token (`tokens[0]`)\n    ///      for ETH via the given sequence of tokens and calls.\n    ///      The last token in `tokens` must be WETH.\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of ETH that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of ETH bought.\n    function multiplexMultiHopSellTokenForEth(\n        address[] memory tokens,\n        MultiHopSellSubcall[] memory calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        returns (uint256 boughtAmount)\n    {\n        // Last token must be WETH.\n        require(\n            tokens[tokens.length - 1] == address(WETH),\n            \"MultiplexFeature::multiplexMultiHopSellTokenForEth/NOT_WETH\"\n        );\n        // The `recipient of the WETH is set to  this contract, since\n        // we must unwrap the WETH and transfer the resulting ETH.\n        boughtAmount = _multiplexMultiHopSell(\n            MultiHopSellParams({\n                tokens: tokens,\n                sellAmount: sellAmount,\n                calls: calls,\n                useSelfBalance: false,\n                recipient: address(this)\n            }),\n            minBuyAmount\n        );\n        // Unwrap WETH.\n        WETH.withdraw(boughtAmount);\n        // Transfer ETH to `msg.sender`.\n        _transferEth(msg.sender, boughtAmount);\n    }\n\n    /// @dev Sells `sellAmount` of the input token (`tokens[0]`)\n    ///      via the given sequence of tokens and calls.\n    ///      The last token in `tokens` is the output token that\n    ///      will ultimately be sent to `msg.sender`\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of output tokens that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of output tokens bought.\n    function multiplexMultiHopSellTokenForToken(\n        address[] memory tokens,\n        MultiHopSellSubcall[] memory calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        public\n        override\n        returns (uint256 boughtAmount)\n    {\n        return _multiplexMultiHopSell(\n            MultiHopSellParams({\n                tokens: tokens,\n                sellAmount: sellAmount,\n                calls: calls,\n                useSelfBalance: false,\n                recipient: msg.sender\n            }),\n            minBuyAmount\n        );\n    }\n\n    /// @dev Executes a multi-hop sell and checks that at least\n    ///      `minBuyAmount` of output tokens were bought.\n    /// @param params Multi-hop sell parameters.\n    /// @param minBuyAmount The minimum amount of output tokens that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of output tokens bought.\n    function _multiplexMultiHopSell(\n        MultiHopSellParams memory params,\n        uint256 minBuyAmount\n    )\n        private\n        returns (uint256 boughtAmount)\n    {\n        // There should be one call/hop between every two tokens\n        // in the path.\n        // tokens[0]b\u0000\u0013b\u0000\u0013calls[0]b\u0000\u0013b\u0000\u0013>tokens[1]b\u0000\u0013b\u0000\u0013...b\u0000\u0013b\u0000\u0013calls[n-1]b\u0000\u0013b\u0000\u0013>tokens[n]\n        require(\n            params.tokens.length == params.calls.length + 1,\n            \"MultiplexFeature::_multiplexMultiHopSell/MISMATCHED_ARRAY_LENGTHS\"\n        );\n        // The output token is the last token in the path.\n        IERC20TokenV06 outputToken = IERC20TokenV06(\n            params.tokens[params.tokens.length - 1]\n        );\n        // Cache the recipient's balance of the output token.\n        uint256 balanceBefore = outputToken.balanceOf(params.recipient);\n        // Execute the multi-hop sell.\n        MultiHopSellState memory state = _executeMultiHopSell(params);\n        // Compute the change in balance of the output token.\n        uint256 balanceDelta = outputToken.balanceOf(params.recipient)\n            .safeSub(balanceBefore);\n        // Use the minimum of the balanceDelta and the returned bought\n        // amount in case of weird tokens and whatnot.\n        boughtAmount = LibSafeMathV06.min256(balanceDelta, state.outputTokenAmount);\n        // Enforce `minBuyAmount`.\n        require(\n            boughtAmount >= minBuyAmount,\n            \"MultiplexFeature::_multiplexMultiHopSell/UNDERBOUGHT\"\n        );\n    }\n\n    /// @dev Iterates through the constituent calls of a batch\n    ///      sell and executes each one, until the full amount\n    //       has been sold.\n    /// @param params Batch sell parameters.\n    /// @return state A struct containing the amounts of `inputToken`\n    ///         sold and `outputToken` bought.\n    function _executeBatchSell(BatchSellParams memory params)\n        private\n        returns (BatchSellState memory state)\n    {\n        // Iterate through the calls and execute each one\n        // until the full amount has been sold.\n        for (uint256 i = 0; i != params.calls.length; i++) {\n            // Check if we've hit our target.\n            if (state.soldAmount >= params.sellAmount) { break; }\n            BatchSellSubcall memory subcall = params.calls[i];\n            // Compute the input token amount.\n            uint256 inputTokenAmount = _normalizeSellAmount(\n                subcall.sellAmount,\n                params.sellAmount,\n                state.soldAmount\n            );\n            if (subcall.id == MultiplexSubcall.RFQ) {\n                _batchSellRfqOrder(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.OTC) {\n                _batchSellOtcOrder(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.UniswapV2) {\n                _batchSellUniswapV2(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.UniswapV3) {\n                _batchSellUniswapV3(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.LiquidityProvider) {\n                _batchSellLiquidityProvider(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.TransformERC20) {\n                _batchSellTransformERC20(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else if (subcall.id == MultiplexSubcall.MultiHopSell) {\n                _nestedMultiHopSell(\n                    state,\n                    params,\n                    subcall.data,\n                    inputTokenAmount\n                );\n            } else {\n                revert(\"MultiplexFeature::_executeBatchSell/INVALID_SUBCALL\");\n            }\n        }\n        require(\n            state.soldAmount == params.sellAmount,\n            \"MultiplexFeature::_executeBatchSell/INCORRECT_AMOUNT_SOLD\"\n        );\n    }\n\n    // This function executes a sequence of fills \"hopping\" through the\n    // path of tokens given by `params.tokens`.\n    function _executeMultiHopSell(MultiHopSellParams memory params)\n        private\n        returns (MultiHopSellState memory state)\n    {\n        // This variable is used for the input and output amounts of\n        // each hop. After the final hop, this will contain the output\n        // amount of the multi-hop fill.\n        state.outputTokenAmount = params.sellAmount;\n        // The first call may expect the input tokens to be held by\n        // `msg.sender`, `address(this)`, or some other address.\n        // Compute the expected address and transfer the input tokens\n        // there if necessary.\n        state.from = _computeHopTarget(params, 0);\n        // If the input tokens are currently held by `msg.sender` but\n        // the first hop expects them elsewhere, perform a `transferFrom`.\n        if (!params.useSelfBalance && state.from != msg.sender) {\n            _transferERC20TokensFrom(\n                IERC20TokenV06(params.tokens[0]),\n                msg.sender,\n                state.from,\n                params.sellAmount\n            );\n        }\n        // If the input tokens are currently held by `address(this)` but\n        // the first hop expects them elsewhere, perform a `transfer`.\n        if (params.useSelfBalance && state.from != address(this)) {\n            _transferERC20Tokens(\n                IERC20TokenV06(params.tokens[0]),\n                state.from,\n                params.sellAmount\n            );\n        }\n        // Iterate through the calls and execute each one.\n        for (state.hopIndex = 0; state.hopIndex != params.calls.length; state.hopIndex++) {\n            MultiHopSellSubcall memory subcall = params.calls[state.hopIndex];\n            // Compute the recipient of the tokens that will be\n            // bought by the current hop.\n            state.to = _computeHopTarget(params, state.hopIndex + 1);\n\n            if (subcall.id == MultiplexSubcall.UniswapV2) {\n                _multiHopSellUniswapV2(\n                    state,\n                    params,\n                    subcall.data\n                );\n            } else if (subcall.id == MultiplexSubcall.UniswapV3) {\n                _multiHopSellUniswapV3(state, subcall.data);\n            } else if (subcall.id == MultiplexSubcall.LiquidityProvider) {\n                _multiHopSellLiquidityProvider(\n                    state,\n                    params,\n                    subcall.data\n                );\n            } else if (subcall.id == MultiplexSubcall.BatchSell) {\n                _nestedBatchSell(\n                    state,\n                    params,\n                    subcall.data\n                );\n            } else {\n                revert(\"MultiplexFeature::_executeMultiHopSell/INVALID_SUBCALL\");\n            }\n            // The recipient of the current hop will be the source\n            // of tokens for the next hop.\n            state.from = state.to;\n        }\n    }\n\n    function _nestedMultiHopSell(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory data,\n        uint256 sellAmount\n    )\n        private\n    {\n        MultiHopSellParams memory multiHopParams;\n        // Decode the tokens and calls for the nested\n        // multi-hop sell.\n        (\n            multiHopParams.tokens,\n            multiHopParams.calls\n        ) = abi.decode(\n            data,\n            (address[], MultiHopSellSubcall[])\n        );\n        multiHopParams.sellAmount = sellAmount;\n        // If the batch sell is using input tokens held by\n        // `address(this)`, then so should the nested\n        // multi-hop sell.\n        multiHopParams.useSelfBalance = params.useSelfBalance;\n        // Likewise, the recipient of the multi-hop sell is\n        // equal to the recipient of its containing batch sell.\n        multiHopParams.recipient = params.recipient;\n        // Execute the nested multi-hop sell.\n        uint256 outputTokenAmount =\n            _executeMultiHopSell(multiHopParams).outputTokenAmount;\n        // Increment the sold and bought amounts.\n        state.soldAmount = state.soldAmount.safeAdd(sellAmount);\n        state.boughtAmount = state.boughtAmount.safeAdd(outputTokenAmount);\n    }\n\n    function _nestedBatchSell(\n        IMultiplexFeature.MultiHopSellState memory state,\n        IMultiplexFeature.MultiHopSellParams memory params,\n        bytes memory data\n    )\n        private\n    {\n        BatchSellParams memory batchSellParams;\n        // Decode the calls for the nested batch sell.\n        batchSellParams.calls = abi.decode(\n            data,\n            (BatchSellSubcall[])\n        );\n        // The input and output tokens of the batch\n        // sell are the current and next tokens in\n        // `params.tokens`, respectively.\n        batchSellParams.inputToken = IERC20TokenV06(\n            params.tokens[state.hopIndex]\n        );\n        batchSellParams.outputToken = IERC20TokenV06(\n            params.tokens[state.hopIndex + 1]\n        );\n        // The `sellAmount` for the batch sell is the\n        // `outputTokenAmount` from the previous hop.\n        batchSellParams.sellAmount = state.outputTokenAmount;\n        // If the nested batch sell is the first hop\n        // and `useSelfBalance` for the containing multi-\n        // hop sell is false, the nested batch sell should\n        // pull tokens from `msg.sender` (so  `batchSellParams.useSelfBalance`\n        // should be false). Otherwise `batchSellParams.useSelfBalance`\n        // should be true.\n        batchSellParams.useSelfBalance = state.hopIndex > 0 || params.useSelfBalance;\n        // `state.to` has been populated with the address\n        // that should receive the output tokens of the\n        // batch sell.\n        batchSellParams.recipient = state.to;\n        // Execute the nested batch sell.\n        state.outputTokenAmount =\n            _executeBatchSell(batchSellParams).boughtAmount;\n    }\n\n    // Transfers some amount of ETH to the given recipient and\n    // reverts if the transfer fails.\n    function _transferEth(address payable recipient, uint256 amount)\n        private\n    {\n        (bool success,) = recipient.call{value: amount}(\"\");\n        require(success, \"MultiplexFeature::_transferEth/TRANSFER_FAILED\");\n    }\n\n    // This function computes the \"target\" address of hop index `i` within\n    // a multi-hop sell.\n    // If `i == 0`, the target is the address which should hold the input\n    // tokens prior to executing `calls[0]`. Otherwise, it is the address\n    // that should receive `tokens[i]` upon executing `calls[i-1]`.\n    function _computeHopTarget(\n        MultiHopSellParams memory params,\n        uint256 i\n    )\n        private\n        view\n        returns (address target)\n    {\n        if (i == params.calls.length) {\n            // The last call should send the output tokens to the\n            // multi-hop sell recipient.\n            target = params.recipient;\n        } else {\n            MultiHopSellSubcall memory subcall = params.calls[i];\n            if (subcall.id == MultiplexSubcall.UniswapV2) {\n                // UniswapV2 (and Sushiswap) allow tokens to be\n                // transferred into the pair contract before `swap`\n                // is called, so we compute the pair contract's address.\n                (address[] memory tokens, bool isSushi) = abi.decode(\n                    subcall.data,\n                    (address[], bool)\n                );\n                target = _computeUniswapPairAddress(\n                    tokens[0],\n                    tokens[1],\n                    isSushi\n                );\n            } else if (subcall.id == MultiplexSubcall.LiquidityProvider) {\n                // Similar to UniswapV2, LiquidityProvider contracts\n                // allow tokens to be transferred in before the swap\n                // is executed, so we the target is the address encoded\n                // in the subcall data.\n                (target,) = abi.decode(\n                    subcall.data,\n                    (address, bytes)\n                );\n            } else if (\n                subcall.id == MultiplexSubcall.UniswapV3 ||\n                subcall.id == MultiplexSubcall.BatchSell\n            ) {\n                // UniswapV3 uses a callback to pull in the tokens being\n                // sold to it. The callback implemented in `UniswapV3Feature`\n                // can either:\n                // - call `transferFrom` to move tokens from `msg.sender` to the\n                //   UniswapV3 pool, or\n                // - call `transfer` to move tokens from `address(this)` to the\n                //   UniswapV3 pool.\n                // A nested batch sell is similar, in that it can either:\n                // - use tokens from `msg.sender`, or\n                // - use tokens held by `address(this)`.\n\n                // Suppose UniswapV3/BatchSell is the first call in the multi-hop\n                // path. The input tokens are either held by `msg.sender`,\n                // or in the case of `multiplexMultiHopSellEthForToken` WETH is\n                // held by `address(this)`. The target is set accordingly.\n\n                // If this is _not_ the first call in the multi-hop path, we\n                // are dealing with an \"intermediate\" token in the multi-hop path,\n                // which `msg.sender` may not have an allowance set for. Thus\n                // target must be set to `address(this)` for `i > 0`.\n                if (i == 0 && !params.useSelfBalance) {\n                    target = msg.sender;\n                } else {\n                    target = address(this);\n                }\n            } else {\n                revert(\"MultiplexFeature::_computeHopTarget/INVALID_SUBCALL\");\n            }\n        }\n        require(\n            target != address(0),\n            \"MultiplexFeature::_computeHopTarget/TARGET_IS_NULL\"\n        );\n    }\n\n    // If `rawAmount` encodes a proportion of `totalSellAmount`, this function\n    // converts it to an absolute quantity. Caps the normalized amount to\n    // the remaining sell amount (`totalSellAmount - soldAmount`).\n    function _normalizeSellAmount(\n        uint256 rawAmount,\n        uint256 totalSellAmount,\n        uint256 soldAmount\n    )\n        private\n        pure\n        returns (uint256 normalized)\n    {\n        if ((rawAmount & HIGH_BIT) == HIGH_BIT) {\n            // If the high bit of `rawAmount` is set then the lower 255 bits\n            // specify a fraction of `totalSellAmount`.\n            return LibSafeMathV06.min256(\n                totalSellAmount\n                    * LibSafeMathV06.min256(rawAmount & LOWER_255_BITS, 1e18)\n                    / 1e18,\n                totalSellAmount.safeSub(soldAmount)\n            );\n        } else {\n            return LibSafeMathV06.min256(\n                rawAmount,\n                totalSellAmount.safeSub(soldAmount)\n            );\n        }\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "../../external/ILiquidityProviderSandbox.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../vendor/ILiquidityProvider.sol\";\n\n\ninterface ILiquidityProviderSandbox {\n\n    /// @dev Calls `sellTokenForToken` on the given `provider` contract to\n    ///      trigger a trade.\n    /// @param provider The address of the on-chain liquidity provider.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\n    function executeSellTokenForToken(\n        ILiquidityProvider provider,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external;\n\n    /// @dev Calls `sellEthForToken` on the given `provider` contract to\n    ///      trigger a trade.\n    /// @param provider The address of the on-chain liquidity provider.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\n    function executeSellEthForToken(\n        ILiquidityProvider provider,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external;\n\n    /// @dev Calls `sellTokenForEth` on the given `provider` contract to\n    ///      trigger a trade.\n    /// @param provider The address of the on-chain liquidity provider.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Auxiliary data supplied to the `provider` contract.\n    function executeSellTokenForEth(\n        ILiquidityProvider provider,\n        IERC20TokenV06 inputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external;\n}\n",
        "../../vendor/ILiquidityProvider.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n",
        "../../fixins/FixinCommon.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\nimport \"../features/interfaces/IOwnableFeature.sol\";\nimport \"../features/interfaces/ISimpleFunctionRegistryFeature.sol\";\n\n\n/// @dev Common feature utilities.\nabstract contract FixinCommon {\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The implementation address of this feature.\n    address internal immutable _implementation;\n\n    /// @dev The caller must be this contract.\n    modifier onlySelf() virtual {\n        if (msg.sender != address(this)) {\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\n        }\n        _;\n    }\n\n    /// @dev The caller of this function must be the owner.\n    modifier onlyOwner() virtual {\n        {\n            address owner = IOwnableFeature(address(this)).owner();\n            if (msg.sender != owner) {\n                LibOwnableRichErrors.OnlyOwnerError(\n                    msg.sender,\n                    owner\n                ).rrevert();\n            }\n        }\n        _;\n    }\n\n    constructor() internal {\n        // Remember this feature's original address.\n        _implementation = address(this);\n    }\n\n    /// @dev Registers a function implemented by this feature at `_implementation`.\n    ///      Can and should only be called within a `migrate()`.\n    /// @param selector The selector of the function whose implementation\n    ///        is at `_implementation`.\n    function _registerFeatureFunction(bytes4 selector)\n        internal\n    {\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\n    }\n\n    /// @dev Encode a feature version as a `uint256`.\n    /// @param major The major version number of the feature.\n    /// @param minor The minor version number of the feature.\n    /// @param revision The revision number of the feature.\n    /// @return encodedVersion The encoded version number.\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\n        internal\n        pure\n        returns (uint256 encodedVersion)\n    {\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\n    }\n}\n",
        "../../errors/LibCommonRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibCommonRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyCallableBySelfError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableBySelfError(address)\")),\n            sender\n        );\n    }\n\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IllegalReentrancyError(bytes4,uint256)\")),\n            selector,\n            reentrancyFlags\n        );\n    }\n}\n",
        "../../errors/LibOwnableRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOwnerError(address,address)\")),\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n        );\n    }\n\n    function MigrateCallFailedError(address target, bytes memory resultData)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MigrateCallFailedError(address,bytes)\")),\n            target,\n            resultData\n        );\n    }\n}\n",
        "../interfaces/IOwnableFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\n/// @dev Owner management and migration features.\ninterface IOwnableFeature is\n    IOwnableV06\n{\n    /// @dev Emitted when `migrate()` is called.\n    /// @param caller The caller of `migrate()`.\n    /// @param migrator The migration contract.\n    /// @param newOwner The address of the new owner.\n    event Migrated(address caller, address migrator, address newOwner);\n\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\n    ///      The result of the function being called should be the magic bytes\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\n    ///      The owner will be temporarily set to `address(this)` inside the call.\n    ///      Before returning, the owner will be set to `newOwner`.\n    /// @param target The migrator contract address.\n    /// @param newOwner The address of the new owner.\n    /// @param data The call data.\n    function migrate(address target, bytes calldata data, address newOwner) external;\n}\n",
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n",
        "../interfaces/ISimpleFunctionRegistryFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic registry management features.\ninterface ISimpleFunctionRegistryFeature {\n\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\n    /// @param selector The function selector.\n    /// @param oldImpl The implementation contract address being replaced.\n    /// @param newImpl The replacement implementation contract address.\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\n\n    /// @dev Roll back to a prior implementation of a function.\n    /// @param selector The function selector.\n    /// @param targetImpl The address of an older implementation of the function.\n    function rollback(bytes4 selector, address targetImpl) external;\n\n    /// @dev Register or replace a function.\n    /// @param selector The function selector.\n    /// @param impl The implementation contract for the function.\n    function extend(bytes4 selector, address impl) external;\n\n    /// @dev Retrieve the length of the rollback history for a function.\n    /// @param selector The function selector.\n    /// @return rollbackLength The number of items in the rollback history for\n    ///         the function.\n    function getRollbackLength(bytes4 selector)\n        external\n        view\n        returns (uint256 rollbackLength);\n\n    /// @dev Retrieve an entry in the rollback history for a function.\n    /// @param selector The function selector.\n    /// @param idx The index in the rollback history.\n    /// @return impl An implementation address for the function at\n    ///         index `idx`.\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\n        external\n        view\n        returns (address impl);\n}\n",
        "../../fixins/FixinEIP712.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\n/// @dev EIP712 helpers for features.\nabstract contract FixinEIP712 {\n\n    /// @dev The domain hash separator for the entire exchange proxy.\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\n\n    constructor(address zeroExAddress) internal {\n        // Compute `EIP712_DOMAIN_SEPARATOR`\n        {\n            uint256 chainId;\n            assembly { chainId := chainid() }\n            EIP712_DOMAIN_SEPARATOR = keccak256(\n                abi.encode(\n                    keccak256(\n                        \"EIP712Domain(\"\n                            \"string name,\"\n                            \"string version,\"\n                            \"uint256 chainId,\"\n                            \"address verifyingContract\"\n                        \")\"\n                    ),\n                    keccak256(\"ZeroEx\"),\n                    keccak256(\"1.0.0\"),\n                    chainId,\n                    zeroExAddress\n                )\n            );\n        }\n    }\n\n    function _getEIP712Hash(bytes32 structHash)\n        internal\n        view\n        returns (bytes32 eip712Hash)\n    {\n        return keccak256(abi.encodePacked(\n            hex\"1901\",\n            EIP712_DOMAIN_SEPARATOR,\n            structHash\n        ));\n    }\n}\n",
        "../../migrations/LibMigrate.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\nlibrary LibMigrate {\n\n    /// @dev Magic bytes returned by a migrator to indicate success.\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\n    /// @param target The call target.\n    /// @param data The call data.\n    function delegatecallMigrateFunction(\n        address target,\n        bytes memory data\n    )\n        internal\n    {\n        (bool success, bytes memory resultData) = target.delegatecall(data);\n        if (!success ||\n            resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\n        {\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\n        }\n    }\n}\n",
        "../interfaces/IFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic interface for a feature contract.\ninterface IFeature {\n\n    // solhint-disable func-name-mixedcase\n\n    /// @dev The name of this feature set.\n    function FEATURE_NAME() external view returns (string memory name);\n\n    /// @dev The version of this feature set.\n    function FEATURE_VERSION() external view returns (uint256 version);\n}\n",
        "../interfaces/IMultiplexFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IMultiplexFeature {\n    // Identifies the type of subcall.\n    enum MultiplexSubcall {\n        Invalid,\n        RFQ,\n        OTC,\n        UniswapV2,\n        UniswapV3,\n        LiquidityProvider,\n        TransformERC20,\n        BatchSell,\n        MultiHopSell\n    }\n\n    // Parameters for a batch sell.\n    struct BatchSellParams {\n        // The token being sold.\n        IERC20TokenV06 inputToken;\n        // The token being bought.\n        IERC20TokenV06 outputToken;\n        // The amount of `inputToken` to sell.\n        uint256 sellAmount;\n        // The nested calls to perform.\n        BatchSellSubcall[] calls;\n        // Whether to use the Exchange Proxy's balance\n        // of input tokens.\n        bool useSelfBalance;\n        // The recipient of the bought output tokens.\n        address recipient;\n    }\n\n    // Represents a constituent call of a batch sell.\n    struct BatchSellSubcall {\n        // The function to call.\n        MultiplexSubcall id;\n        // Amount of input token to sell. If the highest bit is 1,\n        // this value represents a proportion of the total\n        // `sellAmount` of the batch sell. See `_normalizeSellAmount`\n        // for details.\n        uint256 sellAmount;\n        // ABI-encoded parameters needed to perform the call.\n        bytes data;\n    }\n\n    // Parameters for a multi-hop sell.\n    struct MultiHopSellParams {\n        // The sell path, i.e.\n        // tokens = [inputToken, hopToken1, ..., hopTokenN, outputToken]\n        address[] tokens;\n        // The amount of `tokens[0]` to sell.\n        uint256 sellAmount;\n        // The nested calls to perform.\n        MultiHopSellSubcall[] calls;\n        // Whether to use the Exchange Proxy's balance\n        // of input tokens.\n        bool useSelfBalance;\n        // The recipient of the bought output tokens.\n        address recipient;\n    }\n\n    // Represents a constituent call of a multi-hop sell.\n    struct MultiHopSellSubcall {\n        // The function to call.\n        MultiplexSubcall id;\n        // ABI-encoded parameters needed to perform the call.\n        bytes data;\n    }\n\n    struct BatchSellState {\n        // Tracks the amount of input token sold.\n        uint256 soldAmount;\n        // Tracks the amount of output token bought.\n        uint256 boughtAmount;\n    }\n\n    struct MultiHopSellState {\n        // This variable is used for the input and output amounts of\n        // each hop. After the final hop, this will contain the output\n        // amount of the multi-hop sell.\n        uint256 outputTokenAmount;\n        // For each hop in a multi-hop sell, `from` is the\n        // address that holds the input tokens of the hop,\n        // `to` is the address that receives the output tokens\n        // of the hop.\n        // See `_computeHopTarget` for details.\n        address from;\n        address to;\n        // The index of the current hop in the multi-hop chain.\n        uint256 hopIndex;\n    }\n\n    /// @dev Sells attached ETH for `outputToken` using the provided\n    ///      calls.\n    /// @param outputToken The token to buy.\n    /// @param calls The calls to use to sell the attached ETH.\n    /// @param minBuyAmount The minimum amount of `outputToken` that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function multiplexBatchSellEthForToken(\n        IERC20TokenV06 outputToken,\n        BatchSellSubcall[] calldata calls,\n        uint256 minBuyAmount\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Sells `sellAmount` of the given `inputToken` for ETH\n    ///      using the provided calls.\n    /// @param inputToken The token to sell.\n    /// @param calls The calls to use to sell the input tokens.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of ETH that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of ETH bought.\n    function multiplexBatchSellTokenForEth(\n        IERC20TokenV06 inputToken,\n        BatchSellSubcall[] calldata calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Sells `sellAmount` of the given `inputToken` for\n    ///      `outputToken` using the provided calls.\n    /// @param inputToken The token to sell.\n    /// @param outputToken The token to buy.\n    /// @param calls The calls to use to sell the input tokens.\n    /// @param sellAmount The amount of `inputToken` to sell.\n    /// @param minBuyAmount The minimum amount of `outputToken`\n    ///        that must be bought for this function to not revert.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function multiplexBatchSellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        BatchSellSubcall[] calldata calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Sells attached ETH via the given sequence of tokens\n    ///      and calls. `tokens[0]` must be WETH.\n    ///      The last token in `tokens` is the output token that\n    ///      will ultimately be sent to `msg.sender`\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param minBuyAmount The minimum amount of output tokens that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of output tokens bought.\n    function multiplexMultiHopSellEthForToken(\n        address[] calldata tokens,\n        MultiHopSellSubcall[] calldata calls,\n        uint256 minBuyAmount\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Sells `sellAmount` of the input token (`tokens[0]`)\n    ///      for ETH via the given sequence of tokens and calls.\n    ///      The last token in `tokens` must be WETH.\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param minBuyAmount The minimum amount of ETH that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of ETH bought.\n    function multiplexMultiHopSellTokenForEth(\n        address[] calldata tokens,\n        MultiHopSellSubcall[] calldata calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Sells `sellAmount` of the input token (`tokens[0]`)\n    ///      via the given sequence of tokens and calls.\n    ///      The last token in `tokens` is the output token that\n    ///      will ultimately be sent to `msg.sender`\n    /// @param tokens The sequence of tokens to use for the sell,\n    ///        i.e. `tokens[i]` will be sold for `tokens[i+1]` via\n    ///        `calls[i]`.\n    /// @param calls The sequence of calls to use for the sell.\n    /// @param minBuyAmount The minimum amount of output tokens that\n    ///        must be bought for this function to not revert.\n    /// @return boughtAmount The amount of output tokens bought.\n    function multiplexMultiHopSellTokenForToken(\n        address[] calldata tokens,\n        MultiHopSellSubcall[] calldata calls,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n",
        "./MultiplexLiquidityProvider.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../external/ILiquidityProviderSandbox.sol\";\nimport \"../../fixins/FixinCommon.sol\";\nimport \"../../fixins/FixinTokenSpender.sol\";\nimport \"../../vendor/ILiquidityProvider.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\n\n\nabstract contract MultiplexLiquidityProvider is\n    FixinCommon,\n    FixinTokenSpender\n{\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n\n    // Same event fired by LiquidityProviderFeature\n    event LiquidityProviderSwap(\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        address provider,\n        address recipient\n    );\n\n    /// @dev The sandbox contract address.\n    ILiquidityProviderSandbox private immutable SANDBOX;\n\n    constructor(ILiquidityProviderSandbox sandbox)\n        internal\n    {\n        SANDBOX = sandbox;\n    }\n\n    // A payable external function that we can delegatecall to\n    // swallow reverts and roll back the input token transfer.\n    function _batchSellLiquidityProviderExternal(\n        IMultiplexFeature.BatchSellParams calldata params,\n        bytes calldata wrappedCallData,\n        uint256 sellAmount\n    )\n        external\n        payable\n        returns (uint256 boughtAmount)\n    {\n        // Revert if not a delegatecall.\n        require(\n            address(this) != _implementation,\n            \"MultiplexLiquidityProvider::_batchSellLiquidityProviderExternal/ONLY_DELEGATECALL\"\n        );\n\n        // Decode the provider address and auxiliary data.\n        (address provider, bytes memory auxiliaryData) = abi.decode(\n            wrappedCallData,\n            (address, bytes)\n        );\n\n        if (params.useSelfBalance) {\n            // If `useSelfBalance` is true, use the input tokens\n            // held by `address(this)`.\n            _transferERC20Tokens(\n                params.inputToken,\n                provider,\n                sellAmount\n            );\n        } else {\n            // Otherwise, transfer the input tokens from `msg.sender`.\n            _transferERC20TokensFrom(\n                params.inputToken,\n                msg.sender,\n                provider,\n                sellAmount\n            );\n        }\n        // Cache the recipient's balance of the output token.\n        uint256 balanceBefore = params.outputToken\n            .balanceOf(params.recipient);\n        // Execute the swap.\n        SANDBOX.executeSellTokenForToken(\n            ILiquidityProvider(provider),\n            params.inputToken,\n            params.outputToken,\n            params.recipient,\n            0,\n            auxiliaryData\n        );\n        // Compute amount of output token received by the\n        // recipient.\n        boughtAmount = params.outputToken\n            .balanceOf(params.recipient)\n            .safeSub(balanceBefore);\n\n        emit LiquidityProviderSwap(\n            address(params.inputToken),\n            address(params.outputToken),\n            sellAmount,\n            boughtAmount,\n            provider,\n            params.recipient\n        );\n    }\n\n    function _batchSellLiquidityProvider(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        // Swallow reverts\n        (bool success, bytes memory resultData) = _implementation.delegatecall(\n            abi.encodeWithSelector(\n                this._batchSellLiquidityProviderExternal.selector,\n                params,\n                wrappedCallData,\n                sellAmount\n            )\n        );\n        if (success) {\n            // Decode the output token amount on success.\n            uint256 boughtAmount = abi.decode(resultData, (uint256));\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(sellAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(boughtAmount);\n        }\n    }\n\n    // This function is called after tokens have already been transferred\n    // into the liquidity provider contract (in the previous hop).\n    function _multiHopSellLiquidityProvider(\n        IMultiplexFeature.MultiHopSellState memory state,\n        IMultiplexFeature.MultiHopSellParams memory params,\n        bytes memory wrappedCallData\n    )\n        internal\n    {\n        IERC20TokenV06 inputToken = IERC20TokenV06(params.tokens[state.hopIndex]);\n        IERC20TokenV06 outputToken = IERC20TokenV06(params.tokens[state.hopIndex + 1]);\n        // Decode the provider address and auxiliary data.\n        (address provider, bytes memory auxiliaryData) = abi.decode(\n            wrappedCallData,\n            (address, bytes)\n        );\n        // Cache the recipient's balance of the output token.\n        uint256 balanceBefore = outputToken\n            .balanceOf(state.to);\n        // Execute the swap.\n        SANDBOX.executeSellTokenForToken(\n            ILiquidityProvider(provider),\n            inputToken,\n            outputToken,\n            state.to,\n            0,\n            auxiliaryData\n        );\n        // The previous `ouputTokenAmount` was effectively the\n        // input amount for this call. Cache the value before\n        // overwriting it with the new output token amount so\n        // that both the input and ouput amounts can be in the\n        // `LiquidityProviderSwap` event.\n        uint256 sellAmount = state.outputTokenAmount;\n        // Compute amount of output token received by the\n        // recipient.\n        state.outputTokenAmount = outputToken\n            .balanceOf(state.to)\n            .safeSub(balanceBefore);\n\n        emit LiquidityProviderSwap(\n            address(inputToken),\n            address(outputToken),\n            sellAmount,\n            state.outputTokenAmount,\n            provider,\n            state.to\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        // Revert if the call reverted.\n        if (!didSucceed) {\n            LibRichErrorsV06.rrevert(resultData);\n        }\n        // If we get back 0 returndata, this may be a non-standard ERC-20 that\n        // does not return a boolean. Check that it at least contains code.\n        if (resultData.length == 0) {\n            uint256 size;\n            assembly { size := extcodesize(target) }\n            require(size > 0, \"invalid token address, contains no code\");\n            return;\n        }\n        // If we get back at least 32 bytes, we know the target address\n        // contains code, and we assume it is a token that returned a boolean\n        // success value, which must be true.\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return;\n            } else {\n                LibRichErrorsV06.rrevert(resultData);\n            }\n        }\n        // If 0 < returndatasize < 32, the target is a contract, but not a\n        // valid token.\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "../../fixins/FixinTokenSpender.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\n/// @dev Helpers for moving tokens around.\nabstract contract FixinTokenSpender {\n\n    // Mask of the lower 20 bytes of a bytes32.\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\n\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _transferERC20TokensFrom(\n        IERC20TokenV06 token,\n        address owner,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        require(address(token) != address(this), \"FixinTokenSpender/CANNOT_INVOKE_SELF\");\n\n        assembly {\n            let ptr := mload(0x40) // free memory pointer\n\n            // selector for transferFrom(address,address,uint256)\n            mstore(ptr, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(ptr, 0x04), and(owner, ADDRESS_MASK))\n            mstore(add(ptr, 0x24), and(to, ADDRESS_MASK))\n            mstore(add(ptr, 0x44), amount)\n\n            let success := call(\n                gas(),\n                and(token, ADDRESS_MASK),\n                0,\n                ptr,\n                0x64,\n                ptr,\n                32\n            )\n\n            let rdsize := returndatasize()\n\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\n            // but some don't. We accept 0-length return data as success, or at\n            // least 32 bytes that starts with a 32-byte boolean true.\n            success := and(\n                success,                             // call itself succeeded\n                or(\n                    iszero(rdsize),                  // no return data, or\n                    and(\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\n                        eq(mload(ptr), 1)            // starts with uint256(1)\n                    )\n                )\n            )\n\n            if iszero(success) {\n                returndatacopy(ptr, 0, rdsize)\n                revert(ptr, rdsize)\n            }\n        }\n    }\n\n    /// @dev Transfers ERC20 tokens from ourselves to `to`.\n    /// @param token The token to spend.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _transferERC20Tokens(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        require(address(token) != address(this), \"FixinTokenSpender/CANNOT_INVOKE_SELF\");\n\n        assembly {\n            let ptr := mload(0x40) // free memory pointer\n\n            // selector for transfer(address,uint256)\n            mstore(ptr, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(ptr, 0x04), and(to, ADDRESS_MASK))\n            mstore(add(ptr, 0x24), amount)\n\n            let success := call(\n                gas(),\n                and(token, ADDRESS_MASK),\n                0,\n                ptr,\n                0x44,\n                ptr,\n                32\n            )\n\n            let rdsize := returndatasize()\n\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\n            // but some don't. We accept 0-length return data as success, or at\n            // least 32 bytes that starts with a 32-byte boolean true.\n            success := and(\n                success,                             // call itself succeeded\n                or(\n                    iszero(rdsize),                  // no return data, or\n                    and(\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\n                        eq(mload(ptr), 1)            // starts with uint256(1)\n                    )\n                )\n            )\n\n            if iszero(success) {\n                returndatacopy(ptr, 0, rdsize)\n                revert(ptr, rdsize)\n            }\n        }\n    }\n\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\n    ///      pulled from `owner` by this address.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @return amount The amount of tokens that can be pulled.\n    function _getSpendableERC20BalanceOf(\n        IERC20TokenV06 token,\n        address owner\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        return LibSafeMathV06.min256(\n            token.allowance(owner, address(this)),\n            token.balanceOf(owner)\n        );\n    }\n}\n",
        "./MultiplexOtc.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../fixins/FixinEIP712.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\nimport \"../interfaces/IOtcOrdersFeature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\n\n\nabstract contract MultiplexOtc is\n    FixinEIP712\n{\n    using LibSafeMathV06 for uint256;\n\n    event ExpiredOtcOrder(\n        bytes32 orderHash,\n        address maker,\n        uint64 expiry\n    );\n\n    function _batchSellOtcOrder(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        // Decode the Otc order and signature.\n        (\n            LibNativeOrder.OtcOrder memory order,\n            LibSignature.Signature memory signature\n        ) = abi.decode(\n            wrappedCallData,\n            (LibNativeOrder.OtcOrder, LibSignature.Signature)\n        );\n        // Validate tokens.\n        require(\n            order.takerToken == params.inputToken &&\n            order.makerToken == params.outputToken,\n            \"MultiplexOtc::_batchSellOtcOrder/OTC_ORDER_INVALID_TOKENS\"\n        );\n        // Pre-emptively check if the order is expired.\n        uint64 expiry = uint64(order.expiryAndNonce >> 192);\n        if (expiry <= uint64(block.timestamp)) {\n            bytes32 orderHash = _getEIP712Hash(\n                LibNativeOrder.getOtcOrderStructHash(order)\n            );\n            emit ExpiredOtcOrder(\n                orderHash,\n                order.maker,\n                expiry\n            );\n            return;\n        }\n        // Try filling the Otc order. Swallows reverts.\n        try\n            IOtcOrdersFeature(address(this))._fillOtcOrder\n                (\n                    order,\n                    signature,\n                    sellAmount.safeDowncastToUint128(),\n                    msg.sender,\n                    params.useSelfBalance,\n                    params.recipient\n                )\n            returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n        {\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(takerTokenFilledAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(makerTokenFilledAmount);\n        } catch {}\n    }\n}\n",
        "../interfaces/IOtcOrdersFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibNativeOrder.sol\";\nimport \"../libs/LibSignature.sol\";\n\n\n/// @dev Feature for interacting with OTC orders.\ninterface IOtcOrdersFeature {\n\n    /// @dev Emitted whenever an `OtcOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    event OtcOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address makerToken,\n        address takerToken,\n        uint128 makerTokenFilledAmount,\n        uint128 takerTokenFilledAmount\n    );\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrder(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    ///      Unwraps bought WETH into ETH before sending it to \n    ///      the taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrderForEth(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an OTC order whose taker token is WETH for up\n    ///      to `msg.value`.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrderWithEth(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fully fill an OTC order. \"Meta-transaction\" variant,\n    ///      requires order to be signed by both maker and taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerSignature The order signature from the taker.\n    function fillTakerSignedOtcOrder(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        LibSignature.Signature calldata takerSignature\n    )\n        external;\n\n    /// @dev Fully fill an OTC order. \"Meta-transaction\" variant,\n    ///      requires order to be signed by both maker and taker.\n    ///      Unwraps bought WETH into ETH before sending it to \n    ///      the taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerSignature The order signature from the taker.\n    function fillTakerSignedOtcOrderForEth(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        LibSignature.Signature calldata takerSignature\n    )\n        external;\n\n    /// @dev Fills multiple taker-signed OTC orders.\n    /// @param orders Array of OTC orders.\n    /// @param makerSignatures Array of maker signatures for each order.\n    /// @param takerSignatures Array of taker signatures for each order.\n    /// @param unwrapWeth Array of booleans representing whether or not \n    ///        to unwrap bought WETH into ETH for each order. Should be set \n    ///        to false if the maker token is not WETH.\n    /// @return successes Array of booleans representing whether or not\n    ///         each order in `orders` was filled successfully.\n    function batchFillTakerSignedOtcOrders(\n        LibNativeOrder.OtcOrder[] calldata orders,\n        LibSignature.Signature[] calldata makerSignatures,\n        LibSignature.Signature[] calldata takerSignatures,\n        bool[] calldata unwrapWeth\n    )\n        external\n        returns (bool[] memory successes);\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    ///      Internal variant.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @param taker The address to fill the order in the context of.\n    /// @param useSelfBalance Whether to use the Exchange Proxy's balance\n    ///        of input tokens.\n    /// @param recipient The recipient of the bought maker tokens.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillOtcOrder(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        bool useSelfBalance,\n        address recipient\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Get the order info for an OTC order.\n    /// @param order The OTC order.\n    /// @return orderInfo Info about the order.\n    function getOtcOrderInfo(LibNativeOrder.OtcOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OtcOrderInfo memory orderInfo);\n\n    /// @dev Get the canonical hash of an OTC order.\n    /// @param order The OTC order.\n    /// @return orderHash The order hash.\n    function getOtcOrderHash(LibNativeOrder.OtcOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the last nonce used for a particular\n    ///      tx.origin address and nonce bucket.\n    /// @param txOrigin The address.\n    /// @param nonceBucket The nonce bucket index.\n    /// @return lastNonce The last nonce value used.\n    function lastOtcTxOriginNonce(address txOrigin, uint64 nonceBucket)\n        external\n        view\n        returns (uint128 lastNonce);\n}\n",
        "../libs/LibNativeOrder.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../errors/LibNativeOrdersRichErrors.sol\";\n\n\n/// @dev A library for common native order operations.\nlibrary LibNativeOrder {\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An OTC limit order.\n    struct OtcOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        uint256 expiryAndNonce; // [uint64 expiry, uint64 nonceBucket, uint128 nonce]\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Info on an OTC order.\n    struct OtcOrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n    }\n\n    uint256 private constant UINT_128_MASK = (1 << 128) - 1;\n    uint256 private constant UINT_64_MASK = (1 << 64) - 1;\n    uint256 private constant ADDRESS_MASK = (1 << 160) - 1;\n\n    // The type hash for limit orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"LimitOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"uint128 takerTokenFeeAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address sender,\",\n    //       \"address feeRecipient,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _LIMIT_ORDER_TYPEHASH =\n        0xce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d49;\n\n    // The type hash for RFQ orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"RfqOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _RFQ_ORDER_TYPEHASH =\n        0xe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da9;\n\n    // The type hash for OTC orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"OtcOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"uint256 expiryAndNonce\"\n    //     \")\"\n    // ))\n    uint256 private constant _OTC_ORDER_TYPEHASH =\n        0x2f754524de756ae72459efbe1ec88c19a745639821de528ac3fb88f9e65e35c8;\n\n    /// @dev Get the struct hash of a limit order.\n    /// @param order The limit order.\n    /// @return structHash The struct hash of the order.\n    function getLimitOrderStructHash(LimitOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.takerTokenFeeAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.sender,\n        //   order.feeRecipient,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _LIMIT_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.takerTokenFeeAmount;\n            mstore(add(mem, 0xA0), and(UINT_128_MASK, mload(add(order, 0x80))))\n            // order.maker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.taker;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.sender;\n            mstore(add(mem, 0x100), and(ADDRESS_MASK, mload(add(order, 0xE0))))\n            // order.feeRecipient;\n            mstore(add(mem, 0x120), and(ADDRESS_MASK, mload(add(order, 0x100))))\n            // order.pool;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            // order.expiry;\n            mstore(add(mem, 0x160), and(UINT_64_MASK, mload(add(order, 0x140))))\n            // order.salt;\n            mstore(add(mem, 0x180), mload(add(order, 0x160)))\n            structHash := keccak256(mem, 0x1A0)\n        }\n    }\n\n    /// @dev Get the struct hash of a RFQ order.\n    /// @param order The RFQ order.\n    /// @return structHash The struct hash of the order.\n    function getRfqOrderStructHash(RfqOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _RFQ_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.pool;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            // order.expiry;\n            mstore(add(mem, 0x120), and(UINT_64_MASK, mload(add(order, 0x100))))\n            // order.salt;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            structHash := keccak256(mem, 0x160)\n        }\n    }\n\n    /// @dev Get the struct hash of an OTC order.\n    /// @param order The OTC order.\n    /// @return structHash The struct hash of the order.\n    function getOtcOrderStructHash(OtcOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.expiryAndNonce,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _OTC_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.expiryAndNonce;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            structHash := keccak256(mem, 0x120)\n        }\n    }\n\n    /// @dev Refund any leftover protocol fees in `msg.value` to `msg.sender`.\n    /// @param ethProtocolFeePaid How much ETH was paid in protocol fees.\n    function refundExcessProtocolFeeToSender(uint256 ethProtocolFeePaid)\n        internal\n    {\n        if (msg.value > ethProtocolFeePaid && msg.sender != address(this)) {\n            uint256 refundAmount = msg.value.safeSub(ethProtocolFeePaid);\n            (bool success,) = msg\n                .sender\n                .call{value: refundAmount}(\"\");\n            if (!success) {\n                LibNativeOrdersRichErrors.ProtocolFeeRefundFailed(\n                    msg.sender,\n                    refundAmount\n                ).rrevert();\n            }\n        }\n    }\n}\n",
        "../../errors/LibNativeOrdersRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibNativeOrdersRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function ProtocolFeeRefundFailed(\n        address receiver,\n        uint256 refundAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"ProtocolFeeRefundFailed(address,uint256)\")),\n            receiver,\n            refundAmount\n        );\n    }\n\n    function OrderNotFillableByOriginError(\n        bytes32 orderHash,\n        address txOrigin,\n        address orderTxOrigin\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByOriginError(bytes32,address,address)\")),\n            orderHash,\n            txOrigin,\n            orderTxOrigin\n        );\n    }\n\n    function OrderNotFillableError(\n        bytes32 orderHash,\n        uint8 orderStatus\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableError(bytes32,uint8)\")),\n            orderHash,\n            orderStatus\n        );\n    }\n\n    function OrderNotSignedByMakerError(\n        bytes32 orderHash,\n        address signer,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotSignedByMakerError(bytes32,address,address)\")),\n            orderHash,\n            signer,\n            maker\n        );\n    }\n\n    function InvalidSignerError(\n        address maker,\n        address signer\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidSignerError(address,address)\")),\n            maker,\n            signer\n        );\n    }\n\n    function OrderNotFillableBySenderError(\n        bytes32 orderHash,\n        address sender,\n        address orderSender\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableBySenderError(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            orderSender\n        );\n    }\n\n    function OrderNotFillableByTakerError(\n        bytes32 orderHash,\n        address taker,\n        address orderTaker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByTakerError(bytes32,address,address)\")),\n            orderHash,\n            taker,\n            orderTaker\n        );\n    }\n\n    function CancelSaltTooLowError(\n        uint256 minValidSalt,\n        uint256 oldMinValidSalt\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"CancelSaltTooLowError(uint256,uint256)\")),\n            minValidSalt,\n            oldMinValidSalt\n        );\n    }\n\n    function FillOrKillFailedError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"FillOrKillFailedError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n\n    function OnlyOrderMakerAllowed(\n        bytes32 orderHash,\n        address sender,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOrderMakerAllowed(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            maker\n        );\n    }\n\n    function BatchFillIncompleteError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"BatchFillIncompleteError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n}\n",
        "../libs/LibSignature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../../errors/LibSignatureRichErrors.sol\";\n\n\n/// @dev A library for validating signatures.\nlibrary LibSignature {\n    using LibRichErrorsV06 for bytes;\n\n    // '\\x19Ethereum Signed Message:\\n32\\x00\\x00\\x00\\x00' in a word.\n    uint256 private constant ETH_SIGN_HASH_PREFIX =\n        0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\n    ///      The valid range is given by fig (282) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\n    ///      The valid range is given by fig (283) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Retrieve the signer of a signature.\n    ///      Throws if the signature can't be validated.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    /// @return recovered The recovered signer address.\n    function getSignerOfHash(\n        bytes32 hash,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address recovered)\n    {\n        // Ensure this is a signature type that can be validated against a hash.\n        _validateHashCompatibleSignature(hash, signature);\n\n        if (signature.signatureType == SignatureType.EIP712) {\n            // Signed using EIP712\n            recovered = ecrecover(\n                hash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\n            // Signed using `eth_sign`\n            // Need to hash `hash` with \"\\x19Ethereum Signed Message:\\n32\" prefix\n            // in packed encoding.\n            bytes32 ethSignHash;\n            assembly {\n                // Use scratch space\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\n                mstore(28, hash) // length of 32 bytes\n                ethSignHash := keccak256(0, 60)\n            }\n            recovered = ecrecover(\n                ethSignHash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        }\n        // `recovered` can be null if the signature values are out of range.\n        if (recovered == address(0)) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n    }\n\n    /// @dev Validates that a signature is compatible with a hash signee.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    function _validateHashCompatibleSignature(\n        bytes32 hash,\n        Signature memory signature\n    )\n        private\n        pure\n    {\n        // Ensure the r and s are within malleability limits.\n        if (uint256(signature.r) >= ECDSA_SIGNATURE_R_LIMIT ||\n            uint256(signature.s) >= ECDSA_SIGNATURE_S_LIMIT)\n        {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n\n        // Always illegal signature.\n        if (signature.signatureType == SignatureType.ILLEGAL) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\n                hash\n            ).rrevert();\n        }\n\n        // Always invalid.\n        if (signature.signatureType == SignatureType.INVALID) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\n                hash\n            ).rrevert();\n        }\n\n        // Solidity should check that the signature type is within enum range for us\n        // when abi-decoding.\n    }\n}\n",
        "../../errors/LibSignatureRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSignatureRichErrors {\n\n    enum SignatureValidationErrorCodes {\n        ALWAYS_INVALID,\n        INVALID_LENGTH,\n        UNSUPPORTED,\n        ILLEGAL,\n        WRONG_SIGNER,\n        BAD_SIGNATURE_DATA\n    }\n\n    // solhint-disable func-name-mixedcase\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32,address,bytes)\")),\n            code,\n            hash,\n            signerAddress,\n            signature\n        );\n    }\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32)\")),\n            code,\n            hash\n        );\n    }\n}\n",
        "./MultiplexRfq.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../fixins/FixinEIP712.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\nimport \"../interfaces/INativeOrdersFeature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\n\n\nabstract contract MultiplexRfq is\n    FixinEIP712\n{\n    using LibSafeMathV06 for uint256;\n\n    event ExpiredRfqOrder(\n        bytes32 orderHash,\n        address maker,\n        uint64 expiry\n    );\n\n    function _batchSellRfqOrder(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        // Decode the RFQ order and signature.\n        (\n            LibNativeOrder.RfqOrder memory order,\n            LibSignature.Signature memory signature\n        ) = abi.decode(\n            wrappedCallData,\n            (LibNativeOrder.RfqOrder, LibSignature.Signature)\n        );\n        // Pre-emptively check if the order is expired.\n        if (order.expiry <= uint64(block.timestamp)) {\n            bytes32 orderHash = _getEIP712Hash(\n                LibNativeOrder.getRfqOrderStructHash(order)\n            );\n            emit ExpiredRfqOrder(\n                orderHash,\n                order.maker,\n                order.expiry\n            );\n            return;\n        }\n        // Validate tokens.\n        require(\n            order.takerToken == params.inputToken &&\n            order.makerToken == params.outputToken,\n            \"MultiplexRfq::_batchSellRfqOrder/RFQ_ORDER_INVALID_TOKENS\"\n        );\n        // Try filling the RFQ order. Swallows reverts.\n        try\n            INativeOrdersFeature(address(this))._fillRfqOrder\n                (\n                    order,\n                    signature,\n                    sellAmount.safeDowncastToUint128(),\n                    msg.sender,\n                    params.useSelfBalance,\n                    params.recipient\n                )\n            returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n        {\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(takerTokenFilledAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(makerTokenFilledAmount);\n        } catch {}\n    }\n}\n",
        "../interfaces/INativeOrdersFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\nimport \"./INativeOrdersEvents.sol\";\n\n\n/// @dev Feature for interacting with limit orders.\ninterface INativeOrdersFeature is\n    INativeOrdersEvents\n{\n\n    /// @dev Transfers protocol fees from the `FeeCollector` pools into\n    ///      the staking contract.\n    /// @param poolIds Staking pool IDs\n    function transferProtocolFeesForPools(bytes32[] calldata poolIds)\n        external;\n\n    /// @dev Fill a limit order. The taker and sender will be the caller.\n    /// @param order The limit order. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill a limit order. Internal variant. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      `msg.sender` (not `sender`).\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param sender The order sender.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        address sender\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order. Internal variant.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param useSelfBalance Whether to use the ExchangeProxy's transient\n    ///        balance of taker tokens to fill the order.\n    /// @param recipient The recipient of the maker tokens.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        bool useSelfBalance,\n        address recipient\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Cancel a single limit order. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The limit order.\n    function cancelLimitOrder(LibNativeOrder.LimitOrder calldata order)\n        external;\n\n    /// @dev Cancel a single RFQ order. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The RFQ order.\n    function cancelRfqOrder(LibNativeOrder.RfqOrder calldata order)\n        external;\n\n    /// @dev Mark what tx.origin addresses are allowed to fill an order that\n    ///      specifies the message sender as its txOrigin.\n    /// @param origins An array of origin addresses to update.\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedRfqOrigins(address[] memory origins, bool allowed)\n        external;\n\n    /// @dev Cancel multiple limit orders. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The limit orders.\n    function batchCancelLimitOrders(LibNativeOrder.LimitOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel multiple RFQ orders. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The RFQ orders.\n    function batchCancelRfqOrders(LibNativeOrder.RfqOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrdersWithSigner(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrdersWithSigner(\n        address maker,\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrdersWithSigner(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrdersWithSigner(\n        address maker,\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        external;\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the order info for an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderInfo Info about the order.\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the canonical hash of a limit order.\n    /// @param order The limit order.\n    /// @return orderHash The order hash.\n    function getLimitOrderHash(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the canonical hash of an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderHash The order hash.\n    function getRfqOrderHash(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the protocol fee multiplier. This should be multiplied by the\n    ///      gas price to arrive at the required protocol fee to fill a native order.\n    /// @return multiplier The protocol fee multiplier.\n    function getProtocolFeeMultiplier()\n        external\n        view\n        returns (uint32 multiplier);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Get order info, fillable amount, and signature validity for an RFQ order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getRfqOrderRelevantState(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Batch version of `getLimitOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getLimitOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The limit orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetLimitOrderRelevantStates(\n        LibNativeOrder.LimitOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n\n    /// @dev Batch version of `getRfqOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getRfqOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The RFQ orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetRfqOrderRelevantStates(\n        LibNativeOrder.RfqOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n\n    /// @dev Register a signer who can sign on behalf of msg.sender\n    ///      This allows one to sign on behalf of a contract that calls this function\n    /// @param signer The address from which you plan to generate signatures\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedOrderSigner(\n        address signer,\n        bool allowed\n    )\n        external;\n\n    /// @dev checks if a given address is registered to sign on behalf of a maker address\n    /// @param maker The maker address encoded in an order (can be a contract)\n    /// @param signer The address that is providing a signature\n    function isValidOrderSigner(\n        address maker,\n        address signer\n    )\n        external\n        view\n        returns (bool isAllowed);\n}\n",
        "../interfaces/INativeOrdersEvents.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\n\n\n/// @dev Events emitted by NativeOrdersFeature.\ninterface INativeOrdersEvents {\n\n    /// @dev Emitted whenever a `LimitOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param feeRecipient Fee recipient of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param protocolFeePaid How much protocol fee was paid.\n    /// @param pool The fee pool associated with this order.\n    event LimitOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address feeRecipient,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        uint128 takerTokenFeeFilledAmount,\n        uint256 protocolFeePaid,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever an `RfqOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param pool The fee pool associated with this order.\n    event RfqOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever a limit or RFQ order is cancelled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The order maker.\n    event OrderCancelled(\n        bytes32 orderHash,\n        address maker\n    );\n\n    /// @dev Emitted whenever Limit orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledLimitOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted whenever RFQ orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledRfqOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted when new addresses are allowed or disallowed to fill\n    ///      orders with a given txOrigin.\n    /// @param origin The address doing the allowing.\n    /// @param addrs The address being allowed/disallowed.\n    /// @param allowed Indicates whether the address should be allowed.\n    event RfqOrderOriginsAllowed(\n        address origin,\n        address[] addrs,\n        bool allowed\n    );\n\n    /// @dev Emitted when new order signers are registered\n    /// @param maker The maker address that is registering a designated signer.\n    /// @param signer The address that will sign on behalf of maker.\n    /// @param allowed Indicates whether the address should be allowed.\n    event OrderSignerRegistered(\n        address maker,\n        address signer,\n        bool allowed\n    );\n}\n",
        "./MultiplexTransformERC20.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\nimport \"../interfaces/ITransformERC20Feature.sol\";\n\n\nabstract contract MultiplexTransformERC20 {\n\n    using LibSafeMathV06 for uint256;\n\n    function _batchSellTransformERC20(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        ITransformERC20Feature.TransformERC20Args memory args;\n        // We want the TransformedERC20 event to have\n        // `msg.sender` as the taker.\n        args.taker = msg.sender;\n        args.inputToken = params.inputToken;\n        args.outputToken = params.outputToken;\n        args.inputTokenAmount = sellAmount;\n        args.minOutputTokenAmount = 0;\n        args.useSelfBalance = params.useSelfBalance;\n        args.recipient = payable(params.recipient);\n        (args.transformations) = abi.decode(\n            wrappedCallData,\n            (ITransformERC20Feature.Transformation[])\n        );\n        // Execute the transformations and swallow reverts.\n        try ITransformERC20Feature(address(this))._transformERC20\n            (args)\n            returns (uint256 outputTokenAmount)\n        {\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(sellAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(outputTokenAmount);\n        } catch {}\n    }\n}\n",
        "../interfaces/ITransformERC20Feature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../../transformers/IERC20Transformer.sol\";\nimport \"../../external/IFlashWallet.sol\";\n\n\n/// @dev Feature to composably transform between ERC20 tokens.\ninterface ITransformERC20Feature {\n\n    /// @dev Defines a transformation to run in `transformERC20()`.\n    struct Transformation {\n        // The deployment nonce for the transformer.\n        // The address of the transformer contract will be derived from this\n        // value.\n        uint32 deploymentNonce;\n        // Arbitrary data to pass to the transformer.\n        bytes data;\n    }\n\n    /// @dev Arguments for `_transformERC20()`.\n    struct TransformERC20Args {\n        // The taker address.\n        address payable taker;\n        // The token being provided by the taker.\n        // If `0xeee...`, ETH is implied and should be provided with the call.`\n        IERC20TokenV06 inputToken;\n        // The token to be acquired by the taker.\n        // `0xeee...` implies ETH.\n        IERC20TokenV06 outputToken;\n        // The amount of `inputToken` to take from the taker.\n        // If set to `uint256(-1)`, the entire spendable balance of the taker\n        // will be solt.\n        uint256 inputTokenAmount;\n        // The minimum amount of `outputToken` the taker\n        // must receive for the entire transformation to succeed. If set to zero,\n        // the minimum output token transfer will not be asserted.\n        uint256 minOutputTokenAmount;\n        // The transformations to execute on the token balance(s)\n        // in sequence.\n        Transformation[] transformations;\n        // Whether to use the Exchange Proxy's balance of `inputToken`.\n        bool useSelfBalance;\n        // The recipient of the bought `outputToken`.\n        address payable recipient;\n    }\n\n    /// @dev Raised upon a successful `transformERC20`.\n    /// @param taker The taker (caller) address.\n    /// @param inputToken The token being provided by the taker.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the taker.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the taker.\n    /// @param outputTokenAmount The amount of `outputToken` received by the taker.\n    event TransformedERC20(\n        address indexed taker,\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    /// @dev Raised when `setTransformerDeployer()` is called.\n    /// @param transformerDeployer The new deployer address.\n    event TransformerDeployerUpdated(address transformerDeployer);\n\n    /// @dev Raised when `setQuoteSigner()` is called.\n    /// @param quoteSigner The new quote signer.\n    event QuoteSignerUpdated(address quoteSigner);\n\n    /// @dev Replace the allowed deployer for transformers.\n    ///      Only callable by the owner.\n    /// @param transformerDeployer The address of the new trusted deployer\n    ///        for transformers.\n    function setTransformerDeployer(address transformerDeployer)\n        external;\n\n    /// @dev Replace the optional signer for `transformERC20()` calldata.\n    ///      Only callable by the owner.\n    /// @param quoteSigner The address of the new calldata signer.\n    function setQuoteSigner(address quoteSigner)\n        external;\n\n    /// @dev Deploy a new flash wallet instance and replace the current one with it.\n    ///      Useful if we somehow break the current wallet instance.\n    ///       Only callable by the owner.\n    /// @return wallet The new wallet instance.\n    function createTransformWallet()\n        external\n        returns (IFlashWallet wallet);\n\n    /// @dev Executes a series of transformations to convert an ERC20 `inputToken`\n    ///      to an ERC20 `outputToken`.\n    /// @param inputToken The token being provided by the sender.\n    ///        If `0xeee...`, ETH is implied and should be provided with the call.`\n    /// @param outputToken The token to be acquired by the sender.\n    ///        `0xeee...` implies ETH.\n    /// @param inputTokenAmount The amount of `inputToken` to take from the sender.\n    /// @param minOutputTokenAmount The minimum amount of `outputToken` the sender\n    ///        must receive for the entire transformation to succeed.\n    /// @param transformations The transformations to execute on the token balance(s)\n    ///        in sequence.\n    /// @return outputTokenAmount The amount of `outputToken` received by the sender.\n    function transformERC20(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 minOutputTokenAmount,\n        Transformation[] calldata transformations\n    )\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Internal version of `transformERC20()`. Only callable from within.\n    /// @param args A `TransformERC20Args` struct.\n    /// @return outputTokenAmount The amount of `outputToken` received by the taker.\n    function _transformERC20(TransformERC20Args calldata args)\n        external\n        payable\n        returns (uint256 outputTokenAmount);\n\n    /// @dev Return the current wallet instance that will serve as the execution\n    ///      context for transformations.\n    /// @return wallet The wallet instance.\n    function getTransformWallet()\n        external\n        view\n        returns (IFlashWallet wallet);\n\n    /// @dev Return the allowed deployer for transformers.\n    /// @return deployer The transform deployer address.\n    function getTransformerDeployer()\n        external\n        view\n        returns (address deployer);\n\n    /// @dev Return the optional signer for `transformERC20()` calldata.\n    /// @return signer The transform deployer address.\n    function getQuoteSigner()\n        external\n        view\n        returns (address signer);\n}\n",
        "../../transformers/IERC20Transformer.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev A transformation callback used in `TransformERC20.transformERC20()`.\ninterface IERC20Transformer {\n\n    /// @dev Context information to pass into `transform()` by `TransformERC20.transformERC20()`.\n    struct TransformContext {\n        // The caller of `TransformERC20.transformERC20()`.\n        address payable sender;\n        // The recipient address, which may be distinct from `sender` e.g. in\n        // meta-transactions.\n        address payable recipient;\n        // Arbitrary data to pass to the transformer.\n        bytes data;\n    }\n\n    /// @dev Called from `TransformERC20.transformERC20()`. This will be\n    ///      delegatecalled in the context of the FlashWallet instance being used.\n    /// @param context Context information.\n    /// @return success The success bytes (`LibERC20Transformer.TRANSFORMER_SUCCESS`).\n    function transform(TransformContext calldata context)\n        external\n        returns (bytes4 success);\n}\n",
        "../../external/IFlashWallet.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n/// @dev A contract that can execute arbitrary calls from its owner.\ninterface IFlashWallet {\n\n    /// @dev Execute an arbitrary call. Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @param value Ether to attach to the call.\n    /// @return resultData The data returned by the call.\n    function executeCall(\n        address payable target,\n        bytes calldata callData,\n        uint256 value\n    )\n        external\n        payable\n        returns (bytes memory resultData);\n\n    /// @dev Execute an arbitrary delegatecall, in the context of this puppet.\n    ///      Only an authority can call this.\n    /// @param target The call target.\n    /// @param callData The call data.\n    /// @return resultData The data returned by the call.\n    function executeDelegateCall(\n        address payable target,\n        bytes calldata callData\n    )\n        external\n        payable\n        returns (bytes memory resultData);\n\n    /// @dev Allows the puppet to receive ETH.\n    receive() external payable;\n\n    /// @dev Fetch the immutable owner/deployer of this contract.\n    /// @return owner_ The immutable owner/deployer/\n    function owner() external view returns (address owner_);\n}\n",
        "./MultiplexUniswapV2.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../fixins/FixinCommon.sol\";\nimport \"../../fixins/FixinTokenSpender.sol\";\nimport \"../../vendor/IUniswapV2Pair.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\n\n\nabstract contract MultiplexUniswapV2 is\n    FixinCommon,\n    FixinTokenSpender\n{\n    using LibSafeMathV06 for uint256;\n\n    // address of the UniswapV2Factory contract.\n    address private immutable UNISWAP_FACTORY;\n    // address of the (Sushiswap) UniswapV2Factory contract.\n    address private immutable SUSHISWAP_FACTORY;\n    // Init code hash of the UniswapV2Pair contract.\n    bytes32 private immutable UNISWAP_PAIR_INIT_CODE_HASH;\n    // Init code hash of the (Sushiswap) UniswapV2Pair contract.\n    bytes32 private immutable SUSHISWAP_PAIR_INIT_CODE_HASH;\n\n    constructor(\n        address uniswapFactory,\n        address sushiswapFactory,\n        bytes32 uniswapPairInitCodeHash,\n        bytes32 sushiswapPairInitCodeHash\n    )\n        internal\n    {\n        UNISWAP_FACTORY = uniswapFactory;\n        SUSHISWAP_FACTORY = sushiswapFactory;\n        UNISWAP_PAIR_INIT_CODE_HASH = uniswapPairInitCodeHash;\n        SUSHISWAP_PAIR_INIT_CODE_HASH = sushiswapPairInitCodeHash;\n    }\n\n    // A payable external function that we can delegatecall to\n    // swallow reverts and roll back the input token transfer.\n    function _batchSellUniswapV2External(\n        IMultiplexFeature.BatchSellParams calldata params,\n        bytes calldata wrappedCallData,\n        uint256 sellAmount\n    )\n        external\n        payable\n        returns (uint256 boughtAmount)\n    {\n        // Revert is not a delegatecall.\n        require(\n            address(this) != _implementation,\n            \"MultiplexLiquidityProvider::_batchSellUniswapV2External/ONLY_DELEGATECALL\"\n        );\n\n        (address[] memory tokens, bool isSushi) = abi.decode(\n            wrappedCallData,\n            (address[], bool)\n        );\n        // Validate tokens\n        require(\n            tokens.length >= 2 &&\n            tokens[0] == address(params.inputToken) &&\n            tokens[tokens.length - 1] == address(params.outputToken),\n            \"MultiplexUniswapV2::_batchSellUniswapV2/INVALID_TOKENS\"\n        );\n        // Compute the address of the first Uniswap pair\n        // contract that will execute a swap.\n        address firstPairAddress = _computeUniswapPairAddress(\n            tokens[0],\n            tokens[1],\n            isSushi\n        );\n        // `_sellToUniswapV2` assumes the input tokens have been\n        // transferred into the pair contract before it is called,\n        // so we transfer the tokens in now (either from `msg.sender`\n        // or using the Exchange Proxy's balance).\n        if (params.useSelfBalance) {\n            _transferERC20Tokens(\n                IERC20TokenV06(tokens[0]),\n                firstPairAddress,\n                sellAmount\n            );\n        } else {\n            _transferERC20TokensFrom(\n                IERC20TokenV06(tokens[0]),\n                msg.sender,\n                firstPairAddress,\n                sellAmount\n            );\n        }\n        // Execute the Uniswap/Sushiswap trade.\n        return _sellToUniswapV2(\n            tokens,\n            sellAmount,\n            isSushi,\n            firstPairAddress,\n            params.recipient\n        );\n    }\n\n    function _batchSellUniswapV2(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        // Swallow reverts\n        (bool success, bytes memory resultData) = _implementation.delegatecall(\n            abi.encodeWithSelector(\n                this._batchSellUniswapV2External.selector,\n                params,\n                wrappedCallData,\n                sellAmount\n            )\n        );\n        if (success) {\n            // Decode the output token amount on success.\n            uint256 boughtAmount = abi.decode(resultData, (uint256));\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(sellAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(boughtAmount);\n        }\n    }\n\n    function _multiHopSellUniswapV2(\n        IMultiplexFeature.MultiHopSellState memory state,\n        IMultiplexFeature.MultiHopSellParams memory params,\n        bytes memory wrappedCallData\n    )\n        internal\n    {\n        (address[] memory tokens, bool isSushi) = abi.decode(\n            wrappedCallData,\n            (address[], bool)\n        );\n        // Validate the tokens\n        require(\n            tokens.length >= 2 &&\n            tokens[0] == params.tokens[state.hopIndex] &&\n            tokens[tokens.length - 1] == params.tokens[state.hopIndex + 1],\n            \"MultiplexUniswapV2::_multiHopSellUniswapV2/INVALID_TOKENS\"\n        );\n        // Execute the Uniswap/Sushiswap trade.\n        state.outputTokenAmount = _sellToUniswapV2(\n            tokens,\n            state.outputTokenAmount,\n            isSushi,\n            state.from,\n            state.to\n        );\n    }\n\n    function _sellToUniswapV2(\n        address[] memory tokens,\n        uint256 sellAmount,\n        bool isSushi,\n        address pairAddress,\n        address recipient\n    )\n        private\n        returns (uint256 outputTokenAmount)\n    {\n        // Iterate through `tokens` perform a swap against the Uniswap\n        // pair contract for each `(tokens[i], tokens[i+1])`.\n        for (uint256 i = 0; i < tokens.length - 1; i++) {\n            (address inputToken, address outputToken) = (tokens[i], tokens[i + 1]);\n            // Compute the output token amount\n            outputTokenAmount = _computeUniswapOutputAmount(\n                pairAddress,\n                inputToken,\n                outputToken,\n                sellAmount\n            );\n            (uint256 amount0Out, uint256 amount1Out) = inputToken < outputToken\n                ? (uint256(0), outputTokenAmount)\n                : (outputTokenAmount, uint256(0));\n            // The Uniswap pair contract will transfer the output tokens to\n            // the next pair contract if there is one, otherwise transfer to\n            // `recipient`.\n            address to = i < tokens.length - 2\n                ? _computeUniswapPairAddress(outputToken, tokens[i + 2], isSushi)\n                : recipient;\n            // Execute the swap.\n            IUniswapV2Pair(pairAddress).swap(\n                amount0Out,\n                amount1Out,\n                to,\n                new bytes(0)\n            );\n            // To avoid recomputing the pair address of the next pair, store\n            // `to` in `pairAddress`.\n            pairAddress = to;\n            // The outputTokenAmount\n            sellAmount = outputTokenAmount;\n        }\n    }\n\n    // Computes the Uniswap/Sushiswap pair contract address for the\n    // given tokens.\n    function _computeUniswapPairAddress(\n        address tokenA,\n        address tokenB,\n        bool isSushi\n    )\n        internal\n        view\n        returns (address pairAddress)\n    {\n        // Tokens are lexicographically sorted in the Uniswap contract.\n        (address token0, address token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        if (isSushi) {\n            // Use the Sushiswap factory address and codehash\n            return address(uint256(keccak256(abi.encodePacked(\n                hex'ff',\n                SUSHISWAP_FACTORY,\n                keccak256(abi.encodePacked(token0, token1)),\n                SUSHISWAP_PAIR_INIT_CODE_HASH\n            ))));\n        } else {\n            // Use the Uniswap factory address and codehash\n            return address(uint256(keccak256(abi.encodePacked(\n                hex'ff',\n                UNISWAP_FACTORY,\n                keccak256(abi.encodePacked(token0, token1)),\n                UNISWAP_PAIR_INIT_CODE_HASH\n            ))));\n        }\n    }\n\n    // Computes the the amount of output token that would be bought\n    // from Uniswap/Sushiswap given the input amount.\n    function _computeUniswapOutputAmount(\n        address pairAddress,\n        address inputToken,\n        address outputToken,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount)\n    {\n        // Input amount should be non-zero.\n        require(\n            inputAmount > 0,\n            \"MultiplexUniswapV2::_computeUniswapOutputAmount/INSUFFICIENT_INPUT_AMOUNT\"\n        );\n        // Query the reserves of the pair contract.\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pairAddress).getReserves();\n        // Reserves must be non-zero.\n        require(\n            reserve0 > 0 && reserve1 > 0,\n            'MultiplexUniswapV2::_computeUniswapOutputAmount/INSUFFICIENT_LIQUIDITY'\n        );\n        // Tokens are lexicographically sorted in the Uniswap contract.\n        (uint256 inputReserve, uint256 outputReserve) = inputToken < outputToken\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n        // Compute the output amount.\n        uint256 inputAmountWithFee = inputAmount.safeMul(997);\n        uint256 numerator = inputAmountWithFee.safeMul(outputReserve);\n        uint256 denominator = inputReserve.safeMul(1000).safeAdd(inputAmountWithFee);\n        return numerator / denominator;\n    }\n}\n",
        "../../vendor/IUniswapV2Pair.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.12;\n\n\ninterface IUniswapV2Pair {\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n\n    function swap(\n        uint amount0Out,\n        uint amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n}\n",
        "./MultiplexUniswapV3.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../fixins/FixinTokenSpender.sol\";\nimport \"../interfaces/IMultiplexFeature.sol\";\nimport \"../interfaces/IUniswapV3Feature.sol\";\n\n\nabstract contract MultiplexUniswapV3 is\n    FixinTokenSpender\n{\n    using LibSafeMathV06 for uint256;\n\n    function _batchSellUniswapV3(\n        IMultiplexFeature.BatchSellState memory state,\n        IMultiplexFeature.BatchSellParams memory params,\n        bytes memory wrappedCallData,\n        uint256 sellAmount\n    )\n        internal\n    {\n        bool success;\n        bytes memory resultData;\n        if (params.useSelfBalance) {\n            // If the tokens are held by `address(this)`, we call\n            // the `onlySelf` variant `_sellHeldTokenForTokenToUniswapV3`,\n            // which uses the Exchange Proxy's balance of input token.\n            (success, resultData) = address(this).call(\n                abi.encodeWithSelector(\n                    IUniswapV3Feature._sellHeldTokenForTokenToUniswapV3.selector,\n                    wrappedCallData,\n                    sellAmount,\n                    0,\n                    params.recipient\n                )\n            );\n        } else {\n            // Otherwise, we self-delegatecall the normal variant\n            // `sellTokenForTokenToUniswapV3`, which pulls the input token\n            // from `msg.sender`.\n            (success, resultData) = address(this).delegatecall(\n                abi.encodeWithSelector(\n                    IUniswapV3Feature.sellTokenForTokenToUniswapV3.selector,\n                    wrappedCallData,\n                    sellAmount,\n                    0,\n                    params.recipient\n                )\n            );\n        }\n        if (success) {\n            // Decode the output token amount on success.\n            uint256 outputTokenAmount = abi.decode(resultData, (uint256));\n            // Increment the sold and bought amounts.\n            state.soldAmount = state.soldAmount.safeAdd(sellAmount);\n            state.boughtAmount = state.boughtAmount.safeAdd(outputTokenAmount);\n        }\n    }\n\n    function _multiHopSellUniswapV3(\n        IMultiplexFeature.MultiHopSellState memory state,\n        bytes memory wrappedCallData\n    )\n        internal\n    {\n        bool success;\n        bytes memory resultData;\n        if (state.from == address(this)) {\n            // If the tokens are held by `address(this)`, we call\n            // the `onlySelf` variant `_sellHeldTokenForTokenToUniswapV3`,\n            // which uses the Exchange Proxy's balance of input token.\n            (success, resultData) = address(this).call(\n                abi.encodeWithSelector(\n                    IUniswapV3Feature._sellHeldTokenForTokenToUniswapV3.selector,\n                    wrappedCallData,\n                    state.outputTokenAmount,\n                    0,\n                    state.to\n                )\n            );\n        } else {\n            // Otherwise, we self-delegatecall the normal variant\n            // `sellTokenForTokenToUniswapV3`, which pulls the input token\n            // from `msg.sender`.\n            (success, resultData) = address(this).delegatecall(\n                abi.encodeWithSelector(\n                    IUniswapV3Feature.sellTokenForTokenToUniswapV3.selector,\n                    wrappedCallData,\n                    state.outputTokenAmount,\n                    0,\n                    state.to\n                )\n            );\n        }\n        if (success) {\n            // Decode the output token amount on success.\n            state.outputTokenAmount = abi.decode(resultData, (uint256));\n        } else {\n            revert(\"MultiplexUniswapV3::_multiHopSellUniswapV3/SWAP_FAILED\");\n        }\n    }\n}\n",
        "../interfaces/IUniswapV3Feature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\n/// @dev VIP uniswap v3 fill functions.\ninterface IUniswapV3Feature {\n\n    /// @dev Sell attached ETH directly against uniswap v3.\n    /// @param encodedPath Uniswap-encoded path, where the first token is WETH.\n    /// @param minBuyAmount Minimum amount of the last token in the path to buy.\n    /// @param recipient The recipient of the bought tokens. Can be zero for sender.\n    /// @return buyAmount Amount of the last token in the path bought.\n    function sellEthForTokenToUniswapV3(\n        bytes memory encodedPath,\n        uint256 minBuyAmount,\n        address recipient\n    )\n        external\n        payable\n        returns (uint256 buyAmount);\n\n    /// @dev Sell a token for ETH directly against uniswap v3.\n    /// @param encodedPath Uniswap-encoded path, where the last token is WETH.\n    /// @param sellAmount amount of the first token in the path to sell.\n    /// @param minBuyAmount Minimum amount of ETH to buy.\n    /// @param recipient The recipient of the bought tokens. Can be zero for sender.\n    /// @return buyAmount Amount of ETH bought.\n    function sellTokenForEthToUniswapV3(\n        bytes memory encodedPath,\n        uint256 sellAmount,\n        uint256 minBuyAmount,\n        address payable recipient\n    )\n        external\n        returns (uint256 buyAmount);\n\n    /// @dev Sell a token for another token directly against uniswap v3.\n    /// @param encodedPath Uniswap-encoded path.\n    /// @param sellAmount amount of the first token in the path to sell.\n    /// @param minBuyAmount Minimum amount of the last token in the path to buy.\n    /// @param recipient The recipient of the bought tokens. Can be zero for sender.\n    /// @return buyAmount Amount of the last token in the path bought.\n    function sellTokenForTokenToUniswapV3(\n        bytes memory encodedPath,\n        uint256 sellAmount,\n        uint256 minBuyAmount,\n        address recipient\n    )\n        external\n        returns (uint256 buyAmount);\n\n    /// @dev Sell a token for another token directly against uniswap v3.\n    ///      Private variant, uses tokens held by `address(this)`.\n    /// @param encodedPath Uniswap-encoded path.\n    /// @param sellAmount amount of the first token in the path to sell.\n    /// @param minBuyAmount Minimum amount of the last token in the path to buy.\n    /// @param recipient The recipient of the bought tokens. Can be zero for sender.\n    /// @return buyAmount Amount of the last token in the path bought.\n    function _sellHeldTokenForTokenToUniswapV3(\n        bytes memory encodedPath,\n        uint256 sellAmount,\n        uint256 minBuyAmount,\n        address recipient\n    )\n        external\n        returns (uint256 buyAmount);\n\n    /// @dev The UniswapV3 pool swap callback which pays the funds requested\n    ///      by the caller/pool to the pool. Can only be called by a valid\n    ///      UniswapV3 pool.\n    /// @param amount0Delta Token0 amount owed.\n    /// @param amount1Delta Token1 amount owed.\n    /// @param data Arbitrary data forwarded from swap() caller. An ABI-encoded\n    ///        struct of: inputToken, outputToken, fee, payer\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    )\n        external;\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/home/runner/work/protocol/protocol/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/home/runner/work/protocol/protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap",
                        "evm.methodIdentifiers"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
