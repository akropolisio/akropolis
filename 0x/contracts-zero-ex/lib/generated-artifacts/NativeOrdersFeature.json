{
    "schemaVersion": "2.0.0",
    "contractName": "NativeOrdersFeature",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "zeroExAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IEtherTokenV06",
                        "name": "weth",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IStaking",
                        "name": "staking",
                        "type": "address"
                    },
                    {
                        "internalType": "contract FeeCollectorController",
                        "name": "feeCollectorController",
                        "type": "address"
                    },
                    {
                        "internalType": "uint32",
                        "name": "protocolFeeMultiplier",
                        "type": "uint32"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "bytes32",
                        "name": "orderHash",
                        "type": "bytes32"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "maker",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "taker",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "feeRecipient",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint128",
                        "name": "takerTokenFilledAmount",
                        "type": "uint128"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint128",
                        "name": "makerTokenFilledAmount",
                        "type": "uint128"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint128",
                        "name": "takerTokenFeeFilledAmount",
                        "type": "uint128"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "protocolFeePaid",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "bytes32",
                        "name": "pool",
                        "type": "bytes32"
                    }
                ],
                "name": "LimitOrderFilled",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "bytes32",
                        "name": "orderHash",
                        "type": "bytes32"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "maker",
                        "type": "address"
                    }
                ],
                "name": "OrderCancelled",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "maker",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "signer",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "bool",
                        "name": "allowed",
                        "type": "bool"
                    }
                ],
                "name": "OrderSignerRegistered",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "maker",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "minValidSalt",
                        "type": "uint256"
                    }
                ],
                "name": "PairCancelledLimitOrders",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "maker",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "minValidSalt",
                        "type": "uint256"
                    }
                ],
                "name": "PairCancelledRfqOrders",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "bytes32",
                        "name": "orderHash",
                        "type": "bytes32"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "maker",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "taker",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint128",
                        "name": "takerTokenFilledAmount",
                        "type": "uint128"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint128",
                        "name": "makerTokenFilledAmount",
                        "type": "uint128"
                    },
                    {
                        "indexed": false,
                        "internalType": "bytes32",
                        "name": "pool",
                        "type": "bytes32"
                    }
                ],
                "name": "RfqOrderFilled",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "origin",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address[]",
                        "name": "addrs",
                        "type": "address[]"
                    },
                    {
                        "indexed": false,
                        "internalType": "bool",
                        "name": "allowed",
                        "type": "bool"
                    }
                ],
                "name": "RfqOrderOriginsAllowed",
                "type": "event"
            },
            {
                "inputs": [],
                "name": "EIP712_DOMAIN_SEPARATOR",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "FEATURE_NAME",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "FEATURE_VERSION",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "PROTOCOL_FEE_MULTIPLIER",
                "outputs": [
                    {
                        "internalType": "uint32",
                        "name": "",
                        "type": "uint32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.LimitOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature",
                        "name": "signature",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint128",
                        "name": "takerTokenFillAmount",
                        "type": "uint128"
                    },
                    {
                        "internalType": "address",
                        "name": "taker",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "sender",
                        "type": "address"
                    }
                ],
                "name": "_fillLimitOrder",
                "outputs": [
                    {
                        "internalType": "uint128",
                        "name": "takerTokenFilledAmount",
                        "type": "uint128"
                    },
                    {
                        "internalType": "uint128",
                        "name": "makerTokenFilledAmount",
                        "type": "uint128"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.RfqOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature",
                        "name": "signature",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint128",
                        "name": "takerTokenFillAmount",
                        "type": "uint128"
                    },
                    {
                        "internalType": "address",
                        "name": "taker",
                        "type": "address"
                    },
                    {
                        "internalType": "bool",
                        "name": "useSelfBalance",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "recipient",
                        "type": "address"
                    }
                ],
                "name": "_fillRfqOrder",
                "outputs": [
                    {
                        "internalType": "uint128",
                        "name": "takerTokenFilledAmount",
                        "type": "uint128"
                    },
                    {
                        "internalType": "uint128",
                        "name": "makerTokenFilledAmount",
                        "type": "uint128"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    }
                ],
                "name": "batchCancelLimitOrders",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "makerTokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "takerTokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "minValidSalts",
                        "type": "uint256[]"
                    }
                ],
                "name": "batchCancelPairLimitOrders",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "maker",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "makerTokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "takerTokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "minValidSalts",
                        "type": "uint256[]"
                    }
                ],
                "name": "batchCancelPairLimitOrdersWithSigner",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "makerTokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "takerTokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "minValidSalts",
                        "type": "uint256[]"
                    }
                ],
                "name": "batchCancelPairRfqOrders",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "maker",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "makerTokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "takerTokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "minValidSalts",
                        "type": "uint256[]"
                    }
                ],
                "name": "batchCancelPairRfqOrdersWithSigner",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.RfqOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    }
                ],
                "name": "batchCancelRfqOrders",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature[]",
                        "name": "signatures",
                        "type": "tuple[]"
                    }
                ],
                "name": "batchGetLimitOrderRelevantStates",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "orderHash",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "enum LibNativeOrder.OrderStatus",
                                "name": "status",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFilledAmount",
                                "type": "uint128"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.OrderInfo[]",
                        "name": "orderInfos",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint128[]",
                        "name": "actualFillableTakerTokenAmounts",
                        "type": "uint128[]"
                    },
                    {
                        "internalType": "bool[]",
                        "name": "isSignatureValids",
                        "type": "bool[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.RfqOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature[]",
                        "name": "signatures",
                        "type": "tuple[]"
                    }
                ],
                "name": "batchGetRfqOrderRelevantStates",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "orderHash",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "enum LibNativeOrder.OrderStatus",
                                "name": "status",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFilledAmount",
                                "type": "uint128"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.OrderInfo[]",
                        "name": "orderInfos",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint128[]",
                        "name": "actualFillableTakerTokenAmounts",
                        "type": "uint128[]"
                    },
                    {
                        "internalType": "bool[]",
                        "name": "isSignatureValids",
                        "type": "bool[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.LimitOrder",
                        "name": "order",
                        "type": "tuple"
                    }
                ],
                "name": "cancelLimitOrder",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minValidSalt",
                        "type": "uint256"
                    }
                ],
                "name": "cancelPairLimitOrders",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "maker",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minValidSalt",
                        "type": "uint256"
                    }
                ],
                "name": "cancelPairLimitOrdersWithSigner",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minValidSalt",
                        "type": "uint256"
                    }
                ],
                "name": "cancelPairRfqOrders",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "maker",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minValidSalt",
                        "type": "uint256"
                    }
                ],
                "name": "cancelPairRfqOrdersWithSigner",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.RfqOrder",
                        "name": "order",
                        "type": "tuple"
                    }
                ],
                "name": "cancelRfqOrder",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.LimitOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature",
                        "name": "signature",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint128",
                        "name": "takerTokenFillAmount",
                        "type": "uint128"
                    }
                ],
                "name": "fillLimitOrder",
                "outputs": [
                    {
                        "internalType": "uint128",
                        "name": "takerTokenFilledAmount",
                        "type": "uint128"
                    },
                    {
                        "internalType": "uint128",
                        "name": "makerTokenFilledAmount",
                        "type": "uint128"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.LimitOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature",
                        "name": "signature",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint128",
                        "name": "takerTokenFillAmount",
                        "type": "uint128"
                    }
                ],
                "name": "fillOrKillLimitOrder",
                "outputs": [
                    {
                        "internalType": "uint128",
                        "name": "makerTokenFilledAmount",
                        "type": "uint128"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.RfqOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature",
                        "name": "signature",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint128",
                        "name": "takerTokenFillAmount",
                        "type": "uint128"
                    }
                ],
                "name": "fillOrKillRfqOrder",
                "outputs": [
                    {
                        "internalType": "uint128",
                        "name": "makerTokenFilledAmount",
                        "type": "uint128"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.RfqOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature",
                        "name": "signature",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint128",
                        "name": "takerTokenFillAmount",
                        "type": "uint128"
                    }
                ],
                "name": "fillRfqOrder",
                "outputs": [
                    {
                        "internalType": "uint128",
                        "name": "takerTokenFilledAmount",
                        "type": "uint128"
                    },
                    {
                        "internalType": "uint128",
                        "name": "makerTokenFilledAmount",
                        "type": "uint128"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.LimitOrder",
                        "name": "order",
                        "type": "tuple"
                    }
                ],
                "name": "getLimitOrderHash",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "orderHash",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.LimitOrder",
                        "name": "order",
                        "type": "tuple"
                    }
                ],
                "name": "getLimitOrderInfo",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "orderHash",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "enum LibNativeOrder.OrderStatus",
                                "name": "status",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFilledAmount",
                                "type": "uint128"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.OrderInfo",
                        "name": "orderInfo",
                        "type": "tuple"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.LimitOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature",
                        "name": "signature",
                        "type": "tuple"
                    }
                ],
                "name": "getLimitOrderRelevantState",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "orderHash",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "enum LibNativeOrder.OrderStatus",
                                "name": "status",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFilledAmount",
                                "type": "uint128"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.OrderInfo",
                        "name": "orderInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint128",
                        "name": "actualFillableTakerTokenAmount",
                        "type": "uint128"
                    },
                    {
                        "internalType": "bool",
                        "name": "isSignatureValid",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getProtocolFeeMultiplier",
                "outputs": [
                    {
                        "internalType": "uint32",
                        "name": "multiplier",
                        "type": "uint32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.RfqOrder",
                        "name": "order",
                        "type": "tuple"
                    }
                ],
                "name": "getRfqOrderHash",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "orderHash",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.RfqOrder",
                        "name": "order",
                        "type": "tuple"
                    }
                ],
                "name": "getRfqOrderInfo",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "orderHash",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "enum LibNativeOrder.OrderStatus",
                                "name": "status",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFilledAmount",
                                "type": "uint128"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.OrderInfo",
                        "name": "orderInfo",
                        "type": "tuple"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.RfqOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature",
                        "name": "signature",
                        "type": "tuple"
                    }
                ],
                "name": "getRfqOrderRelevantState",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "orderHash",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "enum LibNativeOrder.OrderStatus",
                                "name": "status",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFilledAmount",
                                "type": "uint128"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.OrderInfo",
                        "name": "orderInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint128",
                        "name": "actualFillableTakerTokenAmount",
                        "type": "uint128"
                    },
                    {
                        "internalType": "bool",
                        "name": "isSignatureValid",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "maker",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "signer",
                        "type": "address"
                    }
                ],
                "name": "isValidOrderSigner",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "isValid",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "migrate",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "success",
                        "type": "bytes4"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "signer",
                        "type": "address"
                    },
                    {
                        "internalType": "bool",
                        "name": "allowed",
                        "type": "bool"
                    }
                ],
                "name": "registerAllowedOrderSigner",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address[]",
                        "name": "origins",
                        "type": "address[]"
                    },
                    {
                        "internalType": "bool",
                        "name": "allowed",
                        "type": "bool"
                    }
                ],
                "name": "registerAllowedRfqOrigins",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32[]",
                        "name": "poolIds",
                        "type": "bytes32[]"
                    }
                ],
                "name": "transferProtocolFeesForPools",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "details": "Feature for interacting with limit and RFQ orders.",
            "kind": "dev",
            "methods": {
                "_fillLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128,address,address)": {
                    "details": "Fill a limit order. Internal variant. ETH protocol fees can be      attached to this call.",
                    "params": {
                        "order": "The limit order.",
                        "sender": "The order sender.",
                        "signature": "The order signature.",
                        "taker": "The order taker.",
                        "takerTokenFillAmount": "Maximum taker token to fill this order with."
                    },
                    "returns": {
                        "makerTokenFilledAmount": "How much maker token was filled.",
                        "takerTokenFilledAmount": "How much maker token was filled."
                    }
                },
                "_fillRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128,address,bool,address)": {
                    "details": "Fill an RFQ order. Internal variant.",
                    "params": {
                        "order": "The RFQ order.",
                        "recipient": "The recipient of the maker tokens.",
                        "signature": "The order signature.",
                        "taker": "The order taker.",
                        "takerTokenFillAmount": "Maximum taker token to fill this order with.",
                        "useSelfBalance": "Whether to use the ExchangeProxy's transient        balance of taker tokens to fill the order."
                    },
                    "returns": {
                        "makerTokenFilledAmount": "How much maker token was filled.",
                        "takerTokenFilledAmount": "How much maker token was filled."
                    }
                },
                "batchCancelLimitOrders((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[])": {
                    "details": "Cancel multiple limit orders. The caller must be the maker or a valid order signer.      Silently succeeds if the order has already been cancelled.",
                    "params": {
                        "orders": "The limit orders."
                    }
                },
                "batchCancelPairLimitOrders(address[],address[],uint256[])": {
                    "details": "Cancel all limit orders for a given maker and pair with a salt less      than the value provided. The caller must be the maker. Subsequent      calls to this function with the same caller and pair require the      new salt to be >= the old salt.",
                    "params": {
                        "makerTokens": "The maker tokens.",
                        "minValidSalts": "The new minimum valid salts.",
                        "takerTokens": "The taker tokens."
                    }
                },
                "batchCancelPairLimitOrdersWithSigner(address,address[],address[],uint256[])": {
                    "details": "Cancel all limit orders for a given maker and pair with a salt less      than the value provided. The caller must be a signer registered to the maker.      Subsequent calls to this function with the same caller and pair require the      new salt to be >= the old salt.",
                    "params": {
                        "maker": "the maker for whom the msg.sender is the signer.",
                        "makerTokens": "The maker tokens.",
                        "minValidSalts": "The new minimum valid salts.",
                        "takerTokens": "The taker tokens."
                    }
                },
                "batchCancelPairRfqOrders(address[],address[],uint256[])": {
                    "details": "Cancel all RFQ orders for a given maker and pair with a salt less      than the value provided. The caller must be the maker. Subsequent      calls to this function with the same caller and pair require the      new salt to be >= the old salt.",
                    "params": {
                        "makerTokens": "The maker tokens.",
                        "minValidSalts": "The new minimum valid salts.",
                        "takerTokens": "The taker tokens."
                    }
                },
                "batchCancelPairRfqOrdersWithSigner(address,address[],address[],uint256[])": {
                    "details": "Cancel all RFQ orders for a given maker and pairs with salts less      than the values provided. The caller must be a signer registered to the maker.      Subsequent calls to this function with the same caller and pair require the      new salt to be >= the old salt.",
                    "params": {
                        "maker": "the maker for whom the msg.sender is the signer.",
                        "makerTokens": "The maker tokens.",
                        "minValidSalts": "The new minimum valid salts.",
                        "takerTokens": "The taker tokens."
                    }
                },
                "batchCancelRfqOrders((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256)[])": {
                    "details": "Cancel multiple RFQ orders. The caller must be the maker or a valid order signer.      Silently succeeds if the order has already been cancelled.",
                    "params": {
                        "orders": "The RFQ orders."
                    }
                },
                "batchGetLimitOrderRelevantStates((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[])": {
                    "details": "Batch version of `getLimitOrderRelevantState()`, without reverting.      Orders that would normally cause `getLimitOrderRelevantState()`      to revert will have empty results.",
                    "params": {
                        "orders": "The limit orders.",
                        "signatures": "The order signatures."
                    },
                    "returns": {
                        "actualFillableTakerTokenAmounts": "How much of each order is fillable         based on maker funds, in taker tokens.",
                        "isSignatureValids": "Whether each signature is valid for the order.",
                        "orderInfos": "Info about the orders."
                    }
                },
                "batchGetRfqOrderRelevantStates((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[])": {
                    "details": "Batch version of `getRfqOrderRelevantState()`, without reverting.      Orders that would normally cause `getRfqOrderRelevantState()`      to revert will have empty results.",
                    "params": {
                        "orders": "The RFQ orders.",
                        "signatures": "The order signatures."
                    },
                    "returns": {
                        "actualFillableTakerTokenAmounts": "How much of each order is fillable         based on maker funds, in taker tokens.",
                        "isSignatureValids": "Whether each signature is valid for the order.",
                        "orderInfos": "Info about the orders."
                    }
                },
                "cancelLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))": {
                    "details": "Cancel a single limit order. The caller must be the maker or a valid order signer.      Silently succeeds if the order has already been cancelled.",
                    "params": {
                        "order": "The limit order."
                    }
                },
                "cancelPairLimitOrders(address,address,uint256)": {
                    "details": "Cancel all limit orders for a given maker and pair with a salt less      than the value provided. The caller must be the maker. Subsequent      calls to this function with the same caller and pair require the      new salt to be >= the old salt.",
                    "params": {
                        "makerToken": "The maker token.",
                        "minValidSalt": "The new minimum valid salt.",
                        "takerToken": "The taker token."
                    }
                },
                "cancelPairLimitOrdersWithSigner(address,address,address,uint256)": {
                    "details": "Cancel all limit orders for a given maker and pair with a salt less      than the value provided. The caller must be a signer registered to the maker.      Subsequent calls to this function with the same caller and pair require the      new salt to be >= the old salt.",
                    "params": {
                        "maker": "the maker for whom the msg.sender is the signer.",
                        "makerToken": "The maker token.",
                        "minValidSalt": "The new minimum valid salt.",
                        "takerToken": "The taker token."
                    }
                },
                "cancelPairRfqOrders(address,address,uint256)": {
                    "details": "Cancel all RFQ orders for a given maker and pair with a salt less      than the value provided. The caller must be the maker. Subsequent      calls to this function with the same caller and pair require the      new salt to be >= the old salt.",
                    "params": {
                        "makerToken": "The maker token.",
                        "minValidSalt": "The new minimum valid salt.",
                        "takerToken": "The taker token."
                    }
                },
                "cancelPairRfqOrdersWithSigner(address,address,address,uint256)": {
                    "details": "Cancel all RFQ orders for a given maker and pair with a salt less      than the value provided. The caller must be a signer registered to the maker.      Subsequent calls to this function with the same caller and pair require the      new salt to be >= the old salt.",
                    "params": {
                        "maker": "the maker for whom the msg.sender is the signer.",
                        "makerToken": "The maker token.",
                        "minValidSalt": "The new minimum valid salt.",
                        "takerToken": "The taker token."
                    }
                },
                "cancelRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))": {
                    "details": "Cancel a single RFQ order. The caller must be the maker or a valid order signer.      Silently succeeds if the order has already been cancelled.",
                    "params": {
                        "order": "The RFQ order."
                    }
                },
                "fillLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": {
                    "details": "Fill a limit order. The taker and sender will be the caller.",
                    "params": {
                        "order": "The limit order. ETH protocol fees can be      attached to this call. Any unspent ETH will be refunded to      the caller.",
                        "signature": "The order signature.",
                        "takerTokenFillAmount": "Maximum taker token amount to fill this order with."
                    },
                    "returns": {
                        "makerTokenFilledAmount": "How much maker token was filled.",
                        "takerTokenFilledAmount": "How much maker token was filled."
                    }
                },
                "fillOrKillLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": {
                    "details": "Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.      The taker will be the caller. ETH protocol fees can be      attached to this call. Any unspent ETH will be refunded to      the caller.",
                    "params": {
                        "order": "The limit order.",
                        "signature": "The order signature.",
                        "takerTokenFillAmount": "How much taker token to fill this order with."
                    },
                    "returns": {
                        "makerTokenFilledAmount": "How much maker token was filled."
                    }
                },
                "fillOrKillRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": {
                    "details": "Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.      The taker will be the caller. ETH protocol fees can be      attached to this call. Any unspent ETH will be refunded to      the caller.",
                    "params": {
                        "order": "The RFQ order.",
                        "signature": "The order signature.",
                        "takerTokenFillAmount": "How much taker token to fill this order with."
                    },
                    "returns": {
                        "makerTokenFilledAmount": "How much maker token was filled."
                    }
                },
                "fillRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": {
                    "details": "Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.      The taker will be the caller. ETH should be attached to pay the      protocol fee.",
                    "params": {
                        "order": "The RFQ order.",
                        "signature": "The order signature.",
                        "takerTokenFillAmount": "Maximum taker token amount to fill this order with."
                    },
                    "returns": {
                        "makerTokenFilledAmount": "How much maker token was filled.",
                        "takerTokenFilledAmount": "How much maker token was filled."
                    }
                },
                "getLimitOrderHash((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))": {
                    "details": "Get the canonical hash of a limit order.",
                    "params": {
                        "order": "The limit order."
                    },
                    "returns": {
                        "orderHash": "The order hash."
                    }
                },
                "getLimitOrderInfo((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))": {
                    "details": "Get the order info for a limit order.",
                    "params": {
                        "order": "The limit order."
                    },
                    "returns": {
                        "orderInfo": "Info about the order."
                    }
                },
                "getLimitOrderRelevantState((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32))": {
                    "details": "Get order info, fillable amount, and signature validity for a limit order.      Fillable amount is determined using balances and allowances of the maker.",
                    "params": {
                        "order": "The limit order.",
                        "signature": "The order signature."
                    },
                    "returns": {
                        "actualFillableTakerTokenAmount": "How much of the order is fillable         based on maker funds, in taker tokens.",
                        "isSignatureValid": "Whether the signature is valid.",
                        "orderInfo": "Info about the order."
                    }
                },
                "getProtocolFeeMultiplier()": {
                    "details": "Get the protocol fee multiplier. This should be multiplied by the      gas price to arrive at the required protocol fee to fill a native order.",
                    "returns": {
                        "multiplier": "The protocol fee multiplier."
                    }
                },
                "getRfqOrderHash((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))": {
                    "details": "Get the canonical hash of an RFQ order.",
                    "params": {
                        "order": "The RFQ order."
                    },
                    "returns": {
                        "orderHash": "The order hash."
                    }
                },
                "getRfqOrderInfo((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))": {
                    "details": "Get the order info for an RFQ order.",
                    "params": {
                        "order": "The RFQ order."
                    },
                    "returns": {
                        "orderInfo": "Info about the order."
                    }
                },
                "getRfqOrderRelevantState((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32))": {
                    "details": "Get order info, fillable amount, and signature validity for an RFQ order.      Fillable amount is determined using balances and allowances of the maker.",
                    "params": {
                        "order": "The RFQ order.",
                        "signature": "The order signature."
                    },
                    "returns": {
                        "actualFillableTakerTokenAmount": "How much of the order is fillable         based on maker funds, in taker tokens.",
                        "isSignatureValid": "Whether the signature is valid.",
                        "orderInfo": "Info about the order."
                    }
                },
                "isValidOrderSigner(address,address)": {
                    "details": "checks if a given address is registered to sign on behalf of a maker address",
                    "params": {
                        "maker": "The maker address encoded in an order (can be a contract)",
                        "signer": "The address that is providing a signature"
                    }
                },
                "migrate()": {
                    "details": "Initialize and register this feature.      Should be delegatecalled by `Migrate.migrate()`.",
                    "returns": {
                        "success": "`LibMigrate.SUCCESS` on success."
                    }
                },
                "registerAllowedOrderSigner(address,bool)": {
                    "details": "register a signer who can sign on behalf of msg.sender",
                    "params": {
                        "allowed": "True to register, false to unregister.",
                        "signer": "The address from which you plan to generate signatures"
                    }
                },
                "registerAllowedRfqOrigins(address[],bool)": {
                    "details": "Mark what tx.origin addresses are allowed to fill an order that      specifies the message sender as its txOrigin.",
                    "params": {
                        "allowed": "True to register, false to unregister.",
                        "origins": "An array of origin addresses to update."
                    }
                },
                "transferProtocolFeesForPools(bytes32[])": {
                    "details": "Transfers protocol fees from the `FeeCollector` pools into      the staking contract.",
                    "params": {
                        "poolIds": "Staking pool IDs"
                    }
                }
            },
            "stateVariables": {
                "FEATURE_NAME": {
                    "details": "Name of this feature."
                },
                "FEATURE_VERSION": {
                    "details": "Version of this feature."
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH2 0x180 PUSH1 0x40 MSTORE PUSH3 0x15 PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 PUSH3 0x1D1 JUMP JUMPDEST PUSH2 0x160 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x5C81 CODESIZE SUB DUP1 PUSH3 0x5C81 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x49 SWAP2 PUSH3 0x203 JUMP JUMPDEST DUP5 DUP5 DUP5 DUP5 DUP5 DUP4 DUP4 DUP4 DUP4 DUP4 DUP4 DUP4 DUP4 DUP13 DUP1 DUP1 PUSH1 0x0 CHAINID SWAP1 POP PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH32 0x9E5DAE0ADDAF20578AEB5D70341D092B53B4E14480AC5726438FD436DF7BA427 PUSH32 0x6C015BD22B4C69690933C1058878EBDFEF31F9AAAE40BBE86D8A09FE1B2972C DUP4 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0xD9 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x2A2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x80 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 DUP11 SWAP1 SHL AND PUSH1 0xC0 MSTORE PUSH4 0x3C9506A3 PUSH1 0xE2 SHL DUP4 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP7 POP PUSH4 0xF2541A8C SWAP6 POP PUSH1 0x4 DUP1 DUP5 ADD SWAP6 POP SWAP2 SWAP4 POP SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x15A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x180 SWAP2 SWAP1 PUSH3 0x289 JUMP JUMPDEST PUSH1 0xE0 SWAP1 DUP2 MSTORE PUSH1 0x60 SWAP5 DUP6 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP1 DUP2 AND PUSH2 0x100 MSTORE SWAP4 DUP6 SHL SWAP1 SWAP4 AND PUSH2 0x120 MSTORE SWAP1 SWAP2 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0xA0 MSTORE POP ADDRESS SWAP1 SHL PUSH2 0x140 MSTORE POP PUSH3 0x2E7 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH12 0xFFFFFFFF0000000000000000 PUSH1 0x40 DUP5 SWAP1 SHL AND PUSH8 0xFFFFFFFF00000000 PUSH1 0x20 DUP5 SWAP1 SHL AND OR PUSH4 0xFFFFFFFF DUP3 AND OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x21B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 MLOAD PUSH3 0x228 DUP2 PUSH3 0x2CE JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD SWAP1 SWAP6 POP PUSH3 0x23B DUP2 PUSH3 0x2CE JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MLOAD SWAP1 SWAP5 POP PUSH3 0x24E DUP2 PUSH3 0x2CE JUMP JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x261 DUP2 PUSH3 0x2CE JUMP JUMPDEST PUSH1 0x80 DUP8 ADD MLOAD SWAP1 SWAP3 POP PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH3 0x27B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x29B JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x2E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xE0 SHR PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0x60 SHR PUSH2 0x120 MLOAD PUSH1 0x60 SHR PUSH2 0x140 MLOAD PUSH1 0x60 SHR PUSH2 0x160 MLOAD PUSH2 0x5919 PUSH3 0x368 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x71A MSTORE POP DUP1 PUSH2 0x326D MSTORE POP DUP1 PUSH2 0x2728 MSTORE POP DUP1 PUSH2 0x2639 MSTORE POP DUP1 PUSH2 0x3E60 MSTORE POP DUP1 PUSH2 0x25AC MSTORE DUP1 PUSH2 0x3E3F MSTORE POP DUP1 PUSH2 0xC6C MSTORE DUP1 PUSH2 0x1596 MSTORE DUP1 PUSH2 0x3E13 MSTORE POP DUP1 PUSH2 0x1CE3 MSTORE DUP1 PUSH2 0x20BC MSTORE POP PUSH2 0x5919 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x24F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9A4F809C GT PUSH2 0x138 JUMPI DUP1 PUSH4 0xB4658BFB GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0xEA7FAA61 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xF6E0F6A5 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF6E0F6A5 EQ PUSH2 0x69D JUMPI DUP1 PUSH4 0xFD5F995B EQ PUSH2 0x6BD JUMPI DUP1 PUSH4 0xFE55A3EF EQ PUSH2 0x6DD JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0xEA7FAA61 EQ PUSH2 0x66A JUMPI DUP1 PUSH4 0xF6274F66 EQ PUSH2 0x68A JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0xB4658BFB EQ PUSH2 0x5F5 JUMPI DUP1 PUSH4 0xD0A55FB0 EQ PUSH2 0x615 JUMPI DUP1 PUSH4 0xDAB400F3 EQ PUSH2 0x635 JUMPI DUP1 PUSH4 0xDD11D225 EQ PUSH2 0x64A JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0xAA6B21CD GT PUSH2 0x107 JUMPI DUP1 PUSH4 0xAD354EEB GT PUSH2 0xEC JUMPI DUP1 PUSH4 0xAD354EEB EQ PUSH2 0x586 JUMPI DUP1 PUSH4 0xB09F1FB1 EQ PUSH2 0x5B5 JUMPI DUP1 PUSH4 0xB10A33F4 EQ PUSH2 0x5D5 JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0xAA6B21CD EQ PUSH2 0x546 JUMPI DUP1 PUSH4 0xAA77476C EQ PUSH2 0x566 JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0x9A4F809C EQ PUSH2 0x4D1 JUMPI DUP1 PUSH4 0x9BAA45A8 EQ PUSH2 0x4F1 JUMPI DUP1 PUSH4 0x9F0434F5 EQ PUSH2 0x511 JUMPI DUP1 PUSH4 0xA0EDCEF5 EQ PUSH2 0x531 JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0x487B5C20 GT PUSH2 0x1CB JUMPI DUP1 PUSH4 0x86A0C8D7 GT PUSH2 0x19A JUMPI DUP1 PUSH4 0x9240529C GT PUSH2 0x17F JUMPI DUP1 PUSH4 0x9240529C EQ PUSH2 0x47E JUMPI DUP1 PUSH4 0x935C82A4 EQ PUSH2 0x491 JUMPI DUP1 PUSH4 0x95480889 EQ PUSH2 0x4B1 JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0x86A0C8D7 EQ PUSH2 0x43C JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0x45C JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0x487B5C20 EQ PUSH2 0x3AB JUMPI DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x3CD JUMPI DUP1 PUSH4 0x6B52A4A8 EQ PUSH2 0x3EF JUMPI DUP1 PUSH4 0x7D49EC1A EQ PUSH2 0x41C JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0x346693C5 GT PUSH2 0x222 JUMPI DUP1 PUSH4 0x3CD2F026 GT PUSH2 0x207 JUMPI DUP1 PUSH4 0x3CD2F026 EQ PUSH2 0x33D JUMPI DUP1 PUSH4 0x414E4CCF EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0x438CDFC5 EQ PUSH2 0x37E JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0x346693C5 EQ PUSH2 0x2F0 JUMPI DUP1 PUSH4 0x37F381D8 EQ PUSH2 0x31D JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0x16A6D65 EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0x31B905C EQ PUSH2 0x28A JUMPI DUP1 PUSH4 0xF0E8CF7 EQ PUSH2 0x29F JUMPI DUP1 PUSH4 0x1FB09795 EQ PUSH2 0x2C1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x260 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x274 PUSH2 0x26F CALLDATASIZE PUSH1 0x4 PUSH2 0x4BB6 JUMP JUMPDEST PUSH2 0x6FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x50B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x296 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x274 PUSH2 0x718 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x2BA CALLDATASIZE PUSH1 0x4 PUSH2 0x4705 JUMP JUMPDEST PUSH2 0x73C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E1 PUSH2 0x2DC CALLDATASIZE PUSH1 0x4 PUSH2 0x4A1E JUMP JUMPDEST PUSH2 0x7EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5677 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x310 PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x4BB6 JUMP JUMPDEST PUSH2 0x904 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x5669 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x329 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E1 PUSH2 0x338 CALLDATASIZE PUSH1 0x4 PUSH2 0x4BD2 JUMP JUMPDEST PUSH2 0x9BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x358 CALLDATASIZE PUSH1 0x4 PUSH2 0x4696 JUMP JUMPDEST PUSH2 0xABC JUMP JUMPDEST PUSH2 0x370 PUSH2 0x36B CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC7 JUMP JUMPDEST PUSH2 0xAEF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP3 SWAP2 SWAP1 PUSH2 0x57C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39E PUSH2 0x399 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C08 JUMP JUMPDEST PUSH2 0xB99 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x57A5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C0 PUSH2 0xC6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x57F3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E2 PUSH2 0xC8E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x52F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x40F PUSH2 0x40A CALLDATASIZE PUSH1 0x4 PUSH2 0x449B JUMP JUMPDEST PUSH2 0xCC7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x50A9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x437 CALLDATASIZE PUSH1 0x4 PUSH2 0x4A02 JUMP JUMPDEST PUSH2 0xD15 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x457 CALLDATASIZE PUSH1 0x4 PUSH2 0x4705 JUMP JUMPDEST PUSH2 0xD96 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x471 PUSH2 0xE37 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x5236 JUMP JUMPDEST PUSH2 0x39E PUSH2 0x48C CALLDATASIZE PUSH1 0x4 PUSH2 0x4A7C JUMP JUMPDEST PUSH2 0x1355 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x4AC CALLDATASIZE PUSH1 0x4 PUSH2 0x4597 JUMP JUMPDEST PUSH2 0x1418 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x310 PUSH2 0x4CC CALLDATASIZE PUSH1 0x4 PUSH2 0x4A02 JUMP JUMPDEST PUSH2 0x143F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x4EC CALLDATASIZE PUSH1 0x4 PUSH2 0x49C2 JUMP JUMPDEST PUSH2 0x14CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x50C CALLDATASIZE PUSH1 0x4 PUSH2 0x4814 JUMP JUMPDEST PUSH2 0x14D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x52C CALLDATASIZE PUSH1 0x4 PUSH2 0x44D3 JUMP JUMPDEST PUSH2 0x1506 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C0 PUSH2 0x1594 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x552 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x370 PUSH2 0x561 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C48 JUMP JUMPDEST PUSH2 0x15B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x370 PUSH2 0x581 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C08 JUMP JUMPDEST PUSH2 0x1666 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5A6 PUSH2 0x5A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x48B3 JUMP JUMPDEST PUSH2 0x16D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x500B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x5D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x45E7 JUMP JUMPDEST PUSH2 0x193A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x5F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x4597 JUMP JUMPDEST PUSH2 0x1A53 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x601 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5A6 PUSH2 0x610 CALLDATASIZE PUSH1 0x4 PUSH2 0x477F JUMP JUMPDEST PUSH2 0x1A7A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x621 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x630 CALLDATASIZE PUSH1 0x4 PUSH2 0x49C2 JUMP JUMPDEST PUSH2 0x1CD5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x641 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x274 PUSH2 0x1CE1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x656 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x274 PUSH2 0x665 CALLDATASIZE PUSH1 0x4 PUSH2 0x4A02 JUMP JUMPDEST PUSH2 0x1D05 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x676 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x685 CALLDATASIZE PUSH1 0x4 PUSH2 0x456A JUMP JUMPDEST PUSH2 0x1D13 JUMP JUMPDEST PUSH2 0x370 PUSH2 0x698 CALLDATASIZE PUSH1 0x4 PUSH2 0x4A7C JUMP JUMPDEST PUSH2 0x1DAF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x6B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x4915 JUMP JUMPDEST PUSH2 0x1E4D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x6D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x44D3 JUMP JUMPDEST PUSH2 0x1E7D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x6F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x4BB6 JUMP JUMPDEST PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x710 PUSH2 0x70B DUP4 PUSH2 0x1F81 JUMP JUMPDEST PUSH2 0x20B8 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0x74E JUMPI POP DUP1 MLOAD DUP4 MLOAD EQ JUMPDEST PUSH2 0x78D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x541C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x7E6 JUMPI PUSH2 0x7DE CALLER DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7A9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x7BD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x7D1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x210A JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x790 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x7F4 PUSH2 0x40E7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x800 DUP6 PUSH2 0x143F JUMP JUMPDEST SWAP3 POP PUSH2 0x891 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH2 0x21F2 JUMP JUMPDEST DUP4 MLOAD SWAP1 SWAP3 POP PUSH1 0x0 SWAP1 PUSH2 0x8B1 SWAP1 PUSH2 0x8AC CALLDATASIZE DUP9 SWAP1 SUB DUP9 ADD DUP9 PUSH2 0x4CCD JUMP JUMPDEST PUSH2 0x231B JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x8FA JUMPI POP PUSH2 0x8FA DUP7 PUSH1 0xA0 ADD MLOAD DUP3 PUSH2 0xCC7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x90C PUSH2 0x40E7 JUMP JUMPDEST PUSH2 0x915 DUP3 PUSH2 0x6FD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH2 0x921 PUSH2 0x246C JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP8 MLOAD DUP5 AND DUP6 MSTORE DUP3 MSTORE DUP1 DUP5 KECCAK256 DUP3 DUP9 ADD MLOAD SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x100 DUP6 ADD MLOAD PUSH2 0x120 DUP7 ADD MLOAD SWAP3 SWAP4 POP PUSH2 0x98F SWAP3 DUP6 SWAP3 SWAP2 SWAP1 DUP6 PUSH2 0x2479 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9B6 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C4 PUSH2 0x40E7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9D0 DUP6 PUSH2 0x904 JUMP JUMPDEST SWAP3 POP PUSH2 0xA61 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x80 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH2 0x21F2 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0xA73 DUP5 PUSH1 0x0 ADD MLOAD DUP7 PUSH2 0x231B JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x80 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x8FA JUMPI POP PUSH2 0x8FA DUP7 PUSH1 0x80 ADD MLOAD DUP3 PUSH2 0xCC7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xAEA JUMPI PUSH2 0xAE2 DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0xAD6 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x256C JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xABF JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER ADDRESS EQ PUSH2 0xB0A JUMPI PUSH2 0xB0A PUSH2 0xB05 CALLER PUSH2 0x27BA JUMP JUMPDEST PUSH2 0x2872 JUMP JUMPDEST PUSH2 0xB12 PUSH2 0x4109 JUMP JUMPDEST PUSH2 0xB7F PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH2 0x287A JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP10 SWAP1 SWAP9 POP SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBA3 PUSH2 0x4109 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLER PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0xBEE SWAP1 PUSH2 0x2C4D JUMP JUMPDEST SWAP1 POP DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x20 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0xC5E JUMPI PUSH2 0xC5E PUSH2 0xB05 PUSH2 0xC2F DUP8 PUSH2 0x6FD JUMP JUMPDEST DUP4 PUSH1 0x20 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2FF6 JUMP JUMPDEST PUSH1 0x40 ADD MLOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4C696D69744F7264657273000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCD1 PUSH2 0x246C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP3 DUP7 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD20 DUP3 PUSH2 0x1D05 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0xD6D JUMPI POP PUSH2 0xD6B DUP3 PUSH1 0xA0 ADD MLOAD CALLER PUSH2 0xCC7 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xD84 JUMPI PUSH2 0xD84 PUSH2 0xB05 DUP3 CALLER DUP6 PUSH1 0xA0 ADD MLOAD PUSH2 0x30B4 JUMP JUMPDEST PUSH2 0xD92 DUP2 DUP4 PUSH1 0xA0 ADD MLOAD PUSH2 0x30EC JUMP JUMPDEST POP POP JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0xDA8 JUMPI POP DUP1 MLOAD DUP4 MLOAD EQ JUMPDEST PUSH2 0xDDE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x541C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x7E6 JUMPI PUSH2 0xE2F CALLER DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xDFA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE0E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE22 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x315F JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xDE1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE62 PUSH32 0x3CD2F02600000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xE8B PUSH32 0xF6274F6600000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xEB4 PUSH32 0xAA77476C00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xEDD PUSH32 0x9240529C00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xF06 PUSH32 0x438CDFC500000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xF2F PUSH32 0x414E4CCF00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xF58 PUSH32 0xAA6B21CD00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xF81 PUSH32 0x7D49EC1A00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xFAA PUSH32 0xFE55A3EF00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xFD3 PUSH32 0x9BAA45A800000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xFFC PUSH32 0xF6E0F6A500000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x1025 PUSH32 0xD0A55FB000000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x104E PUSH32 0xB10A33F400000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x1077 PUSH32 0x86A0C8D700000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x10A0 PUSH32 0x9F0434F500000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x10C9 PUSH32 0x9A4F809C00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x10F2 PUSH32 0x935C82A400000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x111B PUSH32 0xF0E8CF700000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x1144 PUSH32 0xFD5F995B00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x116D PUSH32 0x9548088900000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x1196 PUSH32 0x346693C500000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x11BF PUSH32 0xDD11D22500000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x11E8 PUSH32 0x16A6D6500000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x1211 PUSH32 0x487B5C2000000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x123A PUSH32 0xB09F1FB100000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x1263 PUSH32 0x1FB0979500000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x128C PUSH32 0x37F381D800000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x12B5 PUSH32 0xB4658BFB00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x12DE PUSH32 0xAD354EEB00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x1307 PUSH32 0xEA7FAA6100000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x1330 PUSH32 0x6B52A4A800000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x135F PUSH2 0x4109 JUMP JUMPDEST PUSH2 0x13CC PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH2 0x287A JUMP JUMPDEST SWAP1 POP DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x20 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x140D JUMPI PUSH2 0x140D PUSH2 0xB05 PUSH2 0xC2F DUP8 PUSH2 0x1D05 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xC5E SWAP1 PUSH2 0x32C3 JUMP JUMPDEST PUSH2 0x1422 DUP5 CALLER PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0x1433 JUMPI PUSH2 0x1433 PUSH2 0xB05 DUP6 CALLER PUSH2 0x3366 JUMP JUMPDEST PUSH2 0x7E6 DUP5 DUP5 DUP5 DUP5 PUSH2 0x210A JUMP JUMPDEST PUSH2 0x1447 PUSH2 0x40E7 JUMP JUMPDEST PUSH2 0x1450 DUP3 PUSH2 0x1D05 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH2 0x145C PUSH2 0x246C JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP8 MLOAD DUP5 AND DUP6 MSTORE DUP3 MSTORE DUP1 DUP5 KECCAK256 DUP3 DUP9 ADD MLOAD SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x140 DUP6 ADD MLOAD PUSH2 0x160 DUP7 ADD MLOAD SWAP3 SWAP4 POP PUSH2 0x9B6 SWAP3 DUP6 SWAP3 SWAP2 SWAP1 DUP6 PUSH2 0x2479 JUMP JUMPDEST PUSH2 0xAEA CALLER DUP5 DUP5 DUP5 PUSH2 0x210A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xD92 JUMPI PUSH2 0x14FE DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x14F1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xD15 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x14D9 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0x1518 JUMPI POP DUP1 MLOAD DUP4 MLOAD EQ JUMPDEST PUSH2 0x154E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x541C JUMP JUMPDEST PUSH2 0x1558 DUP5 CALLER PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0x1569 JUMPI PUSH2 0x1569 PUSH2 0xB05 DUP6 CALLER PUSH2 0x3366 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x158D JUMPI PUSH2 0x1585 DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xDFA JUMPI INVALID JUMPDEST PUSH1 0x1 ADD PUSH2 0x156C JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER ADDRESS EQ PUSH2 0x15CE JUMPI PUSH2 0x15CE PUSH2 0xB05 CALLER PUSH2 0x27BA JUMP JUMPDEST PUSH2 0x15D6 PUSH2 0x4109 JUMP JUMPDEST PUSH2 0x164B PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH2 0x2C4D JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP11 SWAP1 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1671 PUSH2 0x4109 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLER PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x16BC SWAP1 PUSH2 0x2C4D JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP1 DUP6 DUP5 EQ PUSH2 0x1711 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x5362 JUMP JUMPDEST DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1728 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1762 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x174F PUSH2 0x40E7 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1747 JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x177C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17A6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x17C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17EA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x192F JUMPI ADDRESS PUSH4 0x37F381D8 DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x180A JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x140 MUL ADD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x181D JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x80 MUL ADD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1840 SWAP3 SWAP2 SWAP1 PUSH2 0x56AD JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1858 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x18A6 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x18A3 SWAP2 DUP2 ADD SWAP1 PUSH2 0x4B3A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x18AF JUMPI PUSH2 0x1927 JUMP JUMPDEST DUP3 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x18BC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP2 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x18D4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP1 DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1913 JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x17F0 JUMP JUMPDEST POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST CALLER ORIGIN EQ PUSH2 0x1973 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x53BF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197D PUSH2 0x246C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1A12 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP6 MLOAD DUP6 SWAP3 SWAP1 DUP8 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x19AD JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 ADD PUSH2 0x1982 JUMP JUMPDEST POP PUSH32 0x2DFEAD5EB769B298E82DD9650B31C40559A3D42701DBF53C931BC2682847C31 CALLER DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1A46 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4F15 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x1A5D DUP5 CALLER PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0x1A6E JUMPI PUSH2 0x1A6E PUSH2 0xB05 DUP6 CALLER PUSH2 0x3366 JUMP JUMPDEST PUSH2 0x7E6 DUP5 DUP5 DUP5 DUP5 PUSH2 0x315F JUMP JUMPDEST PUSH1 0x60 DUP1 DUP1 DUP6 DUP5 EQ PUSH2 0x1AB7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x5362 JUMP JUMPDEST DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1ACE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B08 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x1AF5 PUSH2 0x40E7 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1AED JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1B22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B4C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1B66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B90 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x192F JUMPI ADDRESS PUSH4 0x1FB09795 DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x1BB0 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x180 MUL ADD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x1BC3 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x80 MUL ADD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BE6 SWAP3 SWAP2 SWAP1 PUSH2 0x5533 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1C4C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1C49 SWAP2 DUP2 ADD SWAP1 PUSH2 0x4B3A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1C55 JUMPI PUSH2 0x1CCD JUMP JUMPDEST DUP3 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1C62 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP2 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1C7A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP1 DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1CB9 JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1B96 JUMP JUMPDEST PUSH2 0xAEA CALLER DUP5 DUP5 DUP5 PUSH2 0x315F JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x710 PUSH2 0x70B DUP4 PUSH2 0x3421 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D1D PUSH2 0x246C JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO OR SWAP1 SSTORE MLOAD SWAP2 SWAP3 POP PUSH32 0x6EA9DBE8B2CC119348716A9220A0742AD62B7884ECB0FF4B32CD508121FD9379 SWAP2 PUSH2 0x1A46 SWAP2 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH2 0x4EE4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1DBA PUSH2 0x4109 JUMP JUMPDEST PUSH2 0x1E27 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH2 0x287A JUMP JUMPDEST SWAP1 POP PUSH2 0x1E36 DUP2 PUSH1 0x0 ADD MLOAD PUSH2 0x32C3 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xD92 JUMPI PUSH2 0x1E75 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1E68 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1E50 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0x1E8F JUMPI POP DUP1 MLOAD DUP4 MLOAD EQ JUMPDEST PUSH2 0x1EC5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x541C JUMP JUMPDEST PUSH2 0x1ECF DUP5 CALLER PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0x1EE0 JUMPI PUSH2 0x1EE0 PUSH2 0xB05 DUP6 CALLER PUSH2 0x3366 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x158D JUMPI PUSH2 0x1EFC DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7A9 JUMPI INVALID JUMPDEST PUSH1 0x1 ADD PUSH2 0x1EE3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F0F DUP3 PUSH2 0x6FD JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x80 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1F5C JUMPI POP PUSH2 0x1F5A DUP3 PUSH1 0x80 ADD MLOAD CALLER PUSH2 0xCC7 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1F73 JUMPI PUSH2 0x1F73 PUSH2 0xB05 DUP3 CALLER DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0x30B4 JUMP JUMPDEST PUSH2 0xD92 DUP2 DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0x30EC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xE593D3FDFA8B60E5E17A1B2204662ECBE15C23F2084B9AD5BAE40359540A7DA9 DUP2 MSTORE DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x100 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 DUP2 KECCAK256 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x20ED SWAP3 SWAP2 SWAP1 PUSH2 0x4E59 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2114 PUSH2 0x246C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP6 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP2 POP DUP3 DUP2 GT ISZERO PUSH2 0x216B JUMPI PUSH2 0x216B PUSH2 0xB05 DUP5 DUP4 PUSH2 0x3598 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP6 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0xFE7FFB1EDFE79F4DF716CB2DCAD21CF2F31B104D816A7976BA1E6E4653C1EFB1 SWAP1 PUSH2 0x21E2 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x4FAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 EQ DUP1 PUSH2 0x222D JUMPI POP PUSH1 0x60 DUP3 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO JUMPDEST ISZERO PUSH2 0x223A JUMPI POP PUSH1 0x0 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x80 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2250 JUMPI INVALID JUMPDEST EQ PUSH2 0x225D JUMPI POP PUSH1 0x0 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22B6 DUP4 PUSH1 0x80 ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD SUB PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x35CE JUMP JUMPDEST SWAP1 POP PUSH2 0x22D3 DUP2 PUSH2 0x22CE DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x35EC JUMP JUMPDEST PUSH2 0x371E JUMP JUMPDEST SWAP1 POP PUSH2 0x2314 PUSH2 0x230F DUP3 DUP6 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3734 JUMP JUMPDEST PUSH2 0x3758 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2327 DUP4 DUP4 PUSH2 0x3784 JUMP JUMPDEST PUSH1 0x2 DUP3 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2336 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x239E JUMPI PUSH1 0x1 DUP4 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x236B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5218 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x238D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH2 0x2443 JUMP JUMPDEST PUSH1 0x3 DUP3 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x23AD JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2443 JUMPI PUSH1 0x0 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 MSTORE DUP4 PUSH1 0x1C MSTORE PUSH1 0x3C PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x1 DUP2 DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x2413 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5218 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2435 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP2 POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xD0F JUMPI PUSH2 0xD0F PUSH2 0xB05 PUSH1 0x5 DUP6 PUSH2 0x3830 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD0F PUSH1 0x7 PUSH2 0x3866 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2483 PUSH2 0x246C JUMP JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND SWAP3 DUP11 ADD DUP4 SWAP1 MSTORE SWAP3 SWAP4 POP SWAP2 DUP8 AND GT PUSH2 0x24DA JUMPI PUSH1 0x20 DUP8 ADD PUSH1 0x2 JUMPDEST SWAP1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x24CF JUMPI INVALID JUMPDEST DUP2 MSTORE POP POP POP POP PUSH2 0x158D JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP2 AND ISZERO PUSH2 0x250D JUMPI PUSH1 0x20 DUP8 ADD PUSH1 0x3 PUSH2 0x24C2 JUMP JUMPDEST POP TIMESTAMP PUSH8 0xFFFFFFFFFFFFFFFF AND DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0x2547 JUMPI PUSH1 0x20 DUP7 ADD PUSH1 0x4 JUMPDEST SWAP1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x253D JUMPI INVALID JUMPDEST DUP2 MSTORE POP POP POP PUSH2 0x158D JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x255A JUMPI PUSH1 0x20 DUP7 ADD PUSH1 0x3 PUSH2 0x2530 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP8 ADD DUP2 SWAP1 MSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x319BED9A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x319BED9A SWAP1 PUSH2 0x25E1 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x50B4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x260F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2633 SWAP2 SWAP1 PUSH2 0x49A6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2690 SWAP2 SWAP1 PUSH2 0x4E92 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x26A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x26BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x26E0 SWAP2 SWAP1 PUSH2 0x4CE8 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xAEA JUMPI PUSH1 0x40 MLOAD PUSH32 0xA3B4A32700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA3B4A327 SWAP1 PUSH2 0x2783 SWAP1 DUP6 SWAP1 DUP2 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 ADD SWAP1 PUSH1 0x4 ADD PUSH2 0x4EB3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x279D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x27B1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xF0EC779B0BCDA6D84ABF99EE2C67647D1100EBBB553A9C2D1C2BA1579592832C DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x27EE SWAP2 SWAP1 PUSH2 0x4E92 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH2 0x2882 PUSH2 0x4109 JUMP JUMPDEST PUSH2 0x288A PUSH2 0x40E7 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x2895 SWAP1 PUSH2 0x143F JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x28A9 JUMPI INVALID JUMPDEST EQ PUSH2 0x28CE JUMPI PUSH2 0x28CE PUSH2 0xB05 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x28C9 JUMPI INVALID JUMPDEST PUSH2 0x3881 JUMP JUMPDEST DUP3 MLOAD PUSH1 0xC0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2930 JUMPI POP DUP3 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0xC0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2953 JUMPI PUSH2 0x2953 PUSH2 0xB05 DUP3 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0xC0 ADD MLOAD PUSH2 0x38B7 JUMP JUMPDEST DUP3 MLOAD PUSH1 0xE0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x29B5 JUMPI POP DUP3 PUSH1 0x80 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x29D8 JUMPI PUSH2 0x29D8 PUSH2 0xB05 DUP3 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x80 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0x38EF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29EC DUP3 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x231B JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2A3F JUMPI POP DUP4 MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0x2A3D SWAP1 DUP3 PUSH2 0xCC7 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x2A5B JUMPI DUP2 MLOAD DUP5 MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0x2A5B SWAP2 PUSH2 0xB05 SWAP2 DUP5 SWAP1 PUSH2 0x3927 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x120 ADD MLOAD PUSH2 0x2A6C SWAP1 PUSH2 0x395F JUMP JUMPDEST DUP3 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH2 0x140 DUP2 ADD DUP3 MSTORE DUP3 MLOAD DUP2 MSTORE DUP5 MLOAD PUSH1 0xA0 SWAP1 DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP1 DUP10 ADD DUP1 MLOAD DUP5 AND DUP7 DUP9 ADD MSTORE MLOAD DUP4 AND DUP2 DUP7 ADD MSTORE DUP9 MLOAD MLOAD DUP4 AND PUSH1 0x80 DUP7 ADD MSTORE DUP9 MLOAD SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP2 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MLOAD DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0xC0 DUP5 ADD MSTORE DUP7 MLOAD SWAP1 SWAP2 ADD MLOAD DUP2 AND PUSH1 0xE0 DUP4 ADD MSTORE DUP6 DUP4 ADD MLOAD DUP2 AND PUSH2 0x100 DUP4 ADD MSTORE SWAP2 DUP4 ADD MLOAD SWAP1 SWAP2 AND PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x2B21 SWAP1 PUSH2 0x3A34 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x40 DUP6 ADD MSTORE SWAP1 DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE DUP4 MLOAD PUSH1 0x80 ADD MLOAD AND ISZERO PUSH2 0x2BD8 JUMPI PUSH2 0x2BA3 DUP3 PUSH1 0x20 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x35CE JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE DUP5 MLOAD PUSH1 0x20 DUP2 ADD MLOAD SWAP2 DUP7 ADD MLOAD PUSH2 0x100 SWAP1 SWAP2 ADD MLOAD PUSH2 0x2BD8 SWAP4 PUSH2 0x3BF5 JUMP JUMPDEST DUP1 MLOAD DUP4 MLOAD PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x60 DUP1 DUP8 ADD MLOAD PUSH2 0x100 DUP5 ADD MLOAD DUP5 MLOAD PUSH1 0x20 DUP1 DUP8 ADD MLOAD SWAP1 DUP11 ADD MLOAD PUSH1 0x40 DUP1 DUP13 ADD MLOAD SWAP7 DUP13 ADD MLOAD DUP13 MLOAD PUSH2 0x120 SWAP1 SWAP11 ADD MLOAD SWAP2 MLOAD PUSH32 0xAB614D2B738543C0EA21F56347CF696A3A0C42A7CBEC3212A5CA22A4DCFF2124 SWAP12 PUSH2 0x2C3F SWAP12 SWAP1 SWAP11 SWAP10 SWAP4 SWAP1 SWAP2 PUSH2 0x510D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C55 PUSH2 0x4109 JUMP JUMPDEST PUSH2 0x2C5D PUSH2 0x40E7 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x2C68 SWAP1 PUSH2 0x904 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2C7C JUMPI INVALID JUMPDEST EQ PUSH2 0x2C9C JUMPI PUSH2 0x2C9C PUSH2 0xB05 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x28C9 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x2CA6 PUSH2 0x246C JUMP JUMPDEST DUP5 MLOAD PUSH1 0xC0 ADD MLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ORIGIN EQ DUP1 ISZERO SWAP1 PUSH2 0x2D0C JUMPI POP DUP4 MLOAD PUSH1 0xC0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 ORIGIN DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0x2D28 JUMPI DUP2 MLOAD DUP5 MLOAD PUSH1 0xC0 ADD MLOAD PUSH2 0x2D28 SWAP2 PUSH2 0xB05 SWAP2 ORIGIN SWAP1 PUSH2 0x3CEB JUMP JUMPDEST POP DUP3 MLOAD PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2D8B JUMPI POP DUP3 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2DAE JUMPI PUSH2 0x2DAE PUSH2 0xB05 DUP3 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0x38B7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DC2 DUP3 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x231B JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2E15 JUMPI POP DUP4 MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0x2E13 SWAP1 DUP3 PUSH2 0xCC7 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x2E31 JUMPI DUP2 MLOAD DUP5 MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0x2E31 SWAP2 PUSH2 0xB05 SWAP2 DUP5 SWAP1 PUSH2 0x3927 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x140 DUP2 ADD DUP3 MSTORE DUP3 MLOAD DUP2 MSTORE DUP5 MLOAD PUSH1 0x80 SWAP1 DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP4 ADD MSTORE DUP6 ADD MLOAD PUSH2 0x2F7C SWAP3 DUP3 ADD SWAP1 PUSH2 0x2E7C JUMPI DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x2E7E JUMP JUMPDEST ADDRESS JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH2 0x3A34 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x40 DUP1 DUP7 ADD DUP3 SWAP1 MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x20 DUP1 DUP7 ADD DUP3 SWAP1 MSTORE DUP5 MLOAD DUP8 MLOAD PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x60 DUP11 ADD MLOAD DUP3 MLOAD SWAP5 DUP4 ADD MLOAD PUSH1 0xE0 SWAP1 SWAP4 ADD MLOAD SWAP8 MLOAD PUSH32 0x829FA99D94DC4636925B38632E625736A614C154D55006B7AB6BEA979C210C32 SWAP9 PUSH2 0x2C3F SWAP9 SWAP6 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP3 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x518D JUMP JUMPDEST PUSH1 0x60 PUSH32 0x21948612B5EF214EC0508DF4901600E07A810A371BE76B25D59ADE73826E3D97 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x302E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x51F1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x88B2C08E4A5F57D416AD23DAD18C20497CCFE684B1379B28FD564ADAF582B80F DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x302E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x50E1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30F6 PUSH2 0x246C JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 OR SWAP1 SSTORE MLOAD SWAP1 SWAP2 POP PUSH32 0xA6EB7CDC219E1518CED964E9A34E61D68A94E4F1569DB3E84256BA981BA52753 SWAP1 PUSH2 0x1A46 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x50BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3169 PUSH2 0x246C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP6 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP2 POP DUP3 DUP2 GT ISZERO PUSH2 0x31C0 JUMPI PUSH2 0x31C0 PUSH2 0xB05 DUP5 DUP4 PUSH2 0x3598 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP5 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP6 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0xA91FE7AE62FCE669DF2C7F880F8C14D178531AAE72515558E5C948E37C32A572 SWAP1 PUSH2 0x21E2 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x4FAE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0x3295 SWAP1 DUP5 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x5263 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x158D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST DUP1 CALLVALUE GT DUP1 ISZERO PUSH2 0x32D2 JUMPI POP CALLER ADDRESS EQ ISZERO JUMPDEST ISZERO PUSH2 0x3363 JUMPI PUSH1 0x0 PUSH2 0x32E3 CALLVALUE DUP4 PUSH2 0x3D23 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x330B SWAP1 PUSH2 0x4E8F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3348 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x334D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xAEA JUMPI PUSH2 0xAEA PUSH2 0xB05 CALLER DUP5 PUSH2 0x3D42 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x84356DB366796DC6E2AEB1AD74B631FE4E5EC6A650464DA6059E9F95C8810A10 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x339C SWAP3 SWAP2 SWAP1 PUSH2 0x4F87 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xCE918627CB55462DDBB85E73DE69A8B322F2BC88F4507C52FCAD6D4C33C29D49 DUP2 MSTORE DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x100 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x140 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x160 DUP3 ADD MSTORE PUSH2 0x160 DUP4 ADD MLOAD PUSH2 0x180 DUP3 ADD MSTORE PUSH2 0x1A0 DUP2 KECCAK256 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xB12BC7E7D341F4431D6FAF05F991EE3B779183E341B24243064E10C886CD1873 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x339C SWAP3 SWAP2 SWAP1 PUSH2 0x57E5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35E4 DUP4 PUSH2 0x35DE DUP7 DUP6 PUSH2 0x3D78 JUMP JUMPDEST SWAP1 PUSH2 0x3DA9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2314 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E DUP5 ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x362C SWAP3 SWAP2 SWAP1 PUSH2 0x4F87 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3644 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3658 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x367C SWAP2 SWAP1 PUSH2 0x4CE8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x36CE SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x4E92 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22CE SWAP2 SWAP1 PUSH2 0x4CE8 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x372D JUMPI DUP2 PUSH2 0x2314 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35E4 DUP4 PUSH2 0x35DE PUSH2 0x3748 DUP3 PUSH1 0x1 PUSH2 0x3D23 JUMP JUMPDEST PUSH2 0x3752 DUP9 DUP8 PUSH2 0x3D78 JUMP JUMPDEST SWAP1 PUSH2 0x3DD3 JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3780 JUMPI PUSH2 0x3780 PUSH2 0xB05 PUSH1 0x3 DUP5 PUSH2 0x3DEF JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 GT ISZERO DUP1 PUSH2 0x37DB JUMPI POP PUSH1 0x60 DUP2 ADD MLOAD PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A1 GT ISZERO JUMPDEST ISZERO PUSH2 0x37EE JUMPI PUSH2 0x37EE PUSH2 0xB05 PUSH1 0x5 DUP5 PUSH2 0x3830 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x37FD JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x3811 JUMPI PUSH2 0x3811 PUSH2 0xB05 PUSH1 0x3 DUP5 PUSH2 0x3830 JUMP JUMPDEST PUSH1 0x1 DUP2 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3820 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xD92 JUMPI PUSH2 0xD92 PUSH2 0xB05 PUSH1 0x0 DUP5 JUMPDEST PUSH1 0x60 PUSH32 0xF18F11F3027E735C758137924B262D4D3AFF0037DCD785ACA3C699FA05D960BD DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x339C SWAP3 SWAP2 SWAP1 PUSH2 0x52E3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x3876 JUMPI INVALID JUMPDEST PUSH1 0x1 ADD SWAP1 SHL SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x47AB394E41470191EAF9FA542E84AC483A12665FBD616EB8D1C022CED6C94000 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x339C SWAP3 SWAP2 SWAP1 PUSH2 0x5207 JUMP JUMPDEST PUSH1 0x60 PUSH32 0x5D3300180A4547B3E27137BE832D3EBF56F1BA5EBB30DD580999C61F77FA6396 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x302E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x50E1 JUMP JUMPDEST PUSH1 0x60 PUSH32 0x15E6A383BB02D79EE933B927FBECBA78CDDE16CBA84B94A99661F44BCCE3B736 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x302E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x50E1 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xF13E65D925201525F3D71A731833B19BB26E44CFBD97CAF72A366B73866F7124 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x302E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x50E1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x396A PUSH2 0x3E0C JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x397B JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x713 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3986 DUP5 PUSH2 0x3E38 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x39AE SWAP1 PUSH2 0x4E8F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x39EB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x39F0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x3A2B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x54D6 JUMP JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3A73 DUP4 PUSH2 0x100 ADD MLOAD PUSH2 0x3A6E DUP6 PUSH2 0x120 ADD MLOAD DUP7 PUSH1 0xE0 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3E85 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3EE6 JUMP JUMPDEST SWAP2 POP PUSH2 0x3ABE DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0xE0 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0xC0 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x35CE JUMP JUMPDEST SWAP1 POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ISZERO DUP1 PUSH2 0x3AEF JUMPI POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO JUMPDEST ISZERO PUSH2 0x3AFF JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x3BF0 JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x3B21 SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x3F19 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3B3B PUSH2 0x246C JUMP JUMPDEST DUP5 MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS EQ ISZERO PUSH2 0x3B9C JUMPI PUSH2 0x3B97 DUP4 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP5 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3F6E JUMP JUMPDEST PUSH2 0x3BC6 JUMP JUMPDEST PUSH2 0x3BC6 DUP4 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3BF5 JUMP JUMPDEST PUSH2 0x3BF0 DUP4 PUSH1 0x80 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP5 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3BF5 JUMP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ADDRESS EQ ISZERO PUSH2 0x3C45 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x5479 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE DUP2 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x64 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND GAS CALL RETURNDATASIZE PUSH1 0x1 DUP4 MLOAD EQ PUSH1 0x20 DUP3 LT ISZERO AND DUP2 ISZERO OR DUP3 AND SWAP2 POP DUP2 PUSH2 0x27B1 JUMPI DUP1 PUSH1 0x0 DUP5 RETURNDATACOPY DUP1 DUP4 REVERT JUMPDEST PUSH1 0x60 PUSH32 0xC0972F3CC4234CA2091DE7E7BC7081494BD29AC280167D66F0D44168973B1634 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x302E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x50E1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x3D3C JUMPI PUSH2 0x3D3C PUSH2 0xB05 PUSH1 0x2 DUP6 DUP6 PUSH2 0x4050 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xBDE95CC2119E0200D80642397198ABFCF98E6E4DDDD0DE9C6320D86252AD40AB DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x339C SWAP3 SWAP2 SWAP1 PUSH2 0x4FE5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3D87 JUMPI POP PUSH1 0x0 PUSH2 0xD0F JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x3D94 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x2314 JUMPI PUSH2 0x2314 PUSH2 0xB05 PUSH1 0x1 DUP7 DUP7 PUSH2 0x4050 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3DBF JUMPI PUSH2 0x3DBF PUSH2 0xB05 PUSH1 0x3 DUP6 DUP6 PUSH2 0x4050 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x3DCA JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x2314 JUMPI PUSH2 0x2314 PUSH2 0xB05 PUSH1 0x0 DUP7 DUP7 PUSH2 0x4050 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xC996AF7B PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x339C SWAP3 SWAP2 SWAP1 PUSH2 0x52CC JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH32 0x0 AND GASPRICE MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x710 PUSH32 0x0 PUSH32 0x0 DUP5 PUSH2 0x406F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x3D3C JUMPI PUSH2 0x3D3C PUSH2 0xB05 PUSH1 0x2 DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4050 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x372D JUMPI DUP2 PUSH2 0x2314 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0x2314 JUMPI PUSH2 0x2314 PUSH2 0xB05 PUSH1 0x0 DUP7 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4050 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ADDRESS EQ ISZERO PUSH2 0x3FBE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x5479 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE DUP2 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND GAS CALL RETURNDATASIZE PUSH1 0x1 DUP4 MLOAD EQ PUSH1 0x20 DUP3 LT ISZERO AND DUP2 ISZERO OR DUP3 AND SWAP2 POP DUP2 PUSH2 0x4048 JUMPI DUP1 PUSH1 0x0 DUP5 RETURNDATACOPY DUP1 DUP4 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x302E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x52AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x40A9 SWAP1 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP7 SWAP1 DUP6 SWAP1 DUP8 SWAP1 PUSH1 0x20 ADD PUSH2 0x4DF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xD0F DUP2 PUSH2 0x5888 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x414B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x415E PUSH2 0x4159 DUP3 PUSH2 0x582B JUMP JUMPDEST PUSH2 0x5804 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x417F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x41A7 JUMPI DUP2 CALLDATALOAD PUSH2 0x4195 DUP2 PUSH2 0x5888 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4182 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x41C3 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x41DA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 PUSH1 0x80 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x41F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x420C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x421A PUSH2 0x4159 DUP3 PUSH2 0x582B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x423B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x41A7 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x423E JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xD0F DUP2 PUSH2 0x58AA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4278 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4281 DUP2 PUSH2 0x5804 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x428E DUP4 DUP4 PUSH2 0x4130 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x429D DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x4130 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x42AF DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x4478 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x42C1 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x4478 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x42D3 DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x4478 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x42E5 DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x4130 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x42F7 DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x4130 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x4309 DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x4130 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x431D DUP5 DUP3 DUP6 ADD PUSH2 0x4130 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x433B DUP5 DUP3 DUP6 ADD PUSH2 0x4483 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4365 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x436E DUP2 PUSH2 0x5804 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x437B DUP4 DUP4 PUSH2 0x4130 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x438A DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x4130 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x439C DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x4478 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x43AE DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x4478 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x43C0 DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x4130 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x43D2 DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x4130 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x43E4 DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x4130 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x4402 DUP5 DUP3 DUP6 ADD PUSH2 0x4483 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x442A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4434 PUSH1 0x80 PUSH2 0x5804 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x4441 DUP2 PUSH2 0x58B8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x4457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xD0F DUP2 PUSH2 0x58C5 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x44AD JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x44B8 DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x44C8 DUP2 PUSH2 0x5888 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x44E8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x44F3 DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x450F JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x451B DUP9 DUP4 DUP10 ADD PUSH2 0x413B JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4530 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x453C DUP9 DUP4 DUP10 ADD PUSH2 0x413B JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4551 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x455E DUP8 DUP3 DUP9 ADD PUSH2 0x41FC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x457C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4587 DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x44C8 DUP2 PUSH2 0x58AA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x45AC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x45B7 DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x45C7 DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x45D7 DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x45F9 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x460F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x461F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x462D PUSH2 0x4159 DUP3 PUSH2 0x582B JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP6 ADD DUP10 DUP3 DUP4 DUP8 MUL DUP9 ADD ADD GT ISZERO PUSH2 0x464D JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP5 DUP7 LT ISZERO PUSH2 0x4678 JUMPI DUP1 CALLDATALOAD PUSH2 0x4664 DUP2 PUSH2 0x5888 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x4651 JUMP JUMPDEST POP DUP2 SWAP7 POP PUSH2 0x4688 DUP10 DUP3 DUP11 ADD PUSH2 0x425A JUMP JUMPDEST SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x46A8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x46BF JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x46D2 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x46E0 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x46F3 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4719 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4730 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x473C DUP8 DUP4 DUP9 ADD PUSH2 0x413B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4751 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x475D DUP8 DUP4 DUP9 ADD PUSH2 0x413B JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4772 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8FA DUP7 DUP3 DUP8 ADD PUSH2 0x41FC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4794 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x47AB JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x47BE JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x47CC JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 PUSH2 0x180 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x47E1 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP7 POP SWAP5 POP SWAP1 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x47FB JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x4808 DUP8 DUP3 DUP9 ADD PUSH2 0x41B2 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4826 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x483C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x484C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x485A PUSH2 0x4159 DUP3 PUSH2 0x582B JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD PUSH2 0x180 DUP1 DUP6 MUL DUP7 ADD DUP8 ADD DUP11 LT ISZERO PUSH2 0x4879 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP5 DUP7 LT ISZERO PUSH2 0x48A5 JUMPI PUSH2 0x488F DUP11 DUP4 PUSH2 0x4265 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP3 DUP7 ADD SWAP3 SWAP1 DUP2 ADD SWAP1 PUSH2 0x487D JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x48C8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x48DF JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x48F2 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x4900 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 PUSH2 0x140 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x47E1 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4927 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x493D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x494D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x495B PUSH2 0x4159 DUP3 PUSH2 0x582B JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD PUSH2 0x140 DUP1 DUP6 MUL DUP7 ADD DUP8 ADD DUP11 LT ISZERO PUSH2 0x497A JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP5 DUP7 LT ISZERO PUSH2 0x48A5 JUMPI PUSH2 0x4990 DUP11 DUP4 PUSH2 0x4352 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP3 DUP7 ADD SWAP3 SWAP1 DUP2 ADD SWAP1 PUSH2 0x497E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x49B7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2314 DUP2 PUSH2 0x5888 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x49D6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x49E1 DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x49F1 DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4A14 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2314 DUP4 DUP4 PUSH2 0x4265 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 SUB PUSH2 0x200 DUP2 SLT ISZERO PUSH2 0x4A32 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4A3C DUP6 DUP6 PUSH2 0x4265 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE80 DUP3 ADD SLT ISZERO PUSH2 0x4A6D JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x180 DUP4 ADD SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4A91 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4A9B DUP6 DUP6 PUSH2 0x4265 JUMP JUMPDEST SWAP3 POP PUSH2 0x4AAB DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x4419 JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x4ABC DUP2 PUSH2 0x58C5 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x260 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4ADF JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4AE9 DUP8 DUP8 PUSH2 0x4265 JUMP JUMPDEST SWAP5 POP PUSH2 0x4AF9 DUP8 PUSH2 0x180 DUP9 ADD PUSH2 0x4419 JUMP JUMPDEST SWAP4 POP PUSH2 0x200 DUP7 ADD CALLDATALOAD PUSH2 0x4B0A DUP2 PUSH2 0x58C5 JUMP JUMPDEST SWAP3 POP PUSH2 0x220 DUP7 ADD CALLDATALOAD PUSH2 0x4B1B DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP2 POP PUSH2 0x240 DUP7 ADD CALLDATALOAD PUSH2 0x4B2C DUP2 PUSH2 0x5888 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x4B4F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x4B5C JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x4B67 PUSH1 0x60 PUSH2 0x5804 JUMP JUMPDEST DUP5 MLOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x4B7C JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x4B8F DUP2 PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x4BA5 DUP2 PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x4ABC DUP2 PUSH2 0x58AA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4BC8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2314 DUP4 DUP4 PUSH2 0x4352 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C0 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4BE5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4BEF DUP5 DUP5 PUSH2 0x4352 JUMP JUMPDEST SWAP2 POP PUSH2 0x4BFF DUP5 PUSH2 0x140 DUP6 ADD PUSH2 0x4419 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1E0 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4C1D JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4C27 DUP6 DUP6 PUSH2 0x4352 JUMP JUMPDEST SWAP3 POP PUSH2 0x4C37 DUP6 PUSH2 0x140 DUP7 ADD PUSH2 0x4419 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C0 DUP5 ADD CALLDATALOAD PUSH2 0x4ABC DUP2 PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x240 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4C61 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x4C6B DUP9 DUP9 PUSH2 0x4352 JUMP JUMPDEST SWAP6 POP PUSH2 0x4C7B DUP9 PUSH2 0x140 DUP10 ADD PUSH2 0x4419 JUMP JUMPDEST SWAP5 POP PUSH2 0x1C0 DUP8 ADD CALLDATALOAD PUSH2 0x4C8C DUP2 PUSH2 0x58C5 JUMP JUMPDEST SWAP4 POP PUSH2 0x1E0 DUP8 ADD CALLDATALOAD PUSH2 0x4C9D DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP3 POP PUSH2 0x200 DUP8 ADD CALLDATALOAD PUSH2 0x4CAE DUP2 PUSH2 0x58AA JUMP JUMPDEST SWAP2 POP PUSH2 0x220 DUP8 ADD CALLDATALOAD PUSH2 0x4CBF DUP2 PUSH2 0x5888 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CDE JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2314 DUP4 DUP4 PUSH2 0x4419 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CF9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4D4B JUMPI DUP2 MLOAD ISZERO ISZERO DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4D2D JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x4D69 JUMPI INVALID JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x4D96 DUP2 PUSH2 0x58B8 JUMP JUMPDEST PUSH2 0x4D9F DUP2 PUSH2 0x587E JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP1 DUP3 EQ PUSH2 0x4DB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x40 DUP2 DUP2 ADD CALLDATALOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD CALLDATALOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 SWAP5 SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x60 SWAP3 SWAP1 SWAP3 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD MSTORE PUSH1 0x35 DUP3 ADD MSTORE PUSH1 0x55 ADD SWAP1 JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP5 MSTORE PUSH1 0x20 PUSH1 0x60 DUP2 DUP7 ADD MSTORE DUP3 DUP8 MLOAD DUP1 DUP6 MSTORE PUSH1 0x80 DUP8 ADD SWAP2 POP DUP3 DUP10 ADD SWAP5 POP DUP6 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4F6E JUMPI DUP6 MLOAD DUP6 AND DUP4 MSTORE SWAP5 DUP4 ADD SWAP5 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4F50 JUMP JUMPDEST POP POP DUP1 SWAP5 POP POP POP POP POP DUP3 ISZERO ISZERO PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP5 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x80 DUP6 ADD SWAP1 DUP3 DUP10 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x504C JUMPI PUSH2 0x503C DUP5 DUP4 MLOAD PUSH2 0x4D56 JUMP JUMPDEST SWAP3 DUP6 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5029 JUMP JUMPDEST POP POP POP DUP5 DUP2 SUB DUP3 DUP7 ADD MSTORE DUP7 MLOAD DUP1 DUP3 MSTORE SWAP1 DUP3 ADD SWAP3 POP DUP7 DUP3 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5089 JUMPI PUSH2 0x5079 DUP6 DUP5 MLOAD PUSH2 0x4DD1 JUMP JUMPDEST SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5066 JUMP JUMPDEST POP POP POP POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x509F DUP2 DUP6 PUSH2 0x4D1A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP11 DUP12 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP10 DUP11 AND PUSH1 0x20 DUP13 ADD MSTORE SWAP8 DUP10 AND PUSH1 0x40 DUP12 ADD MSTORE SWAP6 DUP9 AND PUSH1 0x60 DUP11 ADD MSTORE SWAP4 DUP8 AND PUSH1 0x80 DUP10 ADD MSTORE SWAP2 SWAP1 SWAP6 AND PUSH1 0xA0 DUP8 ADD MSTORE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND PUSH1 0xC0 DUP8 ADD MSTORE DUP5 AND PUSH1 0xE0 DUP7 ADD MSTORE SWAP1 SWAP3 AND PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x120 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 ADD SWAP1 JUMP JUMPDEST SWAP8 DUP9 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND PUSH1 0x20 DUP10 ADD MSTORE SWAP5 DUP7 AND PUSH1 0x40 DUP9 ADD MSTORE SWAP3 DUP6 AND PUSH1 0x60 DUP8 ADD MSTORE SWAP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0xA0 DUP6 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0xFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x52B8 DUP6 PUSH2 0x587E JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x52D9 DUP5 PUSH2 0x587E JUMP JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x20 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH1 0x6 DUP5 LT PUSH2 0x52D9 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x531D JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x5301 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x532E JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x4E61746976654F7264657273466561747572652F4D49534D4154434845445F41 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x525241595F4C454E475448530000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x4E61746976654F7264657273466561747572652F4E4F5F434F4E54524143545F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4F524947494E5300000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x4E61746976654F7264657273466561747572652F4D49534D4154434845445F50 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4149525F4F52444552535F41525241595F4C454E475448530000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x466978696E546F6B656E5370656E6465722F43414E4E4F545F494E564F4B455F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x53454C4600000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x466978696E50726F746F636F6C466565732F45544845525F5452414E53464552 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F46414C49454400000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH2 0x200 DUP2 ADD PUSH1 0x20 DUP5 ADD PUSH2 0x554F DUP4 PUSH2 0x554A DUP4 DUP9 PUSH2 0x4130 JUMP JUMPDEST PUSH2 0x4D00 JUMP JUMPDEST PUSH2 0x5559 DUP2 DUP7 PUSH2 0x584B JUMP JUMPDEST SWAP1 POP PUSH2 0x5568 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP PUSH2 0x5576 PUSH1 0x40 DUP6 ADD DUP6 PUSH2 0x5858 JUMP JUMPDEST PUSH2 0x5583 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x4DD1 JUMP JUMPDEST POP PUSH2 0x5591 PUSH1 0x60 DUP6 ADD DUP6 PUSH2 0x5858 JUMP JUMPDEST PUSH2 0x559E PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x4DD1 JUMP JUMPDEST POP PUSH2 0x55AC PUSH1 0x80 DUP6 ADD DUP6 PUSH2 0x5858 JUMP JUMPDEST PUSH2 0x55B9 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x4DD1 JUMP JUMPDEST POP PUSH2 0x55C7 PUSH1 0xA0 DUP6 ADD DUP6 PUSH2 0x584B JUMP JUMPDEST PUSH2 0x55D4 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP PUSH2 0x55E2 PUSH1 0xC0 DUP6 ADD DUP6 PUSH2 0x584B JUMP JUMPDEST PUSH2 0x55EF PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP PUSH2 0x55FD PUSH1 0xE0 DUP6 ADD DUP6 PUSH2 0x584B JUMP JUMPDEST PUSH2 0x560A PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP PUSH2 0x100 PUSH2 0x561A DUP2 DUP7 ADD DUP7 PUSH2 0x584B JUMP JUMPDEST PUSH2 0x5626 DUP3 DUP6 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP POP PUSH2 0x120 DUP5 DUP2 ADD CALLDATALOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 PUSH2 0x5642 DUP2 DUP7 ADD DUP7 PUSH2 0x5865 JUMP JUMPDEST PUSH2 0x564E DUP3 DUP6 ADD DUP3 PUSH2 0x4DE7 JUMP JUMPDEST POP POP PUSH2 0x160 DUP5 DUP2 ADD CALLDATALOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x2314 PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0x4D8B JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xD0F DUP3 DUP5 PUSH2 0x4D56 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD PUSH2 0x5685 DUP3 DUP7 PUSH2 0x4D56 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x60 DUP4 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1C0 DUP2 ADD PUSH1 0x20 DUP5 ADD PUSH2 0x56C4 DUP4 PUSH2 0x554A DUP4 DUP9 PUSH2 0x4130 JUMP JUMPDEST PUSH2 0x56CE DUP2 DUP7 PUSH2 0x584B JUMP JUMPDEST SWAP1 POP PUSH2 0x56DD PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP PUSH2 0x56EB PUSH1 0x40 DUP6 ADD DUP6 PUSH2 0x5858 JUMP JUMPDEST PUSH2 0x56F8 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x4DD1 JUMP JUMPDEST POP PUSH2 0x5706 PUSH1 0x60 DUP6 ADD DUP6 PUSH2 0x5858 JUMP JUMPDEST PUSH2 0x5713 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x4DD1 JUMP JUMPDEST POP PUSH2 0x5721 PUSH1 0x80 DUP6 ADD DUP6 PUSH2 0x584B JUMP JUMPDEST PUSH2 0x572E PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP PUSH2 0x573C PUSH1 0xA0 DUP6 ADD DUP6 PUSH2 0x584B JUMP JUMPDEST PUSH2 0x5749 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP PUSH2 0x5757 PUSH1 0xC0 DUP6 ADD DUP6 PUSH2 0x584B JUMP JUMPDEST PUSH2 0x5764 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP PUSH1 0xE0 DUP5 ADD CALLDATALOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 PUSH2 0x577E DUP2 DUP7 ADD DUP7 PUSH2 0x5865 JUMP JUMPDEST PUSH2 0x578A DUP3 DUP6 ADD DUP3 PUSH2 0x4DE7 JUMP JUMPDEST POP POP PUSH2 0x120 DUP5 DUP2 ADD CALLDATALOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x2314 PUSH2 0x140 DUP4 ADD DUP5 PUSH2 0x4D8B JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x5823 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x5841 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH2 0x2314 DUP2 PUSH2 0x5888 JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH2 0x2314 DUP2 PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2314 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x3363 JUMPI INVALID JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x3363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x3363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3363 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD 0xF7 0xF9 0xC9 0xD6 0x5F 0xE4 0x5E PUSH9 0x98B05CD3959D4948CB 0x4D MLOAD 0xEE 0xED SWAP9 PUSH11 0x1F1C5828747C46C364736F PUSH13 0x634300060C0033000000000000 ",
                "sourceMap": "916:3276:7:-:0;;;1186:23;1201:1;1204;1207;1186:14;:23::i;:::-;1134:75;;1216:444;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1472:13;1499:4;1517:7;1538:22;1574:21;4025:4:18;4031:7;4040:22;4064:21;1438:4:17;1444:7;1453:22;1477:21;3977:13:18;1482::15;1806::16;1158:15:20;1209:9;1198:20;;1318:292;1632:19;1673:18;1713:7;1742:13;1286:487;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1286:487:20;;;;;;;;;1259:528;;1286:487;1259:528;;;;1233:554;;-1:-1:-1;;;;;;1685:49:21;;;;;;;-1:-1:-1;;;1787:53:21;;;;-1:-1:-1;;;;;1685:49:21;;;-1:-1:-1;1787:51:21;;-1:-1:-1;1787:53:21;;;;;-1:-1:-1;1286:487:20;;-1:-1:-1;1787:53:21;;;;;;1685:49;1787:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1744:96;;;;1850:11;;;;-1:-1:-1;;;;;;1850:11:21;;;;;1871:17;;;;;;;;1898:47;;;-1:-1:-1;;;;;;1898:47:21;;;-1:-1:-1;1920:4:19;1894:31;;;;-1:-1:-1;916:3276:7;;-1:-1:-1;;;;;;;;;;;;;916:3276:7;2672:235:19;2834:20;2852:2;2834:20;;;;2859;2877:2;2859:20;;;;2833:47;2883:17;;;2833:67;2672:235;;;;;:::o;989:947:-1:-;;;;;;1241:3;1229:9;1220:7;1216:23;1212:33;1209:2;;;-1:-1;;1248:12;1209:2;89:6;83:13;101:33;128:5;101:33;:::i;:::-;1411:2;1484:22;;589:13;1300:74;;-1:-1;607:56;589:13;607:56;:::i;:::-;1553:2;1620:22;;770:13;1419:97;;-1:-1;788:50;770:13;788:50;:::i;:::-;1689:2;1769:22;;395:13;1561:91;;-1:-1;413:63;395:13;413:63;:::i;:::-;1838:3;1888:22;;927:13;1697:104;;-1:-1;4068:10;4057:22;;4909:34;;4899:2;;-1:-1;;4947:12;4899:2;1847:73;;;;1203:733;;;;;;;;:::o;1943:263::-;;2058:2;2046:9;2037:7;2033:23;2029:32;2026:2;;;-1:-1;;2064:12;2026:2;-1:-1;224:13;;2020:186;-1:-1;2020:186::o;2573:668::-;2404:37;;;2977:2;2962:18;;2404:37;;;;3060:2;3045:18;;2404:37;;;;3143:2;3128:18;;2404:37;-1:-1;;;;;3851:54;3226:3;3211:19;;2284:37;2812:3;2797:19;;2783:458::o;4091:117::-;-1:-1;;;;;3851:54;;4150:35;;4140:2;;4199:1;;4189:12;4140:2;4134:74;:::o;:::-;916:3276:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "703": [
                        {
                            "length": 32,
                            "start": 1818
                        }
                    ],
                    "4580": [
                        {
                            "length": 32,
                            "start": 12909
                        }
                    ],
                    "4710": [
                        {
                            "length": 32,
                            "start": 7395
                        },
                        {
                            "length": 32,
                            "start": 8380
                        }
                    ],
                    "4770": [
                        {
                            "length": 32,
                            "start": 3180
                        },
                        {
                            "length": 32,
                            "start": 5526
                        },
                        {
                            "length": 32,
                            "start": 15891
                        }
                    ],
                    "4773": [
                        {
                            "length": 32,
                            "start": 9644
                        },
                        {
                            "length": 32,
                            "start": 15935
                        }
                    ],
                    "4776": [
                        {
                            "length": 32,
                            "start": 15968
                        }
                    ],
                    "4779": [
                        {
                            "length": 32,
                            "start": 9785
                        }
                    ],
                    "4782": [
                        {
                            "length": 32,
                            "start": 10024
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x60806040526004361061024f5760003560e01c80639a4f809c11610138578063b4658bfb116100b0578063ea7faa611161007f578063f6e0f6a511610064578063f6e0f6a51461069d578063fd5f995b146106bd578063fe55a3ef146106dd5761024f565b8063ea7faa611461066a578063f6274f661461068a5761024f565b8063b4658bfb146105f5578063d0a55fb014610615578063dab400f314610635578063dd11d2251461064a5761024f565b8063aa6b21cd11610107578063ad354eeb116100ec578063ad354eeb14610586578063b09f1fb1146105b5578063b10a33f4146105d55761024f565b8063aa6b21cd14610546578063aa77476c146105665761024f565b80639a4f809c146104d15780639baa45a8146104f15780639f0434f514610511578063a0edcef5146105315761024f565b8063487b5c20116101cb57806386a0c8d71161019a5780639240529c1161017f5780639240529c1461047e578063935c82a41461049157806395480889146104b15761024f565b806386a0c8d71461043c5780638fd3ab801461045c5761024f565b8063487b5c20146103ab5780636ae4b4f7146103cd5780636b52a4a8146103ef5780637d49ec1a1461041c5761024f565b8063346693c5116102225780633cd2f026116102075780633cd2f0261461033d578063414e4ccf1461035d578063438cdfc51461037e5761024f565b8063346693c5146102f057806337f381d81461031d5761024f565b8063016a6d6514610254578063031b905c1461028a5780630f0e8cf71461029f5780631fb09795146102c1575b600080fd5b34801561026057600080fd5b5061027461026f366004614bb6565b6106fd565b60405161028191906150b4565b60405180910390f35b34801561029657600080fd5b50610274610718565b3480156102ab57600080fd5b506102bf6102ba366004614705565b61073c565b005b3480156102cd57600080fd5b506102e16102dc366004614a1e565b6107ec565b60405161028193929190615677565b3480156102fc57600080fd5b5061031061030b366004614bb6565b610904565b6040516102819190615669565b34801561032957600080fd5b506102e1610338366004614bd2565b6109bc565b34801561034957600080fd5b506102bf610358366004614696565b610abc565b61037061036b366004614ac7565b610aef565b6040516102819291906157c2565b34801561038a57600080fd5b5061039e610399366004614c08565b610b99565b60405161028191906157a5565b3480156103b757600080fd5b506103c0610c6a565b60405161028191906157f3565b3480156103d957600080fd5b506103e2610c8e565b60405161028191906152f1565b3480156103fb57600080fd5b5061040f61040a36600461449b565b610cc7565b60405161028191906150a9565b34801561042857600080fd5b506102bf610437366004614a02565b610d15565b34801561044857600080fd5b506102bf610457366004614705565b610d96565b34801561046857600080fd5b50610471610e37565b6040516102819190615236565b61039e61048c366004614a7c565b611355565b34801561049d57600080fd5b506102bf6104ac366004614597565b611418565b3480156104bd57600080fd5b506103106104cc366004614a02565b61143f565b3480156104dd57600080fd5b506102bf6104ec3660046149c2565b6114ca565b3480156104fd57600080fd5b506102bf61050c366004614814565b6114d6565b34801561051d57600080fd5b506102bf61052c3660046144d3565b611506565b34801561053d57600080fd5b506103c0611594565b34801561055257600080fd5b50610370610561366004614c48565b6115b8565b34801561057257600080fd5b50610370610581366004614c08565b611666565b34801561059257600080fd5b506105a66105a13660046148b3565b6116d4565b6040516102819392919061500b565b3480156105c157600080fd5b506102bf6105d03660046145e7565b61193a565b3480156105e157600080fd5b506102bf6105f0366004614597565b611a53565b34801561060157600080fd5b506105a661061036600461477f565b611a7a565b34801561062157600080fd5b506102bf6106303660046149c2565b611cd5565b34801561064157600080fd5b50610274611ce1565b34801561065657600080fd5b50610274610665366004614a02565b611d05565b34801561067657600080fd5b506102bf61068536600461456a565b611d13565b610370610698366004614a7c565b611daf565b3480156106a957600080fd5b506102bf6106b8366004614915565b611e4d565b3480156106c957600080fd5b506102bf6106d83660046144d3565b611e7d565b3480156106e957600080fd5b506102bf6106f8366004614bb6565b611f04565b600061071061070b83611f81565b6120b8565b90505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b8151835114801561074e575080518351145b61078d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107849061541c565b60405180910390fd5b60005b83518110156107e6576107de338583815181106107a957fe5b60200260200101518584815181106107bd57fe5b60200260200101518585815181106107d157fe5b602002602001015161210a565b600101610790565b50505050565b6107f46140e7565b6000806108008561143f565b92506108916040518060a001604052808760a0015173ffffffffffffffffffffffffffffffffffffffff168152602001876000015173ffffffffffffffffffffffffffffffffffffffff16815260200187604001516fffffffffffffffffffffffffffffffff16815260200187606001516fffffffffffffffffffffffffffffffff168152602001858152506121f2565b83519092506000906108b1906108ac36889003880188614ccd565b61231b565b90508073ffffffffffffffffffffffffffffffffffffffff168660a0015173ffffffffffffffffffffffffffffffffffffffff1614806108fa57506108fa8660a0015182610cc7565b9150509250925092565b61090c6140e7565b610915826106fd565b8152600061092161246c565b608084015173ffffffffffffffffffffffffffffffffffffffff9081166000908152600292909201602090815260408084208751841685528252808420828801519093168452919052902054606084015161010085015161012086015192935061098f928592919085612479565b60c083015173ffffffffffffffffffffffffffffffffffffffff166109b657600060208301525b50919050565b6109c46140e7565b6000806109d085610904565b9250610a616040518060a00160405280876080015173ffffffffffffffffffffffffffffffffffffffff168152602001876000015173ffffffffffffffffffffffffffffffffffffffff16815260200187604001516fffffffffffffffffffffffffffffffff16815260200187606001516fffffffffffffffffffffffffffffffff168152602001858152506121f2565b91506000610a7384600001518661231b565b90508073ffffffffffffffffffffffffffffffffffffffff16866080015173ffffffffffffffffffffffffffffffffffffffff1614806108fa57506108fa866080015182610cc7565b60005b81811015610aea57610ae2838383818110610ad657fe5b9050602002013561256c565b600101610abf565b505050565b600080333014610b0a57610b0a610b05336127ba565b612872565b610b12614109565b610b7f6040518060a001604052808a8152602001898152602001886fffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681525061287a565b602081015160409091015190999098509650505050505050565b6000610ba3614109565b6040805160c081018252868152602081018690526fffffffffffffffffffffffffffffffff85169181019190915233606082018190526000608083015260a0820152610bee90612c4d565b9050826fffffffffffffffffffffffffffffffff1681602001516fffffffffffffffffffffffffffffffff161015610c5e57610c5e610b05610c2f876106fd565b83602001516fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff16612ff6565b60400151949350505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6040518060400160405280600b81526020017f4c696d69744f726465727300000000000000000000000000000000000000000081525081565b6000610cd161246c565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260049290920160209081526040808420928616845291905290205460ff1690505b92915050565b6000610d2082611d05565b90508160a0015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610d6d5750610d6b8260a0015133610cc7565b155b15610d8457610d84610b0582338560a001516130b4565b610d92818360a001516130ec565b5050565b81518351148015610da8575080518351145b610dde576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107849061541c565b60005b83518110156107e657610e2f33858381518110610dfa57fe5b6020026020010151858481518110610e0e57fe5b6020026020010151858581518110610e2257fe5b602002602001015161315f565b600101610de1565b6000610e627f3cd2f02600000000000000000000000000000000000000000000000000000000613237565b610e8b7ff6274f6600000000000000000000000000000000000000000000000000000000613237565b610eb47faa77476c00000000000000000000000000000000000000000000000000000000613237565b610edd7f9240529c00000000000000000000000000000000000000000000000000000000613237565b610f067f438cdfc500000000000000000000000000000000000000000000000000000000613237565b610f2f7f414e4ccf00000000000000000000000000000000000000000000000000000000613237565b610f587faa6b21cd00000000000000000000000000000000000000000000000000000000613237565b610f817f7d49ec1a00000000000000000000000000000000000000000000000000000000613237565b610faa7ffe55a3ef00000000000000000000000000000000000000000000000000000000613237565b610fd37f9baa45a800000000000000000000000000000000000000000000000000000000613237565b610ffc7ff6e0f6a500000000000000000000000000000000000000000000000000000000613237565b6110257fd0a55fb000000000000000000000000000000000000000000000000000000000613237565b61104e7fb10a33f400000000000000000000000000000000000000000000000000000000613237565b6110777f86a0c8d700000000000000000000000000000000000000000000000000000000613237565b6110a07f9f0434f500000000000000000000000000000000000000000000000000000000613237565b6110c97f9a4f809c00000000000000000000000000000000000000000000000000000000613237565b6110f27f935c82a400000000000000000000000000000000000000000000000000000000613237565b61111b7f0f0e8cf700000000000000000000000000000000000000000000000000000000613237565b6111447ffd5f995b00000000000000000000000000000000000000000000000000000000613237565b61116d7f9548088900000000000000000000000000000000000000000000000000000000613237565b6111967f346693c500000000000000000000000000000000000000000000000000000000613237565b6111bf7fdd11d22500000000000000000000000000000000000000000000000000000000613237565b6111e87f016a6d6500000000000000000000000000000000000000000000000000000000613237565b6112117f487b5c2000000000000000000000000000000000000000000000000000000000613237565b61123a7fb09f1fb100000000000000000000000000000000000000000000000000000000613237565b6112637f1fb0979500000000000000000000000000000000000000000000000000000000613237565b61128c7f37f381d800000000000000000000000000000000000000000000000000000000613237565b6112b57fb4658bfb00000000000000000000000000000000000000000000000000000000613237565b6112de7fad354eeb00000000000000000000000000000000000000000000000000000000613237565b6113077fea7faa6100000000000000000000000000000000000000000000000000000000613237565b6113307f6b52a4a800000000000000000000000000000000000000000000000000000000613237565b507f2c64c5ef0000000000000000000000000000000000000000000000000000000090565b600061135f614109565b6113cc6040518060a00160405280878152602001868152602001856fffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681525061287a565b9050826fffffffffffffffffffffffffffffffff1681602001516fffffffffffffffffffffffffffffffff16101561140d5761140d610b05610c2f87611d05565b8051610c5e906132c3565b6114228433610cc7565b61143357611433610b058533613366565b6107e68484848461210a565b6114476140e7565b61145082611d05565b8152600061145c61246c565b60a084015173ffffffffffffffffffffffffffffffffffffffff908116600090815260019290920160209081526040808420875184168552825280842082880151909316845291905290205460608401516101408501516101608601519293506109b6928592919085612479565b610aea3384848461210a565b60005b8151811015610d92576114fe8282815181106114f157fe5b6020026020010151610d15565b6001016114d9565b81518351148015611518575080518351145b61154e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107849061541c565b6115588433610cc7565b61156957611569610b058533613366565b60005b835181101561158d5761158585858381518110610dfa57fe5b60010161156c565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000803330146115ce576115ce610b05336127ba565b6115d6614109565b61164b6040518060c001604052808b81526020018a8152602001896fffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815260200187151581526020018673ffffffffffffffffffffffffffffffffffffffff16815250612c4d565b6020810151604090910151909a909950975050505050505050565b600080611671614109565b6040805160c081018252878152602081018790526fffffffffffffffffffffffffffffffff86169181019190915233606082018190526000608083015260a08201526116bc90612c4d565b60208101516040909101519097909650945050505050565b60608080858414611711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078490615362565b8567ffffffffffffffff8111801561172857600080fd5b5060405190808252806020026020018201604052801561176257816020015b61174f6140e7565b8152602001906001900390816117475790505b5092508567ffffffffffffffff8111801561177c57600080fd5b506040519080825280602002602001820160405280156117a6578160200160208202803683370190505b5091508567ffffffffffffffff811180156117c057600080fd5b506040519080825280602002602001820160405280156117ea578160200160208202803683370190505b50905060005b8681101561192f57306337f381d889898481811061180a57fe5b9050610140020188888581811061181d57fe5b9050608002016040518363ffffffff1660e01b81526004016118409291906156ad565b60a06040518083038186803b15801561185857600080fd5b505afa9250505080156118a6575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526118a391810190614b3a565b60015b6118af57611927565b828785815181106118bc57fe5b6020026020010181905250818685815181106118d457fe5b60200260200101906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff16815250508085858151811061191357fe5b911515602092830291909101909101525050505b6001016117f0565b509450945094915050565b333214611973576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610784906153bf565b600061197d61246c565b905060005b8351811015611a1257336000908152600383016020526040812085518592908790859081106119ad57fe5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055600101611982565b507f02dfead5eb769b298e82dd9650b31c40559a3d42701dbf53c931bc2682847c31338484604051611a4693929190614f15565b60405180910390a1505050565b611a5d8433610cc7565b611a6e57611a6e610b058533613366565b6107e68484848461315f565b60608080858414611ab7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078490615362565b8567ffffffffffffffff81118015611ace57600080fd5b50604051908082528060200260200182016040528015611b0857816020015b611af56140e7565b815260200190600190039081611aed5790505b5092508567ffffffffffffffff81118015611b2257600080fd5b50604051908082528060200260200182016040528015611b4c578160200160208202803683370190505b5091508567ffffffffffffffff81118015611b6657600080fd5b50604051908082528060200260200182016040528015611b90578160200160208202803683370190505b50905060005b8681101561192f5730631fb09795898984818110611bb057fe5b90506101800201888885818110611bc357fe5b9050608002016040518363ffffffff1660e01b8152600401611be6929190615533565b60a06040518083038186803b158015611bfe57600080fd5b505afa925050508015611c4c575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611c4991810190614b3a565b60015b611c5557611ccd565b82878581518110611c6257fe5b602002602001018190525081868581518110611c7a57fe5b60200260200101906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff168152505080858581518110611cb957fe5b911515602092830291909101909101525050505b600101611b96565b610aea3384848461315f565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061071061070b83613421565b6000611d1d61246c565b336000818152600483016020908152604080832073ffffffffffffffffffffffffffffffffffffffff891684529091529081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016861515179055519192507f6ea9dbe8b2cc119348716a9220a0742ad62b7884ecb0ff4b32cd508121fd937991611a46919086908690614ee4565b600080611dba614109565b611e276040518060a00160405280888152602001878152602001866fffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681525061287a565b9050611e3681600001516132c3565b602081015160409091015190969095509350505050565b60005b8151811015610d9257611e75828281518110611e6857fe5b6020026020010151611f04565b600101611e50565b81518351148015611e8f575080518351145b611ec5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107849061541c565b611ecf8433610cc7565b611ee057611ee0610b058533613366565b60005b835181101561158d57611efc858583815181106107a957fe5b600101611ee3565b6000611f0f826106fd565b9050816080015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015611f5c5750611f5a826080015133610cc7565b155b15611f7357611f73610b05823385608001516130b4565b610d928183608001516130ec565b60006040517fe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da98152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff166080820152608083015173ffffffffffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e083015161010082015261010083015167ffffffffffffffff166101208201526101208301516101408201526101608120915050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000826040516020016120ed929190614e59565b604051602081830303815290604052805190602001209050919050565b600061211461246c565b73ffffffffffffffffffffffffffffffffffffffff8087166000908152600283016020908152604080832089851684528252808320938816835292905220549091508281111561216b5761216b610b058483613598565b73ffffffffffffffffffffffffffffffffffffffff80871660009081526002840160209081526040808320898516845282528083209388168352929052819020849055517ffe7ffb1edfe79f4df716cb2dcad21cf2f31b104d816a7976ba1e6e4653c1efb1906121e2908890889088908890614fae565b60405180910390a1505050505050565b600081604001516fffffffffffffffffffffffffffffffff166000148061222d575060608201516fffffffffffffffffffffffffffffffff16155b1561223a57506000610713565b6001826080015160200151600481111561225057fe5b1461225d57506000610713565b60006122b68360800151604001518460600151036fffffffffffffffffffffffffffffffff1684606001516fffffffffffffffffffffffffffffffff1685604001516fffffffffffffffffffffffffffffffff166135ce565b90506122d3816122ce856020015186600001516135ec565b61371e565b905061231461230f8285604001516fffffffffffffffffffffffffffffffff1686606001516fffffffffffffffffffffffffffffffff16613734565b613758565b9392505050565b60006123278383613784565b60028251600381111561233657fe5b141561239e576001838360200151846040015185606001516040516000815260200160405260405161236b9493929190615218565b6020604051602081039080840390855afa15801561238d573d6000803e3d6000fd5b505050602060405103519050612443565b6003825160038111156123ad57fe5b14156124435760007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005283601c52603c6000209050600181846020015185604001518660600151604051600081526020016040526040516124139493929190615218565b6020604051602081039080840390855afa158015612435573d6000803e3d6000fd5b505050602060405103519150505b73ffffffffffffffffffffffffffffffffffffffff8116610d0f57610d0f610b05600585613830565b600080610d0f6007613866565b600061248361246c565b865160009081526020829052604090819020546fffffffffffffffffffffffffffffffff808216928a01839052929350918716116124da576020870160025b908160048111156124cf57fe5b81525050505061158d565b7f800000000000000000000000000000000000000000000000000000000000000081161561250d576020870160036124c2565b504267ffffffffffffffff168467ffffffffffffffff1611612547576020860160045b9081600481111561253d57fe5b815250505061158d565b8282111561255a57602086016003612530565b60016020870181905250505050505050565b6040517f319bed9a00000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063319bed9a906125e19085906004016150b4565b602060405180830381600087803b1580156125fb57600080fd5b505af115801561260f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263391906149a6565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016126909190614e92565b60206040518083038186803b1580156126a857600080fd5b505afa1580156126bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e09190614ce8565b90506001811115610aea576040517fa3b4a32700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a3b4a3279061278390859081907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff870190600401614eb3565b600060405180830381600087803b15801561279d57600080fd5b505af11580156127b1573d6000803e3d6000fd5b50505050505050565b60607ff0ec779b0bcda6d84abf99ee2c67647d1100ebbb553a9c2d1c2ba1579592832c826040516024016127ee9190614e92565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050919050565b805160208201fd5b612882614109565b61288a6140e7565b82516128959061143f565b90506001816020015160048111156128a957fe5b146128ce576128ce610b058260000151836020015160048111156128c957fe5b613881565b825160c0015173ffffffffffffffffffffffffffffffffffffffff16158015906129305750826060015173ffffffffffffffffffffffffffffffffffffffff16836000015160c0015173ffffffffffffffffffffffffffffffffffffffff1614155b1561295357612953610b0582600001518560600151866000015160c001516138b7565b825160e0015173ffffffffffffffffffffffffffffffffffffffff16158015906129b55750826080015173ffffffffffffffffffffffffffffffffffffffff16836000015160e0015173ffffffffffffffffffffffffffffffffffffffff1614155b156129d8576129d8610b0582600001518560800151866000015160e001516138ef565b60006129ec8260000151856020015161231b565b9050836000015160a0015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015612a3f5750835160a00151612a3d9082610cc7565b155b15612a5b578151845160a00151612a5b91610b05918490613927565b5082516101200151612a6c9061395f565b8252604080516101408101825282518152845160a09081015173ffffffffffffffffffffffffffffffffffffffff9081166020808501919091526060808901805184168688015251831681860152885151831660808601528851909101519091169183019190915285518301516fffffffffffffffffffffffffffffffff90811660c0840152865190910151811660e083015285830151811661010083015291830151909116610120820152612b2190613a34565b6fffffffffffffffffffffffffffffffff908116604085015290811660208401528351608001511615612bd857612ba382602001516fffffffffffffffffffffffffffffffff168460000151606001516fffffffffffffffffffffffffffffffff168560000151608001516fffffffffffffffffffffffffffffffff166135ce565b6fffffffffffffffffffffffffffffffff166060808401829052845160208101519186015161010090910151612bd893613bf5565b8051835160a08101516060808701516101008401518451602080870151908a01516040808c0151968c01518c51610120909a015191517fab614d2b738543c0ea21f56347cf696a3a0c42a7cbec3212a5ca22a4dcff21249b612c3f9b909a9993909161510d565b60405180910390a150919050565b612c55614109565b612c5d6140e7565b8251612c6890610904565b9050600181602001516004811115612c7c57fe5b14612c9c57612c9c610b058260000151836020015160048111156128c957fe5b6000612ca661246c565b845160c0015190915073ffffffffffffffffffffffffffffffffffffffff163214801590612d0c5750835160c0015173ffffffffffffffffffffffffffffffffffffffff166000908152600382016020908152604080832032845290915290205460ff16155b15612d28578151845160c00151612d2891610b05913290613ceb565b50825160a0015173ffffffffffffffffffffffffffffffffffffffff1615801590612d8b5750826060015173ffffffffffffffffffffffffffffffffffffffff16836000015160a0015173ffffffffffffffffffffffffffffffffffffffff1614155b15612dae57612dae610b0582600001518560600151866000015160a001516138b7565b6000612dc28260000151856020015161231b565b905083600001516080015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015612e155750835160800151612e139082610cc7565b155b15612e31578151845160800151612e3191610b05918490613927565b50604080516101408101825282518152845160809081015173ffffffffffffffffffffffffffffffffffffffff166020830152850151612f7c92820190612e7c578560600151612e7e565b305b73ffffffffffffffffffffffffffffffffffffffff1681526020018560a0015173ffffffffffffffffffffffffffffffffffffffff16815260200185600001516000015173ffffffffffffffffffffffffffffffffffffffff16815260200185600001516020015173ffffffffffffffffffffffffffffffffffffffff1681526020018560000151604001516fffffffffffffffffffffffffffffffff1681526020018560000151606001516fffffffffffffffffffffffffffffffff16815260200185604001516fffffffffffffffffffffffffffffffff16815260200183604001516fffffffffffffffffffffffffffffffff16815250613a34565b6fffffffffffffffffffffffffffffffff908116604080860182905292909116602080860182905284518751608081015160608a015182519483015160e09093015197517f829fa99d94dc4636925b38632e625736a614c154d55006b7ab6bea979c210c3298612c3f98959793969295929493929161518d565b60607f21948612b5ef214ec0508df4901600e07a810a371be76b25d59ade73826e3d9784848460405160240161302e939291906151f1565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b60607f88b2c08e4a5f57d416ad23dad18c20497ccfe684b1379b28fd564adaf582b80f84848460405160240161302e939291906150e1565b60006130f661246c565b6000848152602082905260409081902080547f8000000000000000000000000000000000000000000000000000000000000000179055519091507fa6eb7cdc219e1518ced964e9a34e61d68a94e4f1569db3e84256ba981ba5275390611a4690859085906150bd565b600061316961246c565b73ffffffffffffffffffffffffffffffffffffffff808716600090815260018301602090815260408083208985168452825280832093881683529290522054909150828111156131c0576131c0610b058483613598565b73ffffffffffffffffffffffffffffffffffffffff80871660009081526001840160209081526040808320898516845282528083209388168352929052819020849055517fa91fe7ae62fce669df2c7f880f8c14d178531aae72515558e5c948e37c32a572906121e2908890889088908890614fae565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb906132959084907f000000000000000000000000000000000000000000000000000000000000000090600401615263565b600060405180830381600087803b1580156132af57600080fd5b505af115801561158d573d6000803e3d6000fd5b80341180156132d25750333014155b156133635760006132e33483613d23565b905060003373ffffffffffffffffffffffffffffffffffffffff168260405161330b90614e8f565b60006040518083038185875af1925050503d8060008114613348576040519150601f19603f3d011682016040523d82523d6000602084013e61334d565b606091505b5050905080610aea57610aea610b053384613d42565b50565b60607f84356db366796dc6e2aeb1ad74b631fe4e5ec6a650464da6059e9f95c8810a10838360405160240161339c929190614f87565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b60006040517fce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d498152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff16608082015260808301516fffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e083015173ffffffffffffffffffffffffffffffffffffffff1661010082015261010083015173ffffffffffffffffffffffffffffffffffffffff1661012082015261012083015161014082015261014083015167ffffffffffffffff166101608201526101608301516101808201526101a08120915050919050565b60607fb12bc7e7d341f4431d6faf05f991ee3b779183e341b24243064e10c886cd1873838360405160240161339c9291906157e5565b60006135e4836135de8685613d78565b90613da9565b949350505050565b60006123148373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b815260040161362c929190614f87565b60206040518083038186803b15801561364457600080fd5b505afa158015613658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061367c9190614ce8565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616906370a08231906136ce908790600401614e92565b60206040518083038186803b1580156136e657600080fd5b505afa1580156136fa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ce9190614ce8565b600081831061372d5781612314565b5090919050565b60006135e4836135de613748826001613d23565b6137528887613d78565b90613dd3565b60006fffffffffffffffffffffffffffffffff82111561378057613780610b05600384613def565b5090565b60408101517ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641411115806137db575060608101517f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a111155b156137ee576137ee610b05600584613830565b6000815160038111156137fd57fe5b141561381157613811610b05600384613830565b60018151600381111561382057fe5b1415610d9257610d92610b056000845b60607ff18f11f3027e735c758137924b262d4d3aff0037dcd785aca3c699fa05d960bd838360405160240161339c9291906152e3565b6000608082600881111561387657fe5b600101901b92915050565b60607f47ab394e41470191eaf9fa542e84ac483a12665fbd616eb8d1c022ced6c94000838360405160240161339c929190615207565b60607f5d3300180a4547b3e27137be832d3ebf56f1ba5ebb30dd580999c61f77fa639684848460405160240161302e939291906150e1565b60607f15e6a383bb02d79ee933b927fbecba78cdde16cba84b94a99661f44bcce3b73684848460405160240161302e939291906150e1565b60607ff13e65d925201525f3d71a731833b19bb26e44cfbd97caf72a366b73866f712484848460405160240161302e939291906150e1565b60008061396a613e0c565b90508061397b576000915050610713565b600061398684613e38565b905060008173ffffffffffffffffffffffffffffffffffffffff16836040516139ae90614e8f565b60006040518083038185875af1925050503d80600081146139eb576040519150601f19603f3d011682016040523d82523d6000602084013e6139f0565b606091505b5050905080613a2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610784906154d6565b50909392505050565b600080613a73836101000151613a6e8561012001518660e001516fffffffffffffffffffffffffffffffff16613e8590919063ffffffff16565b613ee6565b9150613abe826fffffffffffffffffffffffffffffffff168460e001516fffffffffffffffffffffffffffffffff168560c001516fffffffffffffffffffffffffffffffff166135ce565b90506fffffffffffffffffffffffffffffffff82161580613aef57506fffffffffffffffffffffffffffffffff8116155b15613aff57506000905080613bf0565b610120830151613b21906fffffffffffffffffffffffffffffffff1683613f19565b6fffffffffffffffffffffffffffffffff16613b3b61246c565b845160009081526020919091526040908190209190915583015173ffffffffffffffffffffffffffffffffffffffff16301415613b9c57613b978360a001518460200151846fffffffffffffffffffffffffffffffff16613f6e565b613bc6565b613bc68360a0015184604001518560200151856fffffffffffffffffffffffffffffffff16613bf5565b613bf0836080015184602001518560600151846fffffffffffffffffffffffffffffffff16613bf5565b915091565b73ffffffffffffffffffffffffffffffffffffffff8416301415613c45576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078490615479565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015273ffffffffffffffffffffffffffffffffffffffff83166024820152816044820152602081606483600073ffffffffffffffffffffffffffffffffffffffff8a165af13d600183511460208210151681151782169150816127b157806000843e8083fd5b60607fc0972f3cc4234ca2091de7e7bc7081494bd29ac280167d66f0d44168973b163484848460405160240161302e939291906150e1565b600082821115613d3c57613d3c610b0560028585614050565b50900390565b60607fbde95cc2119e0200d80642397198abfcf98e6e4dddd0de9c6320d86252ad40ab838360405160240161339c929190614fe5565b600082613d8757506000610d0f565b82820282848281613d9457fe5b041461231457612314610b0560018686614050565b600081613dbf57613dbf610b0560038585614050565b6000828481613dca57fe5b04949350505050565b60008282018381101561231457612314610b0560008686614050565b606063c996af7b60e01b838360405160240161339c9291906152cc565b63ffffffff7f0000000000000000000000000000000000000000000000000000000000000000163a0290565b60006107107f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008461406f565b6000826fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff161115613d3c57613d3c610b056002856fffffffffffffffffffffffffffffffff16856fffffffffffffffffffffffffffffffff16614050565b6000816fffffffffffffffffffffffffffffffff16836fffffffffffffffffffffffffffffffff161061372d5781612314565b60008282016fffffffffffffffffffffffffffffffff808516908216101561231457612314610b056000866fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff16614050565b73ffffffffffffffffffffffffffffffffffffffff8316301415613fbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078490615479565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152816024820152602081604483600073ffffffffffffffffffffffffffffffffffffffff89165af13d6001835114602082101516811517821691508161404857806000843e8083fd5b505050505050565b606063e946c1bb60e01b84848460405160240161302e939291906152ab565b6040516000906140a9907fff0000000000000000000000000000000000000000000000000000000000000090869085908790602001614df5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120949350505050565b6040805160608101909152600080825260208201908152600060209091015290565b60408051608081018252600080825260208201819052918101829052606081019190915290565b8035610d0f81615888565b600082601f83011261414b578081fd5b813561415e6141598261582b565b615804565b81815291506020808301908481018184028601820187101561417f57600080fd5b60005b848110156141a757813561419581615888565b84529282019290820190600101614182565b505050505092915050565b60008083601f8401126141c3578182fd5b50813567ffffffffffffffff8111156141da578182fd5b6020830191508360206080830285010111156141f557600080fd5b9250929050565b600082601f83011261420c578081fd5b813561421a6141598261582b565b81815291506020808301908481018184028601820187101561423b57600080fd5b60005b848110156141a75781358452928201929082019060010161423e565b8035610d0f816158aa565b6000610180808385031215614278578182fd5b61428181615804565b91505061428e8383614130565b815261429d8360208401614130565b60208201526142af8360408401614478565b60408201526142c18360608401614478565b60608201526142d38360808401614478565b60808201526142e58360a08401614130565b60a08201526142f78360c08401614130565b60c08201526143098360e08401614130565b60e082015261010061431d84828501614130565b90820152610120828101359082015261014061433b84828501614483565b818301525061016080830135818301525092915050565b6000610140808385031215614365578182fd5b61436e81615804565b91505061437b8383614130565b815261438a8360208401614130565b602082015261439c8360408401614478565b60408201526143ae8360608401614478565b60608201526143c08360808401614130565b60808201526143d28360a08401614130565b60a08201526143e48360c08401614130565b60c082015260e082013560e082015261010061440284828501614483565b818301525061012080830135818301525092915050565b60006080828403121561442a578081fd5b6144346080615804565b90508135614441816158b8565b8152602082013560ff8116811461445757600080fd5b80602083015250604082013560408201526060820135606082015292915050565b8035610d0f816158c5565b803567ffffffffffffffff81168114610d0f57600080fd5b600080604083850312156144ad578182fd5b82356144b881615888565b915060208301356144c881615888565b809150509250929050565b600080600080608085870312156144e8578182fd5b84356144f381615888565b9350602085013567ffffffffffffffff8082111561450f578384fd5b61451b8883890161413b565b94506040870135915080821115614530578384fd5b61453c8883890161413b565b93506060870135915080821115614551578283fd5b5061455e878288016141fc565b91505092959194509250565b6000806040838503121561457c578182fd5b823561458781615888565b915060208301356144c8816158aa565b600080600080608085870312156145ac578182fd5b84356145b781615888565b935060208501356145c781615888565b925060408501356145d781615888565b9396929550929360600135925050565b600080604083850312156145f9578182fd5b823567ffffffffffffffff81111561460f578283fd5b8301601f8101851361461f578283fd5b803561462d6141598261582b565b80828252602080830192508085018982838702880101111561464d578788fd5b8795505b8486101561467857803561466481615888565b845260019590950194928101928101614651565b5081965061468889828a0161425a565b955050505050509250929050565b600080602083850312156146a8578182fd5b823567ffffffffffffffff808211156146bf578384fd5b818501915085601f8301126146d2578384fd5b8135818111156146e0578485fd5b86602080830285010111156146f3578485fd5b60209290920196919550909350505050565b600080600060608486031215614719578081fd5b833567ffffffffffffffff80821115614730578283fd5b61473c8783880161413b565b94506020860135915080821115614751578283fd5b61475d8783880161413b565b93506040860135915080821115614772578283fd5b506108fa868287016141fc565b60008060008060408587031215614794578182fd5b843567ffffffffffffffff808211156147ab578384fd5b818701915087601f8301126147be578384fd5b8135818111156147cc578485fd5b886020610180830285010111156147e1578485fd5b6020928301965094509086013590808211156147fb578384fd5b50614808878288016141b2565b95989497509550505050565b60006020808385031215614826578182fd5b823567ffffffffffffffff81111561483c578283fd5b8301601f8101851361484c578283fd5b803561485a6141598261582b565b81815283810190838501610180808502860187018a1015614879578788fd5b8795505b848610156148a55761488f8a83614265565b845260019590950194928601929081019061487d565b509098975050505050505050565b600080600080604085870312156148c8578182fd5b843567ffffffffffffffff808211156148df578384fd5b818701915087601f8301126148f2578384fd5b813581811115614900578485fd5b886020610140830285010111156147e1578485fd5b60006020808385031215614927578182fd5b823567ffffffffffffffff81111561493d578283fd5b8301601f8101851361494d578283fd5b803561495b6141598261582b565b81815283810190838501610140808502860187018a101561497a578788fd5b8795505b848610156148a5576149908a83614352565b845260019590950194928601929081019061497e565b6000602082840312156149b7578081fd5b815161231481615888565b6000806000606084860312156149d6578081fd5b83356149e181615888565b925060208401356149f181615888565b929592945050506040919091013590565b60006101808284031215614a14578081fd5b6123148383614265565b600080828403610200811215614a32578283fd5b614a3c8585614265565b925060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8082011215614a6d578182fd5b50610180830190509250929050565b60008060006102208486031215614a91578081fd5b614a9b8585614265565b9250614aab856101808601614419565b9150610200840135614abc816158c5565b809150509250925092565b60008060008060006102608688031215614adf578283fd5b614ae98787614265565b9450614af9876101808801614419565b9350610200860135614b0a816158c5565b9250610220860135614b1b81615888565b9150610240860135614b2c81615888565b809150509295509295909350565b600080600083850360a0811215614b4f578182fd5b6060811215614b5c578182fd5b50614b676060615804565b84518152602085015160058110614b7c578283fd5b60208201526040850151614b8f816158c5565b60408201526060850151909350614ba5816158c5565b6080850151909250614abc816158aa565b60006101408284031215614bc8578081fd5b6123148383614352565b6000806101c08385031215614be5578182fd5b614bef8484614352565b9150614bff846101408501614419565b90509250929050565b60008060006101e08486031215614c1d578081fd5b614c278585614352565b9250614c37856101408601614419565b91506101c0840135614abc816158c5565b6000806000806000806102408789031215614c61578384fd5b614c6b8888614352565b9550614c7b886101408901614419565b94506101c0870135614c8c816158c5565b93506101e0870135614c9d81615888565b9250610200870135614cae816158aa565b9150610220870135614cbf81615888565b809150509295509295509295565b600060808284031215614cde578081fd5b6123148383614419565b600060208284031215614cf9578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085019450808401835b83811015614d4b578151151587529582019590820190600101614d2d565b509495945050505050565b80518252602081015160058110614d6957fe5b60208301526040908101516fffffffffffffffffffffffffffffffff16910152565b8035614d96816158b8565b614d9f8161587e565b8252602081013560ff8116808214614db657600080fd5b60208401525060408181013590830152606090810135910152565b6fffffffffffffffffffffffffffffffff169052565b67ffffffffffffffff169052565b7fff0000000000000000000000000000000000000000000000000000000000000094909416845260609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830152603582015260550190565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b90565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152901515604082015260600190565b60006060820173ffffffffffffffffffffffffffffffffffffffff808716845260206060818601528287518085526080870191508289019450855b81811015614f6e578551851683529483019491830191600101614f50565b5050809450505050508215156040830152949350505050565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60608082528451828201819052600091906020906080850190828901855b8281101561504c5761503c848351614d56565b9285019290840190600101615029565b505050848103828601528651808252908201925086820190845b8181101561508957615079858451614dd1565b9383019391830191600101615066565b50505050828103604084015261509f8185614d1a565b9695505050505050565b901515815260200190565b90815260200190565b91825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b92835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b9a8b5273ffffffffffffffffffffffffffffffffffffffff998a1660208c015297891660408b015295881660608a015293871660808901529190951660a08701526fffffffffffffffffffffffffffffffff94851660c0870152841660e08601529092166101008401526101208301919091526101408201526101600190565b97885273ffffffffffffffffffffffffffffffffffffffff968716602089015294861660408801529285166060870152931660808501526fffffffffffffffffffffffffffffffff92831660a085015290911660c083015260e08201526101000190565b9283526020830191909152604082015260600190565b91825260ff16602082015260400190565b93845260ff9290921660208401526040830152606082015260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b606081016152b88561587e565b938152602081019290925260409091015290565b604081016152d98461587e565b9281526020015290565b60408101600684106152d957fe5b6000602080835283518082850152825b8181101561531d57858101830151858201604001528201615301565b8181111561532e5783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6020808252602c908201527f4e61746976654f7264657273466561747572652f4d49534d4154434845445f4160408201527f525241595f4c454e475448530000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f4e61746976654f7264657273466561747572652f4e4f5f434f4e54524143545f60408201527f4f524947494e5300000000000000000000000000000000000000000000000000606082015260800190565b60208082526038908201527f4e61746976654f7264657273466561747572652f4d49534d4154434845445f5060408201527f4149525f4f52444552535f41525241595f4c454e475448530000000000000000606082015260800190565b60208082526024908201527f466978696e546f6b656e5370656e6465722f43414e4e4f545f494e564f4b455f60408201527f53454c4600000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f466978696e50726f746f636f6c466565732f45544845525f5452414e5346455260408201527f5f46414c49454400000000000000000000000000000000000000000000000000606082015260800190565b61020081016020840161554f8361554a8388614130565b614d00565b615559818661584b565b90506155686020840182614d00565b506155766040850185615858565b6155836040840182614dd1565b506155916060850185615858565b61559e6060840182614dd1565b506155ac6080850185615858565b6155b96080840182614dd1565b506155c760a085018561584b565b6155d460a0840182614d00565b506155e260c085018561584b565b6155ef60c0840182614d00565b506155fd60e085018561584b565b61560a60e0840182614d00565b5061010061561a8186018661584b565b61562682850182614d00565b5050610120848101359083015261014061564281860186615865565b61564e82850182614de7565b50506101608481013590830152612314610180830184614d8b565b60608101610d0f8284614d56565b60a081016156858286614d56565b6fffffffffffffffffffffffffffffffff841660608301528215156080830152949350505050565b6101c08101602084016156c48361554a8388614130565b6156ce818661584b565b90506156dd6020840182614d00565b506156eb6040850185615858565b6156f86040840182614dd1565b506157066060850185615858565b6157136060840182614dd1565b50615721608085018561584b565b61572e6080840182614d00565b5061573c60a085018561584b565b61574960a0840182614d00565b5061575760c085018561584b565b61576460c0840182614d00565b5060e084013560e083015261010061577e81860186615865565b61578a82850182614de7565b50506101208481013590830152612314610140830184614d8b565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b918252602082015260400190565b63ffffffff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561582357600080fd5b604052919050565b600067ffffffffffffffff821115615841578081fd5b5060209081020190565b6000823561231481615888565b60008235612314816158c5565b6000823567ffffffffffffffff81168114612314578182fd5b6004811061336357fe5b73ffffffffffffffffffffffffffffffffffffffff8116811461336357600080fd5b801515811461336357600080fd5b6004811061336357600080fd5b6fffffffffffffffffffffffffffffffff8116811461336357600080fdfea2646970667358221220ddf7f9c9d65fe45e6898b05cd3959d4948cb4d51eeed986a1f1c5828747c46c364736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x24F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9A4F809C GT PUSH2 0x138 JUMPI DUP1 PUSH4 0xB4658BFB GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0xEA7FAA61 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xF6E0F6A5 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF6E0F6A5 EQ PUSH2 0x69D JUMPI DUP1 PUSH4 0xFD5F995B EQ PUSH2 0x6BD JUMPI DUP1 PUSH4 0xFE55A3EF EQ PUSH2 0x6DD JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0xEA7FAA61 EQ PUSH2 0x66A JUMPI DUP1 PUSH4 0xF6274F66 EQ PUSH2 0x68A JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0xB4658BFB EQ PUSH2 0x5F5 JUMPI DUP1 PUSH4 0xD0A55FB0 EQ PUSH2 0x615 JUMPI DUP1 PUSH4 0xDAB400F3 EQ PUSH2 0x635 JUMPI DUP1 PUSH4 0xDD11D225 EQ PUSH2 0x64A JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0xAA6B21CD GT PUSH2 0x107 JUMPI DUP1 PUSH4 0xAD354EEB GT PUSH2 0xEC JUMPI DUP1 PUSH4 0xAD354EEB EQ PUSH2 0x586 JUMPI DUP1 PUSH4 0xB09F1FB1 EQ PUSH2 0x5B5 JUMPI DUP1 PUSH4 0xB10A33F4 EQ PUSH2 0x5D5 JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0xAA6B21CD EQ PUSH2 0x546 JUMPI DUP1 PUSH4 0xAA77476C EQ PUSH2 0x566 JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0x9A4F809C EQ PUSH2 0x4D1 JUMPI DUP1 PUSH4 0x9BAA45A8 EQ PUSH2 0x4F1 JUMPI DUP1 PUSH4 0x9F0434F5 EQ PUSH2 0x511 JUMPI DUP1 PUSH4 0xA0EDCEF5 EQ PUSH2 0x531 JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0x487B5C20 GT PUSH2 0x1CB JUMPI DUP1 PUSH4 0x86A0C8D7 GT PUSH2 0x19A JUMPI DUP1 PUSH4 0x9240529C GT PUSH2 0x17F JUMPI DUP1 PUSH4 0x9240529C EQ PUSH2 0x47E JUMPI DUP1 PUSH4 0x935C82A4 EQ PUSH2 0x491 JUMPI DUP1 PUSH4 0x95480889 EQ PUSH2 0x4B1 JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0x86A0C8D7 EQ PUSH2 0x43C JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0x45C JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0x487B5C20 EQ PUSH2 0x3AB JUMPI DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x3CD JUMPI DUP1 PUSH4 0x6B52A4A8 EQ PUSH2 0x3EF JUMPI DUP1 PUSH4 0x7D49EC1A EQ PUSH2 0x41C JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0x346693C5 GT PUSH2 0x222 JUMPI DUP1 PUSH4 0x3CD2F026 GT PUSH2 0x207 JUMPI DUP1 PUSH4 0x3CD2F026 EQ PUSH2 0x33D JUMPI DUP1 PUSH4 0x414E4CCF EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0x438CDFC5 EQ PUSH2 0x37E JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0x346693C5 EQ PUSH2 0x2F0 JUMPI DUP1 PUSH4 0x37F381D8 EQ PUSH2 0x31D JUMPI PUSH2 0x24F JUMP JUMPDEST DUP1 PUSH4 0x16A6D65 EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0x31B905C EQ PUSH2 0x28A JUMPI DUP1 PUSH4 0xF0E8CF7 EQ PUSH2 0x29F JUMPI DUP1 PUSH4 0x1FB09795 EQ PUSH2 0x2C1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x260 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x274 PUSH2 0x26F CALLDATASIZE PUSH1 0x4 PUSH2 0x4BB6 JUMP JUMPDEST PUSH2 0x6FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x50B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x296 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x274 PUSH2 0x718 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x2BA CALLDATASIZE PUSH1 0x4 PUSH2 0x4705 JUMP JUMPDEST PUSH2 0x73C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E1 PUSH2 0x2DC CALLDATASIZE PUSH1 0x4 PUSH2 0x4A1E JUMP JUMPDEST PUSH2 0x7EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5677 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x310 PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x4BB6 JUMP JUMPDEST PUSH2 0x904 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x5669 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x329 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E1 PUSH2 0x338 CALLDATASIZE PUSH1 0x4 PUSH2 0x4BD2 JUMP JUMPDEST PUSH2 0x9BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x358 CALLDATASIZE PUSH1 0x4 PUSH2 0x4696 JUMP JUMPDEST PUSH2 0xABC JUMP JUMPDEST PUSH2 0x370 PUSH2 0x36B CALLDATASIZE PUSH1 0x4 PUSH2 0x4AC7 JUMP JUMPDEST PUSH2 0xAEF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP3 SWAP2 SWAP1 PUSH2 0x57C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39E PUSH2 0x399 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C08 JUMP JUMPDEST PUSH2 0xB99 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x57A5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C0 PUSH2 0xC6A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x57F3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E2 PUSH2 0xC8E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x52F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x40F PUSH2 0x40A CALLDATASIZE PUSH1 0x4 PUSH2 0x449B JUMP JUMPDEST PUSH2 0xCC7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x50A9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x428 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x437 CALLDATASIZE PUSH1 0x4 PUSH2 0x4A02 JUMP JUMPDEST PUSH2 0xD15 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x457 CALLDATASIZE PUSH1 0x4 PUSH2 0x4705 JUMP JUMPDEST PUSH2 0xD96 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x471 PUSH2 0xE37 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP2 SWAP1 PUSH2 0x5236 JUMP JUMPDEST PUSH2 0x39E PUSH2 0x48C CALLDATASIZE PUSH1 0x4 PUSH2 0x4A7C JUMP JUMPDEST PUSH2 0x1355 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x4AC CALLDATASIZE PUSH1 0x4 PUSH2 0x4597 JUMP JUMPDEST PUSH2 0x1418 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x310 PUSH2 0x4CC CALLDATASIZE PUSH1 0x4 PUSH2 0x4A02 JUMP JUMPDEST PUSH2 0x143F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x4EC CALLDATASIZE PUSH1 0x4 PUSH2 0x49C2 JUMP JUMPDEST PUSH2 0x14CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x50C CALLDATASIZE PUSH1 0x4 PUSH2 0x4814 JUMP JUMPDEST PUSH2 0x14D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x52C CALLDATASIZE PUSH1 0x4 PUSH2 0x44D3 JUMP JUMPDEST PUSH2 0x1506 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C0 PUSH2 0x1594 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x552 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x370 PUSH2 0x561 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C48 JUMP JUMPDEST PUSH2 0x15B8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x370 PUSH2 0x581 CALLDATASIZE PUSH1 0x4 PUSH2 0x4C08 JUMP JUMPDEST PUSH2 0x1666 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5A6 PUSH2 0x5A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x48B3 JUMP JUMPDEST PUSH2 0x16D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x281 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x500B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x5D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x45E7 JUMP JUMPDEST PUSH2 0x193A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x5F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x4597 JUMP JUMPDEST PUSH2 0x1A53 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x601 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5A6 PUSH2 0x610 CALLDATASIZE PUSH1 0x4 PUSH2 0x477F JUMP JUMPDEST PUSH2 0x1A7A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x621 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x630 CALLDATASIZE PUSH1 0x4 PUSH2 0x49C2 JUMP JUMPDEST PUSH2 0x1CD5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x641 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x274 PUSH2 0x1CE1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x656 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x274 PUSH2 0x665 CALLDATASIZE PUSH1 0x4 PUSH2 0x4A02 JUMP JUMPDEST PUSH2 0x1D05 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x676 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x685 CALLDATASIZE PUSH1 0x4 PUSH2 0x456A JUMP JUMPDEST PUSH2 0x1D13 JUMP JUMPDEST PUSH2 0x370 PUSH2 0x698 CALLDATASIZE PUSH1 0x4 PUSH2 0x4A7C JUMP JUMPDEST PUSH2 0x1DAF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x6B8 CALLDATASIZE PUSH1 0x4 PUSH2 0x4915 JUMP JUMPDEST PUSH2 0x1E4D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x6D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x44D3 JUMP JUMPDEST PUSH2 0x1E7D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BF PUSH2 0x6F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x4BB6 JUMP JUMPDEST PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x710 PUSH2 0x70B DUP4 PUSH2 0x1F81 JUMP JUMPDEST PUSH2 0x20B8 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0x74E JUMPI POP DUP1 MLOAD DUP4 MLOAD EQ JUMPDEST PUSH2 0x78D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x541C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x7E6 JUMPI PUSH2 0x7DE CALLER DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7A9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x7BD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x7D1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x210A JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x790 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x7F4 PUSH2 0x40E7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x800 DUP6 PUSH2 0x143F JUMP JUMPDEST SWAP3 POP PUSH2 0x891 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH2 0x21F2 JUMP JUMPDEST DUP4 MLOAD SWAP1 SWAP3 POP PUSH1 0x0 SWAP1 PUSH2 0x8B1 SWAP1 PUSH2 0x8AC CALLDATASIZE DUP9 SWAP1 SUB DUP9 ADD DUP9 PUSH2 0x4CCD JUMP JUMPDEST PUSH2 0x231B JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x8FA JUMPI POP PUSH2 0x8FA DUP7 PUSH1 0xA0 ADD MLOAD DUP3 PUSH2 0xCC7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x90C PUSH2 0x40E7 JUMP JUMPDEST PUSH2 0x915 DUP3 PUSH2 0x6FD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH2 0x921 PUSH2 0x246C JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP8 MLOAD DUP5 AND DUP6 MSTORE DUP3 MSTORE DUP1 DUP5 KECCAK256 DUP3 DUP9 ADD MLOAD SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x100 DUP6 ADD MLOAD PUSH2 0x120 DUP7 ADD MLOAD SWAP3 SWAP4 POP PUSH2 0x98F SWAP3 DUP6 SWAP3 SWAP2 SWAP1 DUP6 PUSH2 0x2479 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9B6 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C4 PUSH2 0x40E7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9D0 DUP6 PUSH2 0x904 JUMP JUMPDEST SWAP3 POP PUSH2 0xA61 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x80 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH2 0x21F2 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0xA73 DUP5 PUSH1 0x0 ADD MLOAD DUP7 PUSH2 0x231B JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x80 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x8FA JUMPI POP PUSH2 0x8FA DUP7 PUSH1 0x80 ADD MLOAD DUP3 PUSH2 0xCC7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xAEA JUMPI PUSH2 0xAE2 DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0xAD6 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x256C JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xABF JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER ADDRESS EQ PUSH2 0xB0A JUMPI PUSH2 0xB0A PUSH2 0xB05 CALLER PUSH2 0x27BA JUMP JUMPDEST PUSH2 0x2872 JUMP JUMPDEST PUSH2 0xB12 PUSH2 0x4109 JUMP JUMPDEST PUSH2 0xB7F PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH2 0x287A JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP10 SWAP1 SWAP9 POP SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBA3 PUSH2 0x4109 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLER PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0xBEE SWAP1 PUSH2 0x2C4D JUMP JUMPDEST SWAP1 POP DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x20 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0xC5E JUMPI PUSH2 0xC5E PUSH2 0xB05 PUSH2 0xC2F DUP8 PUSH2 0x6FD JUMP JUMPDEST DUP4 PUSH1 0x20 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2FF6 JUMP JUMPDEST PUSH1 0x40 ADD MLOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4C696D69744F7264657273000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCD1 PUSH2 0x246C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP3 DUP7 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD20 DUP3 PUSH2 0x1D05 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0xD6D JUMPI POP PUSH2 0xD6B DUP3 PUSH1 0xA0 ADD MLOAD CALLER PUSH2 0xCC7 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xD84 JUMPI PUSH2 0xD84 PUSH2 0xB05 DUP3 CALLER DUP6 PUSH1 0xA0 ADD MLOAD PUSH2 0x30B4 JUMP JUMPDEST PUSH2 0xD92 DUP2 DUP4 PUSH1 0xA0 ADD MLOAD PUSH2 0x30EC JUMP JUMPDEST POP POP JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0xDA8 JUMPI POP DUP1 MLOAD DUP4 MLOAD EQ JUMPDEST PUSH2 0xDDE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x541C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x7E6 JUMPI PUSH2 0xE2F CALLER DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xDFA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE0E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE22 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x315F JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xDE1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE62 PUSH32 0x3CD2F02600000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xE8B PUSH32 0xF6274F6600000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xEB4 PUSH32 0xAA77476C00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xEDD PUSH32 0x9240529C00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xF06 PUSH32 0x438CDFC500000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xF2F PUSH32 0x414E4CCF00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xF58 PUSH32 0xAA6B21CD00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xF81 PUSH32 0x7D49EC1A00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xFAA PUSH32 0xFE55A3EF00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xFD3 PUSH32 0x9BAA45A800000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0xFFC PUSH32 0xF6E0F6A500000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x1025 PUSH32 0xD0A55FB000000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x104E PUSH32 0xB10A33F400000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x1077 PUSH32 0x86A0C8D700000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x10A0 PUSH32 0x9F0434F500000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x10C9 PUSH32 0x9A4F809C00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x10F2 PUSH32 0x935C82A400000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x111B PUSH32 0xF0E8CF700000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x1144 PUSH32 0xFD5F995B00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x116D PUSH32 0x9548088900000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x1196 PUSH32 0x346693C500000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x11BF PUSH32 0xDD11D22500000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x11E8 PUSH32 0x16A6D6500000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x1211 PUSH32 0x487B5C2000000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x123A PUSH32 0xB09F1FB100000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x1263 PUSH32 0x1FB0979500000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x128C PUSH32 0x37F381D800000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x12B5 PUSH32 0xB4658BFB00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x12DE PUSH32 0xAD354EEB00000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x1307 PUSH32 0xEA7FAA6100000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST PUSH2 0x1330 PUSH32 0x6B52A4A800000000000000000000000000000000000000000000000000000000 PUSH2 0x3237 JUMP JUMPDEST POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x135F PUSH2 0x4109 JUMP JUMPDEST PUSH2 0x13CC PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH2 0x287A JUMP JUMPDEST SWAP1 POP DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x20 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x140D JUMPI PUSH2 0x140D PUSH2 0xB05 PUSH2 0xC2F DUP8 PUSH2 0x1D05 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xC5E SWAP1 PUSH2 0x32C3 JUMP JUMPDEST PUSH2 0x1422 DUP5 CALLER PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0x1433 JUMPI PUSH2 0x1433 PUSH2 0xB05 DUP6 CALLER PUSH2 0x3366 JUMP JUMPDEST PUSH2 0x7E6 DUP5 DUP5 DUP5 DUP5 PUSH2 0x210A JUMP JUMPDEST PUSH2 0x1447 PUSH2 0x40E7 JUMP JUMPDEST PUSH2 0x1450 DUP3 PUSH2 0x1D05 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH2 0x145C PUSH2 0x246C JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP8 MLOAD DUP5 AND DUP6 MSTORE DUP3 MSTORE DUP1 DUP5 KECCAK256 DUP3 DUP9 ADD MLOAD SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x140 DUP6 ADD MLOAD PUSH2 0x160 DUP7 ADD MLOAD SWAP3 SWAP4 POP PUSH2 0x9B6 SWAP3 DUP6 SWAP3 SWAP2 SWAP1 DUP6 PUSH2 0x2479 JUMP JUMPDEST PUSH2 0xAEA CALLER DUP5 DUP5 DUP5 PUSH2 0x210A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xD92 JUMPI PUSH2 0x14FE DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x14F1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xD15 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x14D9 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0x1518 JUMPI POP DUP1 MLOAD DUP4 MLOAD EQ JUMPDEST PUSH2 0x154E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x541C JUMP JUMPDEST PUSH2 0x1558 DUP5 CALLER PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0x1569 JUMPI PUSH2 0x1569 PUSH2 0xB05 DUP6 CALLER PUSH2 0x3366 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x158D JUMPI PUSH2 0x1585 DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xDFA JUMPI INVALID JUMPDEST PUSH1 0x1 ADD PUSH2 0x156C JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER ADDRESS EQ PUSH2 0x15CE JUMPI PUSH2 0x15CE PUSH2 0xB05 CALLER PUSH2 0x27BA JUMP JUMPDEST PUSH2 0x15D6 PUSH2 0x4109 JUMP JUMPDEST PUSH2 0x164B PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP12 DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH2 0x2C4D JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP11 SWAP1 SWAP10 POP SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1671 PUSH2 0x4109 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLER PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x16BC SWAP1 PUSH2 0x2C4D JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP1 DUP6 DUP5 EQ PUSH2 0x1711 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x5362 JUMP JUMPDEST DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1728 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1762 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x174F PUSH2 0x40E7 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1747 JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x177C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17A6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x17C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17EA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x192F JUMPI ADDRESS PUSH4 0x37F381D8 DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x180A JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x140 MUL ADD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x181D JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x80 MUL ADD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1840 SWAP3 SWAP2 SWAP1 PUSH2 0x56AD JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1858 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x18A6 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x18A3 SWAP2 DUP2 ADD SWAP1 PUSH2 0x4B3A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x18AF JUMPI PUSH2 0x1927 JUMP JUMPDEST DUP3 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x18BC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP2 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x18D4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP1 DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1913 JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x17F0 JUMP JUMPDEST POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST CALLER ORIGIN EQ PUSH2 0x1973 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x53BF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197D PUSH2 0x246C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1A12 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP6 MLOAD DUP6 SWAP3 SWAP1 DUP8 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x19AD JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 ADD PUSH2 0x1982 JUMP JUMPDEST POP PUSH32 0x2DFEAD5EB769B298E82DD9650B31C40559A3D42701DBF53C931BC2682847C31 CALLER DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1A46 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4F15 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x1A5D DUP5 CALLER PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0x1A6E JUMPI PUSH2 0x1A6E PUSH2 0xB05 DUP6 CALLER PUSH2 0x3366 JUMP JUMPDEST PUSH2 0x7E6 DUP5 DUP5 DUP5 DUP5 PUSH2 0x315F JUMP JUMPDEST PUSH1 0x60 DUP1 DUP1 DUP6 DUP5 EQ PUSH2 0x1AB7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x5362 JUMP JUMPDEST DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1ACE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B08 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x1AF5 PUSH2 0x40E7 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1AED JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1B22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B4C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP6 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1B66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1B90 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x192F JUMPI ADDRESS PUSH4 0x1FB09795 DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x1BB0 JUMPI INVALID JUMPDEST SWAP1 POP PUSH2 0x180 MUL ADD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x1BC3 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x80 MUL ADD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BE6 SWAP3 SWAP2 SWAP1 PUSH2 0x5533 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1C4C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1C49 SWAP2 DUP2 ADD SWAP1 PUSH2 0x4B3A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1C55 JUMPI PUSH2 0x1CCD JUMP JUMPDEST DUP3 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1C62 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP2 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1C7A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP1 DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1CB9 JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1B96 JUMP JUMPDEST PUSH2 0xAEA CALLER DUP5 DUP5 DUP5 PUSH2 0x315F JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x710 PUSH2 0x70B DUP4 PUSH2 0x3421 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D1D PUSH2 0x246C JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND DUP7 ISZERO ISZERO OR SWAP1 SSTORE MLOAD SWAP2 SWAP3 POP PUSH32 0x6EA9DBE8B2CC119348716A9220A0742AD62B7884ECB0FF4B32CD508121FD9379 SWAP2 PUSH2 0x1A46 SWAP2 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH2 0x4EE4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1DBA PUSH2 0x4109 JUMP JUMPDEST PUSH2 0x1E27 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH2 0x287A JUMP JUMPDEST SWAP1 POP PUSH2 0x1E36 DUP2 PUSH1 0x0 ADD MLOAD PUSH2 0x32C3 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xD92 JUMPI PUSH2 0x1E75 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1E68 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1F04 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1E50 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0x1E8F JUMPI POP DUP1 MLOAD DUP4 MLOAD EQ JUMPDEST PUSH2 0x1EC5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x541C JUMP JUMPDEST PUSH2 0x1ECF DUP5 CALLER PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0x1EE0 JUMPI PUSH2 0x1EE0 PUSH2 0xB05 DUP6 CALLER PUSH2 0x3366 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x158D JUMPI PUSH2 0x1EFC DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7A9 JUMPI INVALID JUMPDEST PUSH1 0x1 ADD PUSH2 0x1EE3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F0F DUP3 PUSH2 0x6FD JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x80 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1F5C JUMPI POP PUSH2 0x1F5A DUP3 PUSH1 0x80 ADD MLOAD CALLER PUSH2 0xCC7 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1F73 JUMPI PUSH2 0x1F73 PUSH2 0xB05 DUP3 CALLER DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0x30B4 JUMP JUMPDEST PUSH2 0xD92 DUP2 DUP4 PUSH1 0x80 ADD MLOAD PUSH2 0x30EC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xE593D3FDFA8B60E5E17A1B2204662ECBE15C23F2084B9AD5BAE40359540A7DA9 DUP2 MSTORE DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x100 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 DUP2 KECCAK256 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x20ED SWAP3 SWAP2 SWAP1 PUSH2 0x4E59 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2114 PUSH2 0x246C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP6 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP2 POP DUP3 DUP2 GT ISZERO PUSH2 0x216B JUMPI PUSH2 0x216B PUSH2 0xB05 DUP5 DUP4 PUSH2 0x3598 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 DUP5 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP6 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0xFE7FFB1EDFE79F4DF716CB2DCAD21CF2F31B104D816A7976BA1E6E4653C1EFB1 SWAP1 PUSH2 0x21E2 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x4FAE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 EQ DUP1 PUSH2 0x222D JUMPI POP PUSH1 0x60 DUP3 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO JUMPDEST ISZERO PUSH2 0x223A JUMPI POP PUSH1 0x0 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x80 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2250 JUMPI INVALID JUMPDEST EQ PUSH2 0x225D JUMPI POP PUSH1 0x0 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22B6 DUP4 PUSH1 0x80 ADD MLOAD PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD SUB PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x35CE JUMP JUMPDEST SWAP1 POP PUSH2 0x22D3 DUP2 PUSH2 0x22CE DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x35EC JUMP JUMPDEST PUSH2 0x371E JUMP JUMPDEST SWAP1 POP PUSH2 0x2314 PUSH2 0x230F DUP3 DUP6 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3734 JUMP JUMPDEST PUSH2 0x3758 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2327 DUP4 DUP4 PUSH2 0x3784 JUMP JUMPDEST PUSH1 0x2 DUP3 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2336 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x239E JUMPI PUSH1 0x1 DUP4 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x236B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5218 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x238D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH2 0x2443 JUMP JUMPDEST PUSH1 0x3 DUP3 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x23AD JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x2443 JUMPI PUSH1 0x0 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 MSTORE DUP4 PUSH1 0x1C MSTORE PUSH1 0x3C PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x1 DUP2 DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x2413 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x5218 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2435 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP2 POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xD0F JUMPI PUSH2 0xD0F PUSH2 0xB05 PUSH1 0x5 DUP6 PUSH2 0x3830 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD0F PUSH1 0x7 PUSH2 0x3866 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2483 PUSH2 0x246C JUMP JUMPDEST DUP7 MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND SWAP3 DUP11 ADD DUP4 SWAP1 MSTORE SWAP3 SWAP4 POP SWAP2 DUP8 AND GT PUSH2 0x24DA JUMPI PUSH1 0x20 DUP8 ADD PUSH1 0x2 JUMPDEST SWAP1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x24CF JUMPI INVALID JUMPDEST DUP2 MSTORE POP POP POP POP PUSH2 0x158D JUMP JUMPDEST PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 DUP2 AND ISZERO PUSH2 0x250D JUMPI PUSH1 0x20 DUP8 ADD PUSH1 0x3 PUSH2 0x24C2 JUMP JUMPDEST POP TIMESTAMP PUSH8 0xFFFFFFFFFFFFFFFF AND DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0x2547 JUMPI PUSH1 0x20 DUP7 ADD PUSH1 0x4 JUMPDEST SWAP1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x253D JUMPI INVALID JUMPDEST DUP2 MSTORE POP POP POP PUSH2 0x158D JUMP JUMPDEST DUP3 DUP3 GT ISZERO PUSH2 0x255A JUMPI PUSH1 0x20 DUP7 ADD PUSH1 0x3 PUSH2 0x2530 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP8 ADD DUP2 SWAP1 MSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x319BED9A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x319BED9A SWAP1 PUSH2 0x25E1 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x50B4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x260F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2633 SWAP2 SWAP1 PUSH2 0x49A6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2690 SWAP2 SWAP1 PUSH2 0x4E92 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x26A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x26BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x26E0 SWAP2 SWAP1 PUSH2 0x4CE8 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xAEA JUMPI PUSH1 0x40 MLOAD PUSH32 0xA3B4A32700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0xA3B4A327 SWAP1 PUSH2 0x2783 SWAP1 DUP6 SWAP1 DUP2 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 ADD SWAP1 PUSH1 0x4 ADD PUSH2 0x4EB3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x279D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x27B1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xF0EC779B0BCDA6D84ABF99EE2C67647D1100EBBB553A9C2D1C2BA1579592832C DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x27EE SWAP2 SWAP1 PUSH2 0x4E92 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH2 0x2882 PUSH2 0x4109 JUMP JUMPDEST PUSH2 0x288A PUSH2 0x40E7 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x2895 SWAP1 PUSH2 0x143F JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x28A9 JUMPI INVALID JUMPDEST EQ PUSH2 0x28CE JUMPI PUSH2 0x28CE PUSH2 0xB05 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x28C9 JUMPI INVALID JUMPDEST PUSH2 0x3881 JUMP JUMPDEST DUP3 MLOAD PUSH1 0xC0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2930 JUMPI POP DUP3 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0xC0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2953 JUMPI PUSH2 0x2953 PUSH2 0xB05 DUP3 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0xC0 ADD MLOAD PUSH2 0x38B7 JUMP JUMPDEST DUP3 MLOAD PUSH1 0xE0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x29B5 JUMPI POP DUP3 PUSH1 0x80 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x29D8 JUMPI PUSH2 0x29D8 PUSH2 0xB05 DUP3 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x80 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0xE0 ADD MLOAD PUSH2 0x38EF JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29EC DUP3 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x231B JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2A3F JUMPI POP DUP4 MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0x2A3D SWAP1 DUP3 PUSH2 0xCC7 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x2A5B JUMPI DUP2 MLOAD DUP5 MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0x2A5B SWAP2 PUSH2 0xB05 SWAP2 DUP5 SWAP1 PUSH2 0x3927 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x120 ADD MLOAD PUSH2 0x2A6C SWAP1 PUSH2 0x395F JUMP JUMPDEST DUP3 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH2 0x140 DUP2 ADD DUP3 MSTORE DUP3 MLOAD DUP2 MSTORE DUP5 MLOAD PUSH1 0xA0 SWAP1 DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP1 DUP10 ADD DUP1 MLOAD DUP5 AND DUP7 DUP9 ADD MSTORE MLOAD DUP4 AND DUP2 DUP7 ADD MSTORE DUP9 MLOAD MLOAD DUP4 AND PUSH1 0x80 DUP7 ADD MSTORE DUP9 MLOAD SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP2 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP6 MLOAD DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0xC0 DUP5 ADD MSTORE DUP7 MLOAD SWAP1 SWAP2 ADD MLOAD DUP2 AND PUSH1 0xE0 DUP4 ADD MSTORE DUP6 DUP4 ADD MLOAD DUP2 AND PUSH2 0x100 DUP4 ADD MSTORE SWAP2 DUP4 ADD MLOAD SWAP1 SWAP2 AND PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x2B21 SWAP1 PUSH2 0x3A34 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x40 DUP6 ADD MSTORE SWAP1 DUP2 AND PUSH1 0x20 DUP5 ADD MSTORE DUP4 MLOAD PUSH1 0x80 ADD MLOAD AND ISZERO PUSH2 0x2BD8 JUMPI PUSH2 0x2BA3 DUP3 PUSH1 0x20 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x35CE JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP1 DUP5 ADD DUP3 SWAP1 MSTORE DUP5 MLOAD PUSH1 0x20 DUP2 ADD MLOAD SWAP2 DUP7 ADD MLOAD PUSH2 0x100 SWAP1 SWAP2 ADD MLOAD PUSH2 0x2BD8 SWAP4 PUSH2 0x3BF5 JUMP JUMPDEST DUP1 MLOAD DUP4 MLOAD PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x60 DUP1 DUP8 ADD MLOAD PUSH2 0x100 DUP5 ADD MLOAD DUP5 MLOAD PUSH1 0x20 DUP1 DUP8 ADD MLOAD SWAP1 DUP11 ADD MLOAD PUSH1 0x40 DUP1 DUP13 ADD MLOAD SWAP7 DUP13 ADD MLOAD DUP13 MLOAD PUSH2 0x120 SWAP1 SWAP11 ADD MLOAD SWAP2 MLOAD PUSH32 0xAB614D2B738543C0EA21F56347CF696A3A0C42A7CBEC3212A5CA22A4DCFF2124 SWAP12 PUSH2 0x2C3F SWAP12 SWAP1 SWAP11 SWAP10 SWAP4 SWAP1 SWAP2 PUSH2 0x510D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C55 PUSH2 0x4109 JUMP JUMPDEST PUSH2 0x2C5D PUSH2 0x40E7 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x2C68 SWAP1 PUSH2 0x904 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2C7C JUMPI INVALID JUMPDEST EQ PUSH2 0x2C9C JUMPI PUSH2 0x2C9C PUSH2 0xB05 DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x28C9 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x2CA6 PUSH2 0x246C JUMP JUMPDEST DUP5 MLOAD PUSH1 0xC0 ADD MLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ORIGIN EQ DUP1 ISZERO SWAP1 PUSH2 0x2D0C JUMPI POP DUP4 MLOAD PUSH1 0xC0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 ORIGIN DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0x2D28 JUMPI DUP2 MLOAD DUP5 MLOAD PUSH1 0xC0 ADD MLOAD PUSH2 0x2D28 SWAP2 PUSH2 0xB05 SWAP2 ORIGIN SWAP1 PUSH2 0x3CEB JUMP JUMPDEST POP DUP3 MLOAD PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2D8B JUMPI POP DUP3 PUSH1 0x60 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x2DAE JUMPI PUSH2 0x2DAE PUSH2 0xB05 DUP3 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0xA0 ADD MLOAD PUSH2 0x38B7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DC2 DUP3 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH2 0x231B JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2E15 JUMPI POP DUP4 MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0x2E13 SWAP1 DUP3 PUSH2 0xCC7 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x2E31 JUMPI DUP2 MLOAD DUP5 MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0x2E31 SWAP2 PUSH2 0xB05 SWAP2 DUP5 SWAP1 PUSH2 0x3927 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH2 0x140 DUP2 ADD DUP3 MSTORE DUP3 MLOAD DUP2 MSTORE DUP5 MLOAD PUSH1 0x80 SWAP1 DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP4 ADD MSTORE DUP6 ADD MLOAD PUSH2 0x2F7C SWAP3 DUP3 ADD SWAP1 PUSH2 0x2E7C JUMPI DUP6 PUSH1 0x60 ADD MLOAD PUSH2 0x2E7E JUMP JUMPDEST ADDRESS JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH2 0x3A34 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x40 DUP1 DUP7 ADD DUP3 SWAP1 MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x20 DUP1 DUP7 ADD DUP3 SWAP1 MSTORE DUP5 MLOAD DUP8 MLOAD PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x60 DUP11 ADD MLOAD DUP3 MLOAD SWAP5 DUP4 ADD MLOAD PUSH1 0xE0 SWAP1 SWAP4 ADD MLOAD SWAP8 MLOAD PUSH32 0x829FA99D94DC4636925B38632E625736A614C154D55006B7AB6BEA979C210C32 SWAP9 PUSH2 0x2C3F SWAP9 SWAP6 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP3 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x518D JUMP JUMPDEST PUSH1 0x60 PUSH32 0x21948612B5EF214EC0508DF4901600E07A810A371BE76B25D59ADE73826E3D97 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x302E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x51F1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x88B2C08E4A5F57D416AD23DAD18C20497CCFE684B1379B28FD564ADAF582B80F DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x302E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x50E1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30F6 PUSH2 0x246C JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0x8000000000000000000000000000000000000000000000000000000000000000 OR SWAP1 SSTORE MLOAD SWAP1 SWAP2 POP PUSH32 0xA6EB7CDC219E1518CED964E9A34E61D68A94E4F1569DB3E84256BA981BA52753 SWAP1 PUSH2 0x1A46 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH2 0x50BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3169 PUSH2 0x246C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP6 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 SWAP2 POP DUP3 DUP2 GT ISZERO PUSH2 0x31C0 JUMPI PUSH2 0x31C0 PUSH2 0xB05 DUP5 DUP4 PUSH2 0x3598 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP5 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP6 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0xA91FE7AE62FCE669DF2C7F880F8C14D178531AAE72515558E5C948E37C32A572 SWAP1 PUSH2 0x21E2 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH2 0x4FAE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0x3295 SWAP1 DUP5 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x5263 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x158D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST DUP1 CALLVALUE GT DUP1 ISZERO PUSH2 0x32D2 JUMPI POP CALLER ADDRESS EQ ISZERO JUMPDEST ISZERO PUSH2 0x3363 JUMPI PUSH1 0x0 PUSH2 0x32E3 CALLVALUE DUP4 PUSH2 0x3D23 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x330B SWAP1 PUSH2 0x4E8F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3348 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x334D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xAEA JUMPI PUSH2 0xAEA PUSH2 0xB05 CALLER DUP5 PUSH2 0x3D42 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x84356DB366796DC6E2AEB1AD74B631FE4E5EC6A650464DA6059E9F95C8810A10 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x339C SWAP3 SWAP2 SWAP1 PUSH2 0x4F87 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xCE918627CB55462DDBB85E73DE69A8B322F2BC88F4507C52FCAD6D4C33C29D49 DUP2 MSTORE DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x100 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x140 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x160 DUP3 ADD MSTORE PUSH2 0x160 DUP4 ADD MLOAD PUSH2 0x180 DUP3 ADD MSTORE PUSH2 0x1A0 DUP2 KECCAK256 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xB12BC7E7D341F4431D6FAF05F991EE3B779183E341B24243064E10C886CD1873 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x339C SWAP3 SWAP2 SWAP1 PUSH2 0x57E5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35E4 DUP4 PUSH2 0x35DE DUP7 DUP6 PUSH2 0x3D78 JUMP JUMPDEST SWAP1 PUSH2 0x3DA9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2314 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E DUP5 ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x362C SWAP3 SWAP2 SWAP1 PUSH2 0x4F87 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3644 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3658 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x367C SWAP2 SWAP1 PUSH2 0x4CE8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x36CE SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x4E92 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22CE SWAP2 SWAP1 PUSH2 0x4CE8 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x372D JUMPI DUP2 PUSH2 0x2314 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35E4 DUP4 PUSH2 0x35DE PUSH2 0x3748 DUP3 PUSH1 0x1 PUSH2 0x3D23 JUMP JUMPDEST PUSH2 0x3752 DUP9 DUP8 PUSH2 0x3D78 JUMP JUMPDEST SWAP1 PUSH2 0x3DD3 JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3780 JUMPI PUSH2 0x3780 PUSH2 0xB05 PUSH1 0x3 DUP5 PUSH2 0x3DEF JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 GT ISZERO DUP1 PUSH2 0x37DB JUMPI POP PUSH1 0x60 DUP2 ADD MLOAD PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A1 GT ISZERO JUMPDEST ISZERO PUSH2 0x37EE JUMPI PUSH2 0x37EE PUSH2 0xB05 PUSH1 0x5 DUP5 PUSH2 0x3830 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x37FD JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x3811 JUMPI PUSH2 0x3811 PUSH2 0xB05 PUSH1 0x3 DUP5 PUSH2 0x3830 JUMP JUMPDEST PUSH1 0x1 DUP2 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3820 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xD92 JUMPI PUSH2 0xD92 PUSH2 0xB05 PUSH1 0x0 DUP5 JUMPDEST PUSH1 0x60 PUSH32 0xF18F11F3027E735C758137924B262D4D3AFF0037DCD785ACA3C699FA05D960BD DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x339C SWAP3 SWAP2 SWAP1 PUSH2 0x52E3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x3876 JUMPI INVALID JUMPDEST PUSH1 0x1 ADD SWAP1 SHL SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x47AB394E41470191EAF9FA542E84AC483A12665FBD616EB8D1C022CED6C94000 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x339C SWAP3 SWAP2 SWAP1 PUSH2 0x5207 JUMP JUMPDEST PUSH1 0x60 PUSH32 0x5D3300180A4547B3E27137BE832D3EBF56F1BA5EBB30DD580999C61F77FA6396 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x302E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x50E1 JUMP JUMPDEST PUSH1 0x60 PUSH32 0x15E6A383BB02D79EE933B927FBECBA78CDDE16CBA84B94A99661F44BCCE3B736 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x302E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x50E1 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xF13E65D925201525F3D71A731833B19BB26E44CFBD97CAF72A366B73866F7124 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x302E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x50E1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x396A PUSH2 0x3E0C JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x397B JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x713 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3986 DUP5 PUSH2 0x3E38 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x39AE SWAP1 PUSH2 0x4E8F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x39EB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x39F0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x3A2B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x54D6 JUMP JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3A73 DUP4 PUSH2 0x100 ADD MLOAD PUSH2 0x3A6E DUP6 PUSH2 0x120 ADD MLOAD DUP7 PUSH1 0xE0 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3E85 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3EE6 JUMP JUMPDEST SWAP2 POP PUSH2 0x3ABE DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0xE0 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0xC0 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x35CE JUMP JUMPDEST SWAP1 POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND ISZERO DUP1 PUSH2 0x3AEF JUMPI POP PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO JUMPDEST ISZERO PUSH2 0x3AFF JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x3BF0 JUMP JUMPDEST PUSH2 0x120 DUP4 ADD MLOAD PUSH2 0x3B21 SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0x3F19 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3B3B PUSH2 0x246C JUMP JUMPDEST DUP5 MLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS EQ ISZERO PUSH2 0x3B9C JUMPI PUSH2 0x3B97 DUP4 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP5 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3F6E JUMP JUMPDEST PUSH2 0x3BC6 JUMP JUMPDEST PUSH2 0x3BC6 DUP4 PUSH1 0xA0 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3BF5 JUMP JUMPDEST PUSH2 0x3BF0 DUP4 PUSH1 0x80 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD DUP5 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x3BF5 JUMP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ADDRESS EQ ISZERO PUSH2 0x3C45 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x5479 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE DUP2 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x64 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND GAS CALL RETURNDATASIZE PUSH1 0x1 DUP4 MLOAD EQ PUSH1 0x20 DUP3 LT ISZERO AND DUP2 ISZERO OR DUP3 AND SWAP2 POP DUP2 PUSH2 0x27B1 JUMPI DUP1 PUSH1 0x0 DUP5 RETURNDATACOPY DUP1 DUP4 REVERT JUMPDEST PUSH1 0x60 PUSH32 0xC0972F3CC4234CA2091DE7E7BC7081494BD29AC280167D66F0D44168973B1634 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x302E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x50E1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x3D3C JUMPI PUSH2 0x3D3C PUSH2 0xB05 PUSH1 0x2 DUP6 DUP6 PUSH2 0x4050 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xBDE95CC2119E0200D80642397198ABFCF98E6E4DDDD0DE9C6320D86252AD40AB DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x339C SWAP3 SWAP2 SWAP1 PUSH2 0x4FE5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3D87 JUMPI POP PUSH1 0x0 PUSH2 0xD0F JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x3D94 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x2314 JUMPI PUSH2 0x2314 PUSH2 0xB05 PUSH1 0x1 DUP7 DUP7 PUSH2 0x4050 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3DBF JUMPI PUSH2 0x3DBF PUSH2 0xB05 PUSH1 0x3 DUP6 DUP6 PUSH2 0x4050 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x3DCA JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x2314 JUMPI PUSH2 0x2314 PUSH2 0xB05 PUSH1 0x0 DUP7 DUP7 PUSH2 0x4050 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xC996AF7B PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x339C SWAP3 SWAP2 SWAP1 PUSH2 0x52CC JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH32 0x0 AND GASPRICE MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x710 PUSH32 0x0 PUSH32 0x0 DUP5 PUSH2 0x406F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO PUSH2 0x3D3C JUMPI PUSH2 0x3D3C PUSH2 0xB05 PUSH1 0x2 DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4050 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x372D JUMPI DUP2 PUSH2 0x2314 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0x2314 JUMPI PUSH2 0x2314 PUSH2 0xB05 PUSH1 0x0 DUP7 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4050 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ADDRESS EQ ISZERO PUSH2 0x3FBE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x784 SWAP1 PUSH2 0x5479 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE DUP2 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND GAS CALL RETURNDATASIZE PUSH1 0x1 DUP4 MLOAD EQ PUSH1 0x20 DUP3 LT ISZERO AND DUP2 ISZERO OR DUP3 AND SWAP2 POP DUP2 PUSH2 0x4048 JUMPI DUP1 PUSH1 0x0 DUP5 RETURNDATACOPY DUP1 DUP4 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x302E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x52AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x40A9 SWAP1 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP7 SWAP1 DUP6 SWAP1 DUP8 SWAP1 PUSH1 0x20 ADD PUSH2 0x4DF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xD0F DUP2 PUSH2 0x5888 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x414B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x415E PUSH2 0x4159 DUP3 PUSH2 0x582B JUMP JUMPDEST PUSH2 0x5804 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x417F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x41A7 JUMPI DUP2 CALLDATALOAD PUSH2 0x4195 DUP2 PUSH2 0x5888 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4182 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x41C3 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x41DA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 PUSH1 0x80 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x41F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x420C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x421A PUSH2 0x4159 DUP3 PUSH2 0x582B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x423B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x41A7 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x423E JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xD0F DUP2 PUSH2 0x58AA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4278 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4281 DUP2 PUSH2 0x5804 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x428E DUP4 DUP4 PUSH2 0x4130 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x429D DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x4130 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x42AF DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x4478 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x42C1 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x4478 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x42D3 DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x4478 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x42E5 DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x4130 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x42F7 DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x4130 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x4309 DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x4130 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x431D DUP5 DUP3 DUP6 ADD PUSH2 0x4130 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x433B DUP5 DUP3 DUP6 ADD PUSH2 0x4483 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4365 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x436E DUP2 PUSH2 0x5804 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x437B DUP4 DUP4 PUSH2 0x4130 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x438A DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x4130 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x439C DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x4478 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x43AE DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x4478 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x43C0 DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x4130 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x43D2 DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x4130 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x43E4 DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x4130 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x4402 DUP5 DUP3 DUP6 ADD PUSH2 0x4483 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x442A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4434 PUSH1 0x80 PUSH2 0x5804 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x4441 DUP2 PUSH2 0x58B8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x4457 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xD0F DUP2 PUSH2 0x58C5 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x44AD JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x44B8 DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x44C8 DUP2 PUSH2 0x5888 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x44E8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x44F3 DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x450F JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x451B DUP9 DUP4 DUP10 ADD PUSH2 0x413B JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4530 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x453C DUP9 DUP4 DUP10 ADD PUSH2 0x413B JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4551 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x455E DUP8 DUP3 DUP9 ADD PUSH2 0x41FC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x457C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x4587 DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x44C8 DUP2 PUSH2 0x58AA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x45AC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x45B7 DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x45C7 DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x45D7 DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x45F9 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x460F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x461F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x462D PUSH2 0x4159 DUP3 PUSH2 0x582B JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP6 ADD DUP10 DUP3 DUP4 DUP8 MUL DUP9 ADD ADD GT ISZERO PUSH2 0x464D JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP5 DUP7 LT ISZERO PUSH2 0x4678 JUMPI DUP1 CALLDATALOAD PUSH2 0x4664 DUP2 PUSH2 0x5888 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x4651 JUMP JUMPDEST POP DUP2 SWAP7 POP PUSH2 0x4688 DUP10 DUP3 DUP11 ADD PUSH2 0x425A JUMP JUMPDEST SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x46A8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x46BF JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x46D2 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x46E0 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x46F3 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4719 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4730 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x473C DUP8 DUP4 DUP9 ADD PUSH2 0x413B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4751 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x475D DUP8 DUP4 DUP9 ADD PUSH2 0x413B JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4772 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8FA DUP7 DUP3 DUP8 ADD PUSH2 0x41FC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4794 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x47AB JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x47BE JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x47CC JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 PUSH2 0x180 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x47E1 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 DUP4 ADD SWAP7 POP SWAP5 POP SWAP1 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x47FB JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x4808 DUP8 DUP3 DUP9 ADD PUSH2 0x41B2 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4826 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x483C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x484C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x485A PUSH2 0x4159 DUP3 PUSH2 0x582B JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD PUSH2 0x180 DUP1 DUP6 MUL DUP7 ADD DUP8 ADD DUP11 LT ISZERO PUSH2 0x4879 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP5 DUP7 LT ISZERO PUSH2 0x48A5 JUMPI PUSH2 0x488F DUP11 DUP4 PUSH2 0x4265 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP3 DUP7 ADD SWAP3 SWAP1 DUP2 ADD SWAP1 PUSH2 0x487D JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x48C8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x48DF JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x48F2 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x4900 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP9 PUSH1 0x20 PUSH2 0x140 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x47E1 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4927 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x493D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x494D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x495B PUSH2 0x4159 DUP3 PUSH2 0x582B JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD PUSH2 0x140 DUP1 DUP6 MUL DUP7 ADD DUP8 ADD DUP11 LT ISZERO PUSH2 0x497A JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP5 DUP7 LT ISZERO PUSH2 0x48A5 JUMPI PUSH2 0x4990 DUP11 DUP4 PUSH2 0x4352 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP3 DUP7 ADD SWAP3 SWAP1 DUP2 ADD SWAP1 PUSH2 0x497E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x49B7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2314 DUP2 PUSH2 0x5888 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x49D6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x49E1 DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x49F1 DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4A14 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2314 DUP4 DUP4 PUSH2 0x4265 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 SUB PUSH2 0x200 DUP2 SLT ISZERO PUSH2 0x4A32 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4A3C DUP6 DUP6 PUSH2 0x4265 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE80 DUP3 ADD SLT ISZERO PUSH2 0x4A6D JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x180 DUP4 ADD SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4A91 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4A9B DUP6 DUP6 PUSH2 0x4265 JUMP JUMPDEST SWAP3 POP PUSH2 0x4AAB DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x4419 JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x4ABC DUP2 PUSH2 0x58C5 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x260 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4ADF JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4AE9 DUP8 DUP8 PUSH2 0x4265 JUMP JUMPDEST SWAP5 POP PUSH2 0x4AF9 DUP8 PUSH2 0x180 DUP9 ADD PUSH2 0x4419 JUMP JUMPDEST SWAP4 POP PUSH2 0x200 DUP7 ADD CALLDATALOAD PUSH2 0x4B0A DUP2 PUSH2 0x58C5 JUMP JUMPDEST SWAP3 POP PUSH2 0x220 DUP7 ADD CALLDATALOAD PUSH2 0x4B1B DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP2 POP PUSH2 0x240 DUP7 ADD CALLDATALOAD PUSH2 0x4B2C DUP2 PUSH2 0x5888 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x4B4F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x4B5C JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x4B67 PUSH1 0x60 PUSH2 0x5804 JUMP JUMPDEST DUP5 MLOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x4B7C JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x4B8F DUP2 PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x4BA5 DUP2 PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x4ABC DUP2 PUSH2 0x58AA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4BC8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2314 DUP4 DUP4 PUSH2 0x4352 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1C0 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4BE5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4BEF DUP5 DUP5 PUSH2 0x4352 JUMP JUMPDEST SWAP2 POP PUSH2 0x4BFF DUP5 PUSH2 0x140 DUP6 ADD PUSH2 0x4419 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1E0 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4C1D JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4C27 DUP6 DUP6 PUSH2 0x4352 JUMP JUMPDEST SWAP3 POP PUSH2 0x4C37 DUP6 PUSH2 0x140 DUP7 ADD PUSH2 0x4419 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C0 DUP5 ADD CALLDATALOAD PUSH2 0x4ABC DUP2 PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x240 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x4C61 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x4C6B DUP9 DUP9 PUSH2 0x4352 JUMP JUMPDEST SWAP6 POP PUSH2 0x4C7B DUP9 PUSH2 0x140 DUP10 ADD PUSH2 0x4419 JUMP JUMPDEST SWAP5 POP PUSH2 0x1C0 DUP8 ADD CALLDATALOAD PUSH2 0x4C8C DUP2 PUSH2 0x58C5 JUMP JUMPDEST SWAP4 POP PUSH2 0x1E0 DUP8 ADD CALLDATALOAD PUSH2 0x4C9D DUP2 PUSH2 0x5888 JUMP JUMPDEST SWAP3 POP PUSH2 0x200 DUP8 ADD CALLDATALOAD PUSH2 0x4CAE DUP2 PUSH2 0x58AA JUMP JUMPDEST SWAP2 POP PUSH2 0x220 DUP8 ADD CALLDATALOAD PUSH2 0x4CBF DUP2 PUSH2 0x5888 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CDE JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2314 DUP4 DUP4 PUSH2 0x4419 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4CF9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4D4B JUMPI DUP2 MLOAD ISZERO ISZERO DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4D2D JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x4D69 JUMPI INVALID JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x4D96 DUP2 PUSH2 0x58B8 JUMP JUMPDEST PUSH2 0x4D9F DUP2 PUSH2 0x587E JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP1 DUP3 EQ PUSH2 0x4DB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x40 DUP2 DUP2 ADD CALLDATALOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD CALLDATALOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 SWAP5 SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x60 SWAP3 SWAP1 SWAP3 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x1 DUP5 ADD MSTORE PUSH1 0x15 DUP4 ADD MSTORE PUSH1 0x35 DUP3 ADD MSTORE PUSH1 0x55 ADD SWAP1 JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP5 MSTORE PUSH1 0x20 PUSH1 0x60 DUP2 DUP7 ADD MSTORE DUP3 DUP8 MLOAD DUP1 DUP6 MSTORE PUSH1 0x80 DUP8 ADD SWAP2 POP DUP3 DUP10 ADD SWAP5 POP DUP6 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4F6E JUMPI DUP6 MLOAD DUP6 AND DUP4 MSTORE SWAP5 DUP4 ADD SWAP5 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4F50 JUMP JUMPDEST POP POP DUP1 SWAP5 POP POP POP POP POP DUP3 ISZERO ISZERO PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP5 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x80 DUP6 ADD SWAP1 DUP3 DUP10 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x504C JUMPI PUSH2 0x503C DUP5 DUP4 MLOAD PUSH2 0x4D56 JUMP JUMPDEST SWAP3 DUP6 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5029 JUMP JUMPDEST POP POP POP DUP5 DUP2 SUB DUP3 DUP7 ADD MSTORE DUP7 MLOAD DUP1 DUP3 MSTORE SWAP1 DUP3 ADD SWAP3 POP DUP7 DUP3 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5089 JUMPI PUSH2 0x5079 DUP6 DUP5 MLOAD PUSH2 0x4DD1 JUMP JUMPDEST SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x5066 JUMP JUMPDEST POP POP POP POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x509F DUP2 DUP6 PUSH2 0x4D1A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP11 DUP12 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP10 DUP11 AND PUSH1 0x20 DUP13 ADD MSTORE SWAP8 DUP10 AND PUSH1 0x40 DUP12 ADD MSTORE SWAP6 DUP9 AND PUSH1 0x60 DUP11 ADD MSTORE SWAP4 DUP8 AND PUSH1 0x80 DUP10 ADD MSTORE SWAP2 SWAP1 SWAP6 AND PUSH1 0xA0 DUP8 ADD MSTORE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND PUSH1 0xC0 DUP8 ADD MSTORE DUP5 AND PUSH1 0xE0 DUP7 ADD MSTORE SWAP1 SWAP3 AND PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x120 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x140 DUP3 ADD MSTORE PUSH2 0x160 ADD SWAP1 JUMP JUMPDEST SWAP8 DUP9 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND PUSH1 0x20 DUP10 ADD MSTORE SWAP5 DUP7 AND PUSH1 0x40 DUP9 ADD MSTORE SWAP3 DUP6 AND PUSH1 0x60 DUP8 ADD MSTORE SWAP4 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND PUSH1 0xA0 DUP6 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0xFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x52B8 DUP6 PUSH2 0x587E JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x52D9 DUP5 PUSH2 0x587E JUMP JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x20 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH1 0x6 DUP5 LT PUSH2 0x52D9 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x531D JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x5301 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x532E JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x4E61746976654F7264657273466561747572652F4D49534D4154434845445F41 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x525241595F4C454E475448530000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x4E61746976654F7264657273466561747572652F4E4F5F434F4E54524143545F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4F524947494E5300000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x4E61746976654F7264657273466561747572652F4D49534D4154434845445F50 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4149525F4F52444552535F41525241595F4C454E475448530000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x466978696E546F6B656E5370656E6465722F43414E4E4F545F494E564F4B455F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x53454C4600000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x466978696E50726F746F636F6C466565732F45544845525F5452414E53464552 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F46414C49454400000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH2 0x200 DUP2 ADD PUSH1 0x20 DUP5 ADD PUSH2 0x554F DUP4 PUSH2 0x554A DUP4 DUP9 PUSH2 0x4130 JUMP JUMPDEST PUSH2 0x4D00 JUMP JUMPDEST PUSH2 0x5559 DUP2 DUP7 PUSH2 0x584B JUMP JUMPDEST SWAP1 POP PUSH2 0x5568 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP PUSH2 0x5576 PUSH1 0x40 DUP6 ADD DUP6 PUSH2 0x5858 JUMP JUMPDEST PUSH2 0x5583 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x4DD1 JUMP JUMPDEST POP PUSH2 0x5591 PUSH1 0x60 DUP6 ADD DUP6 PUSH2 0x5858 JUMP JUMPDEST PUSH2 0x559E PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x4DD1 JUMP JUMPDEST POP PUSH2 0x55AC PUSH1 0x80 DUP6 ADD DUP6 PUSH2 0x5858 JUMP JUMPDEST PUSH2 0x55B9 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x4DD1 JUMP JUMPDEST POP PUSH2 0x55C7 PUSH1 0xA0 DUP6 ADD DUP6 PUSH2 0x584B JUMP JUMPDEST PUSH2 0x55D4 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP PUSH2 0x55E2 PUSH1 0xC0 DUP6 ADD DUP6 PUSH2 0x584B JUMP JUMPDEST PUSH2 0x55EF PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP PUSH2 0x55FD PUSH1 0xE0 DUP6 ADD DUP6 PUSH2 0x584B JUMP JUMPDEST PUSH2 0x560A PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP PUSH2 0x100 PUSH2 0x561A DUP2 DUP7 ADD DUP7 PUSH2 0x584B JUMP JUMPDEST PUSH2 0x5626 DUP3 DUP6 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP POP PUSH2 0x120 DUP5 DUP2 ADD CALLDATALOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 PUSH2 0x5642 DUP2 DUP7 ADD DUP7 PUSH2 0x5865 JUMP JUMPDEST PUSH2 0x564E DUP3 DUP6 ADD DUP3 PUSH2 0x4DE7 JUMP JUMPDEST POP POP PUSH2 0x160 DUP5 DUP2 ADD CALLDATALOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x2314 PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0x4D8B JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xD0F DUP3 DUP5 PUSH2 0x4D56 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD PUSH2 0x5685 DUP3 DUP7 PUSH2 0x4D56 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x60 DUP4 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1C0 DUP2 ADD PUSH1 0x20 DUP5 ADD PUSH2 0x56C4 DUP4 PUSH2 0x554A DUP4 DUP9 PUSH2 0x4130 JUMP JUMPDEST PUSH2 0x56CE DUP2 DUP7 PUSH2 0x584B JUMP JUMPDEST SWAP1 POP PUSH2 0x56DD PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP PUSH2 0x56EB PUSH1 0x40 DUP6 ADD DUP6 PUSH2 0x5858 JUMP JUMPDEST PUSH2 0x56F8 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x4DD1 JUMP JUMPDEST POP PUSH2 0x5706 PUSH1 0x60 DUP6 ADD DUP6 PUSH2 0x5858 JUMP JUMPDEST PUSH2 0x5713 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x4DD1 JUMP JUMPDEST POP PUSH2 0x5721 PUSH1 0x80 DUP6 ADD DUP6 PUSH2 0x584B JUMP JUMPDEST PUSH2 0x572E PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP PUSH2 0x573C PUSH1 0xA0 DUP6 ADD DUP6 PUSH2 0x584B JUMP JUMPDEST PUSH2 0x5749 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP PUSH2 0x5757 PUSH1 0xC0 DUP6 ADD DUP6 PUSH2 0x584B JUMP JUMPDEST PUSH2 0x5764 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x4D00 JUMP JUMPDEST POP PUSH1 0xE0 DUP5 ADD CALLDATALOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 PUSH2 0x577E DUP2 DUP7 ADD DUP7 PUSH2 0x5865 JUMP JUMPDEST PUSH2 0x578A DUP3 DUP6 ADD DUP3 PUSH2 0x4DE7 JUMP JUMPDEST POP POP PUSH2 0x120 DUP5 DUP2 ADD CALLDATALOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x2314 PUSH2 0x140 DUP4 ADD DUP5 PUSH2 0x4D8B JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x5823 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x5841 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH2 0x2314 DUP2 PUSH2 0x5888 JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH2 0x2314 DUP2 PUSH2 0x58C5 JUMP JUMPDEST PUSH1 0x0 DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2314 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x3363 JUMPI INVALID JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x3363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x3363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3363 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD 0xF7 0xF9 0xC9 0xD6 0x5F 0xE4 0x5E PUSH9 0x98B05CD3959D4948CB 0x4D MLOAD 0xEE 0xED SWAP9 PUSH11 0x1F1C5828747C46C364736F PUSH13 0x634300060C0033000000000000 ",
                "sourceMap": "916:3276:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4250:236:16;;;;;;;;;;-1:-1:-1;4250:236:16;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1134:75:7;;;;;;;;;;;;;:::i;10055:651:15:-;;;;;;;;;;-1:-1:-1;10055:651:15;;;;;:::i;:::-;;:::i;:::-;;5000:1001:16;;;;;;;;;;-1:-1:-1;5000:1001:16;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2868:863::-;;;;;;;;;;-1:-1:-1;2868:863:16;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;6512:993::-;;;;;;;;;;-1:-1:-1;6512:993:16;;;;;:::i;:::-;;:::i;1707:205:17:-;;;;;;;;;;-1:-1:-1;1707:205:17;;;;;:::i;:::-;;:::i;10404:790:18:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;8878:1021::-;;;;;;;;;;-1:-1:-1;8878:1021:18;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2139:153:17:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1030:60:7:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;15105:342:16:-;;;;;;;;;;-1:-1:-1;15105:342:16;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1763:464:15:-;;;;;;;;;;-1:-1:-1;1763:464:15;;;;;:::i;:::-;;:::i;5895:655::-;;;;;;;;;;-1:-1:-1;5895:655:15;;;;;:::i;:::-;;:::i;1836:2354:7:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;7302:1089:18:-;;;;;;:::i;:::-;;:::i;9153:467:15:-;;;;;;;;;;-1:-1:-1;9153:467:15;;;;;:::i;:::-;;:::i;2018:710:16:-;;;;;;;;;;-1:-1:-1;2018:710:16;;;;;:::i;:::-;;:::i;8390:241:15:-;;;;;;;;;;-1:-1:-1;8390:241:15;;;;;:::i;:::-;;:::i;3108:206::-;;;;;;;;;;-1:-1:-1;3108:206:15;;;;;:::i;:::-;;:::i;7080:881::-;;;;;;;;;;-1:-1:-1;7080:881:15;;;;;:::i;:::-;;:::i;1045:47:21:-;;;;;;;;;;;;;:::i;11788:833:18:-;;;;;;;;;;-1:-1:-1;11788:833:18;;;;;:::i;:::-;;:::i;6020:793::-;;;;;;;;;;-1:-1:-1;6020:793:18;;;;;:::i;:::-;;:::i;9972:1329:16:-;;;;;;;;;;-1:-1:-1;9972:1329:16;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;12888:527:18:-;;;;;;;;;;-1:-1:-1;12888:527:18;;;;;:::i;:::-;;:::i;4925:533:15:-;;;;;;;;;;-1:-1:-1;4925:533:15;;;;;:::i;:::-;;:::i;8074:1335:16:-;;;;;;;;;;-1:-1:-1;8074:1335:16;;;;;:::i;:::-;;:::i;4156:245:15:-;;;;;;;;;;-1:-1:-1;4156:245:15;;;;;:::i;:::-;;:::i;990:48:20:-;;;;;;;;;;;;;:::i;3871:242:16:-;;;;;;;;;;-1:-1:-1;3871:242:16;;;;;:::i;:::-;;:::i;23043:350:18:-;;;;;;;;;;-1:-1:-1;23043:350:18;;;;;:::i;:::-;;:::i;4659:859::-;;;;;;:::i;:::-;;:::i;3525:200:15:-;;;;;;;;;;-1:-1:-1;3525:200:15;;;;;:::i;:::-;;:::i;11235:877::-;;;;;;;;;;-1:-1:-1;11235:877:15;;;;;:::i;:::-;;:::i;2435:458::-;;;;;;;;;;-1:-1:-1;2435:458:15;;;;;:::i;:::-;;:::i;4250:236:16:-;4358:17;4398:81;4426:43;4463:5;4426:36;:43::i;:::-;4398:14;:81::i;:::-;4391:88;;4250:236;;;;:::o;1134:75:7:-;;;:::o;10055:651:15:-;10297:11;:18;10275:11;:18;:40;:98;;;;;10353:13;:20;10331:11;:18;:42;10275:98;10254:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;10471:9;10466:234;10490:11;:18;10486:1;:22;10466:234;;;10529:160;10567:10;10595:11;10607:1;10595:14;;;;;;;;;;;;;;10627:11;10639:1;10627:14;;;;;;;;;;;;;;10659:13;10673:1;10659:16;;;;;;;;;;;;;;10529:20;:160::i;:::-;10510:3;;10466:234;;;;10055:651;;;:::o;5000:1001:16:-;5199:41;;:::i;:::-;5254:38;5306:21;5364:24;5382:5;5364:17;:24::i;:::-;5352:36;;5431:339;5479:281;;;;;;;;5544:5;:11;;;5479:281;;;;;;5585:5;:16;;;5479:281;;;;;;5637:5;:17;;;5479:281;;;;;;5690:5;:17;;;5479:281;;;;;;5736:9;5479:281;;;5431:34;:339::i;:::-;5832:19;;5398:372;;-1:-1:-1;5780:20:16;;5803:60;;;;;;;;;5853:9;5803:60;:::i;:::-;:28;:60::i;:::-;5780:83;;5920:12;5905:27;;:5;:11;;;:27;;;5904:90;;;;5949:45;5968:5;:11;;;5981:12;5949:18;:45::i;:::-;5873:121;;5000:1001;;;;;;:::o;2868:863::-;2976:41;;:::i;:::-;3104:22;3120:5;3104:15;:22::i;:::-;3082:44;;:19;3159:35;:33;:35::i;:::-;3283:11;;;;3159:136;;;;;;;;:106;;;;;:136;;;;;;;;3321:16;;3159:180;;;;;;;;;3365:16;;;;3159:224;;;;;;;;;;;3460:17;;;;3491:12;;;;3517:10;;;;3159:224;;-1:-1:-1;3393:170:16;;3437:9;;3460:17;3491:12;3159:224;3393:30;:170::i;:::-;3617:14;;;;:28;;3613:112;;3680:34;3661:16;;;:53;3613:112;2868:863;;;;:::o;6512:993::-;6705:41;;:::i;:::-;6760:38;6812:21;6870:22;6886:5;6870:15;:22::i;:::-;6858:34;;6935:339;6983:281;;;;;;;;7048:5;:11;;;6983:281;;;;;;7089:5;:16;;;6983:281;;;;;;7141:5;:17;;;6983:281;;;;;;7194:5;:17;;;6983:281;;;;;;7240:9;6983:281;;;6935:34;:339::i;:::-;6902:372;;7284:20;7307:60;7336:9;:19;;;7357:9;7307:28;:60::i;:::-;7284:83;;7424:12;7409:27;;:5;:11;;;:27;;;7408:90;;;;7453:45;7472:5;:11;;;7485:12;7453:18;:45::i;1707:205:17:-;1809:9;1804:102;1824:18;;;1804:102;;;1863:32;1884:7;;1892:1;1884:10;;;;;;;;;;;;;1863:20;:32::i;:::-;1844:3;;1804:102;;;;1707:205;;:::o;10404:790:18:-;10698:30;;1272:10:19;1294:4;1272:27;1268:123;;1315:65;:55;1359:10;1315:43;:55::i;:::-;:63;:65::i;:::-;10776:37:18::1;;:::i;:::-;10828:200;10851:176;;;;;;;;10896:5;10851:176;;;;10919:9;10851:176;;;;10946:20;10851:176;;;;;;10984:5;10851:176;;;;;;11007:6;10851:176;;;;::::0;10828:22:::1;:200::i;:::-;11103:30;::::0;::::1;::::0;11147::::1;::::0;;::::1;::::0;11103;;11147;;-1:-1:-1;10404:790:18;-1:-1:-1;;;;;;;10404:790:18:o;8878:1021::-;9077:30;9123:37;;:::i;:::-;9196:282;;;;;;;;;;;;;;;;;;;;;;;;;;;9375:10;9196:282;;;;;;-1:-1:-1;9196:282:18;;;;;;;;9175:304;;:20;:304::i;:::-;9123:356;;9584:20;9551:53;;:7;:30;;;:53;;;9547:281;;;9620:197;:187;9685:22;9701:5;9685:15;:22::i;:::-;9725:7;:30;;;9620:187;;9773:20;9620:187;;:47;:187::i;:197::-;9862:30;;;;8878:1021;-1:-1:-1;;;;8878:1021:18:o;2139:153:17:-;2262:23;2139:153;:::o;1030:60:7:-;;;;;;;;;;;;;;;;;;;:::o;15105:342:16:-;15231:12;15323:35;:33;:35::i;:::-;:92;;;;;;;;:68;;;;;:92;;;;;;;;:117;;;;;;;;;;;;;;-1:-1:-1;15105:342:16;;;;;:::o;1763:464:15:-;1858:17;1878:24;1896:5;1878:17;:24::i;:::-;1858:44;;1930:5;:11;;;1916:25;;:10;:25;;;;:73;;;;;1946:43;1965:5;:11;;;1978:10;1946:18;:43::i;:::-;1945:44;1916:73;1912:259;;;2005:155;:145;2070:9;2097:10;2125:5;:11;;;2005:47;:145::i;:155::-;2180:40;2197:9;2208:5;:11;;;2180:16;:40::i;:::-;1763:464;;:::o;5895:655::-;6139:11;:18;6117:11;:18;:40;:98;;;;;6195:13;:20;6173:11;:18;:42;6117:98;6096:201;;;;;;;;;;;;:::i;:::-;6313:9;6308:236;6332:11;:18;6328:1;:22;6308:236;;;6371:162;6411:10;6439:11;6451:1;6439:14;;;;;;;;;;;;;;6471:11;6483:1;6471:14;;;;;;;;;;;;;;6503:13;6517:1;6503:16;;;;;;;;;;;;;;6371:22;:162::i;:::-;6352:3;;6308:236;;1836:2354:7;1889:14;1919:68;1944:42;1919:24;:68::i;:::-;1997:54;2022:28;1997:24;:54::i;:::-;2061:52;2086:26;2061:24;:52::i;:::-;2123:60;2148:34;2123:24;:60::i;:::-;2193:58;2218:32;2193:24;:58::i;:::-;2261:55;2286:29;2261:24;:55::i;:::-;2326:53;2351:27;2326:24;:53::i;:::-;2389:56;2414:30;2389:24;:56::i;:::-;2455:54;2480:28;2455:24;:54::i;:::-;2519:62;2544:36;2519:24;:62::i;:::-;2591:60;2616:34;2591:24;:60::i;:::-;2661:61;2686:35;2661:24;:61::i;:::-;2732:71;2757:45;2732:24;:71::i;:::-;2813:66;2838:40;2813:24;:66::i;:::-;2889:76;2914:50;2889:24;:76::i;:::-;2975:59;3000:33;2975:24;:59::i;:::-;3044:69;3069:43;3044:24;:69::i;:::-;3123:64;3148:38;3123:24;:64::i;:::-;3197:74;3222:48;3197:24;:74::i;:::-;3281:57;3306:31;3281:24;:57::i;:::-;3348:55;3373:29;3348:24;:55::i;:::-;3413:57;3438:31;3413:24;:57::i;:::-;3480:55;3505:29;3480:24;:55::i;:::-;3545:64;3570:38;3545:24;:64::i;:::-;3619:65;3644:39;3619:24;:65::i;:::-;3694:66;3719:40;3694:24;:66::i;:::-;3770:64;3795:38;3770:24;:64::i;:::-;3844:72;3869:46;3844:24;:72::i;:::-;3926:70;3951:44;3926:24;:70::i;:::-;4006:66;4031:40;4006:24;:66::i;:::-;4082:58;4107:32;4082:24;:58::i;:::-;-1:-1:-1;4157:26:7;1836:2354;:::o;7302:1089:18:-;7521:30;7567:37;;:::i;:::-;7619:266;7642:242;;;;;;;;7695:5;7642:242;;;;7729:9;7642:242;;;;7778:20;7642:242;;;;;;7823:10;7642:242;;;;;;7859:10;7642:242;;;;;7619:22;:266::i;:::-;7567:318;;7990:20;7957:53;;:7;:30;;;:53;;;7953:283;;;8026:199;:189;8091:24;8109:5;8091:17;:24::i;8026:199::-;8292:26;;8245:74;;:46;:74::i;9153:467:15:-;9355:37;9374:5;9381:10;9355:18;:37::i;:::-;9350:188;;9408:119;:109;9470:5;9493:10;9408:44;:109::i;:119::-;9548:65;9569:5;9576:10;9588;9600:12;9548:20;:65::i;2018:710:16:-;2130:41;;:::i;:::-;2258:24;2276:5;2258:17;:24::i;:::-;2236:46;;:19;2315:35;:33;:35::i;:::-;2441:11;;;;2315:138;;;;;;;;:108;;;;;:138;;;;;;;;2479:16;;2315:182;;;;;;;;;2523:16;;;;2315:226;;;;;;;;;;;2618:17;;;;2649:12;;;;2675:10;;;;2315:226;;-1:-1:-1;2551:170:16;;2595:9;;2618:17;2649:12;2315:226;2551:30;:170::i;8390:241:15:-;8554:70;8575:10;8587;8599;8611:12;8554:20;:70::i;3108:206::-;3217:9;3212:96;3236:6;:13;3232:1;:17;3212:96;;;3270:27;3287:6;3294:1;3287:9;;;;;;;;;;;;;;3270:16;:27::i;:::-;3251:3;;3212:96;;7080:881;7357:11;:18;7335:11;:18;:40;:98;;;;;7413:13;:20;7391:11;:18;:42;7335:98;7314:201;;;;;;;;;;;;:::i;:::-;7531:37;7550:5;7557:10;7531:18;:37::i;:::-;7526:188;;7584:119;:109;7646:5;7669:10;7584:44;:109::i;:119::-;7729:9;7724:231;7748:11;:18;7744:1;:22;7724:231;;;7787:157;7827:5;7850:11;7862:1;7850:14;;;;;;;7787:157;7768:3;;7724:231;;;;7080:881;;;;:::o;1045:47:21:-;;;:::o;11788:833:18:-;12094:30;;1272:10:19;1294:4;1272:27;1268:123;;1315:65;:55;1359:10;1315:43;:55::i;:65::-;12172:37:18::1;;:::i;:::-;12224:231;12245:209;;;;;;;;12288:5;12245:209;;;;12311:9;12245:209;;;;12338:20;12245:209;;;;;;12376:5;12245:209;;;;;;12399:14;12245:209;;;;;;12431:9;12245:209;;;;::::0;12224:20:::1;:231::i;:::-;12530:30;::::0;::::1;::::0;12574::::1;::::0;;::::1;::::0;12530;;12574;;-1:-1:-1;11788:833:18;-1:-1:-1;;;;;;;;11788:833:18:o;6020:793::-;6213:30;6245;6291:37;;:::i;:::-;6364:282;;;;;;;;;;;;;;;;;;;;;;;;;;;6543:10;6364:282;;;;;;-1:-1:-1;6364:282:18;;;;;;;;6343:304;;:20;:304::i;:::-;6722:30;;;;6766;;;;;6722;;6766;;-1:-1:-1;6020:793:18;-1:-1:-1;;;;;6020:793:18:o;9972:1329:16:-;10183:44;;;10380:34;;;10359:125;;;;;;;;;;;;:::i;:::-;10538:6;10507:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;10494:58:16;-1:-1:-1;10610:6:16;10596:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10596:28:16;-1:-1:-1;10562:62:16;-1:-1:-1;10665:6:16;10654:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10654:25:16;;10634:45;;10694:9;10689:606;10709:17;;;10689:606;;;10767:4;:29;10797:6;;10804:1;10797:9;;;;;;;;;;;;10808:10;;10819:1;10808:13;;;;;;;;;;;;10767:55;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10767:55:16;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;10747:538;;;;;11098:9;11082:10;11093:1;11082:13;;;;;;;;;;;;;:25;;;;11162:30;11125:31;11157:1;11125:34;;;;;;;;;;;;;:67;;;;;;;;;;;11233:16;11210:17;11228:1;11210:20;;;;;;;;:39;;;:20;;;;;;;;;;;:39;-1:-1:-1;;;10747:538:16;10728:3;;10689:606;;;;9972:1329;;;;;;;;:::o;12888:527:18:-;13024:10;13038:9;13024:23;13016:87;;;;;;;;;;;;:::i;:::-;13114:43;13172:35;:33;:35::i;:::-;13114:93;;13223:9;13218:123;13242:7;:14;13238:1;:18;13218:123;;;13297:10;13277:31;;;;:19;;;:31;;;;;13309:10;;13323:7;;13277:31;13309:7;;13317:1;;13309:10;;;;;;;;;;;;;;;;;13277:43;;;;;;;;;;;;-1:-1:-1;13277:43:18;:53;;;;;;;;;;;;;-1:-1:-1;13258:3:18;13218:123;;;;13356:52;13379:10;13391:7;13400;13356:52;;;;;;;;:::i;:::-;;;;;;;;12888:527;;;:::o;4925:533:15:-;5191:37;5210:5;5217:10;5191:18;:37::i;:::-;5186:188;;5244:119;:109;5306:5;5329:10;5244:44;:109::i;:119::-;5384:67;5407:5;5414:10;5426;5438:12;5384:22;:67::i;8074:1335:16:-;8289:44;;;8486:34;;;8465:125;;;;;;;;;;;;:::i;:::-;8644:6;8613:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;8600:58:16;-1:-1:-1;8716:6:16;8702:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8702:28:16;-1:-1:-1;8668:62:16;-1:-1:-1;8771:6:16;8760:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8760:25:16;;8740:45;;8800:9;8795:608;8815:17;;;8795:608;;;8873:4;:31;8905:6;;8912:1;8905:9;;;;;;;;;;;;8916:10;;8927:1;8916:13;;;;;;;;;;;;8873:57;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8873:57:16;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;8853:540;;;;;9206:9;9190:10;9201:1;9190:13;;;;;;;;;;;;;:25;;;;9270:30;9233:31;9265:1;9233:34;;;;;;;;;;;;;:67;;;;;;;;;;;9341:16;9318:17;9336:1;9318:20;;;;;;;;:39;;;:20;;;;;;;;;;;:39;-1:-1:-1;;;8853:540:16;8834:3;;8795:608;;4156:245:15;4322:72;4345:10;4357;4369;4381:12;4322:22;:72::i;990:48:20:-;;;:::o;3871:242:16:-;3983:17;4023:83;4051:45;4090:5;4051:38;:45::i;23043:350:18:-;23162:43;23220:35;:33;:35::i;:::-;23291:10;23266:36;;;;:24;;;:36;;;;;;;;;:44;;;;;;;;;;;:54;;;;;;;;;;23336:50;23266:24;;-1:-1:-1;23336:50:18;;;;23291:10;23266:44;;:54;;23336:50;:::i;4659:859::-;4872:30;4904;4950:37;;:::i;:::-;5002:266;5025:242;;;;;;;;5078:5;5025:242;;;;5112:9;5025:242;;;;5161:20;5025:242;;;;;;5206:10;5025:242;;;;;;5242:10;5025:242;;;;;5002:22;:266::i;:::-;4950:318;;5278:74;5325:7;:26;;;5278:46;:74::i;:::-;5427:30;;;;5471;;;;;5427;;5471;;-1:-1:-1;4659:859:18;-1:-1:-1;;;;4659:859:18:o;3525:200:15:-;3630:9;3625:94;3649:6;:13;3645:1;:17;3625:94;;;3683:25;3698:6;3705:1;3698:9;;;;;;;;;;;;;;3683:14;:25::i;:::-;3664:3;;3625:94;;11235:877;11510:11;:18;11488:11;:18;:40;:98;;;;;11566:13;:20;11544:11;:18;:42;11488:98;11467:201;;;;;;;;;;;;:::i;:::-;11684:37;11703:5;11710:10;11684:18;:37::i;:::-;11679:188;;11737:119;:109;11799:5;11822:10;11737:44;:109::i;:119::-;11882:9;11877:229;11901:11;:18;11897:1;:22;11877:229;;;11940:155;11978:5;12001:11;12013:1;12001:14;;;;;;;11940:155;11921:3;;11877:229;;2435:458;2526:17;2546:22;2562:5;2546:15;:22::i;:::-;2526:42;;2596:5;:11;;;2582:25;;:10;:25;;;;:73;;;;;2612:43;2631:5;:11;;;2644:10;2612:18;:43::i;:::-;2611:44;2582:73;2578:259;;;2671:155;:145;2736:9;2763:10;2791:5;:11;;;2671:47;:145::i;:155::-;2846:40;2863:9;2874:5;:11;;;2846:16;:40::i;6921:1727:13:-;7022:18;7482:4;7476:11;7512:19;7507:3;7500:32;7625:5;7619:12;7605;7601:31;7594:4;7589:3;7585:14;7578:55;7737:4;7730:5;7726:16;7720:23;7706:12;7702:42;7695:4;7690:3;7686:14;7679:66;7851:4;7844:5;7840:16;7834:23;7819:13;7815:43;7808:4;7803:3;7799:14;7792:67;7965:4;7958:5;7954:16;7948:23;7933:13;7929:43;7922:4;7917:3;7913:14;7906:67;8072:4;8065:5;8061:16;8055:23;8041:12;8037:42;8030:4;8025:3;8021:14;8014:66;8179:4;8172:5;8168:16;8162:23;8148:12;8144:42;8137:4;8132:3;8128:14;8121:66;8289:4;8282:5;8278:16;8272:23;8258:12;8254:42;8247:4;8242:3;8238:14;8231:66;8378:4;8371:5;8367:16;8361:23;8353:5;8348:3;8344:15;8337:48;8486:5;8479;8475:17;8469:24;8455:12;8451:43;8443:5;8438:3;8434:15;8427:68;8576:5;8569;8565:17;8559:24;8551:5;8546:3;8542:15;8535:49;8626:5;8621:3;8611:21;8597:35;;;7451:1191;;;:::o;1810:260:20:-;1901:18;2005:23;2042:10;1952:110;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1942:121;;;;;;1935:128;;1810:260;;;:::o;13017:1077:15:-;13206:43;13264:35;:33;:35::i;:::-;13348:86;;;;13310:23;13348:86;;;:62;;;:86;;;;;;;;:124;;;;;;;;;;:162;;;;;;;;;;13206:93;;-1:-1:-1;13570:30:15;;;13566:187;;;13616:126;:95;13681:12;13695:15;13616:64;:95::i;:126::-;13763:82;;;;;;;;:62;;;:82;;;;;;;;:116;;;;;;;;;;:150;;;;;;;;;;;:165;;;13944:143;;;;;13839:5;;13867:10;;13901;;13916:12;;13944:143;:::i;:::-;;;;;;;;13017:1077;;;;;;:::o;13424:1442:16:-;13583:38;13641:6;:23;;;:28;;13668:1;13641:28;:60;;;-1:-1:-1;13673:23:16;;;;:28;;;13641:60;13637:127;;;-1:-1:-1;13752:1:16;13745:8;;13637:127;13804:35;13777:6;:16;;;:23;;;:62;;;;;;;;;13773:130;;-1:-1:-1;13891:1:16;13884:8;;13773:130;14024:32;14059:268;14172:6;:16;;;:39;;;14130:6;:23;;;:81;14105:120;;14247:6;:23;;;14239:32;;14293:6;:23;;;14285:32;;14059;:268::i;:::-;14024:303;;14462:143;14497:24;14535:60;14563:6;:17;;;14582:6;:12;;;14535:27;:60::i;:::-;14462:21;:143::i;:::-;14435:170;;14664:195;:171;14709:24;14755:6;:23;;;14747:32;;14801:6;:23;;;14793:32;;14664:31;:171::i;:::-;:193;:195::i;:::-;14657:202;13424:1442;-1:-1:-1;;;13424:1442:16:o;2295:1567:14:-;2431:17;2545:49;2578:4;2584:9;2545:32;:49::i;:::-;2636:20;2609:23;;:47;;;;;;;;;2605:929;;;2719:132;2746:4;2768:9;:11;;;2797:9;:11;;;2826:9;:11;;;2719:132;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2707:144;;2605:929;;;2899:21;2872:23;;:48;;;;;;;;;2868:666;;;3092:19;3199:20;3196:1;3189:31;3270:4;3266:2;3259:16;3342:2;3339:1;3329:16;3314:31;;3384:139;3411:11;3440:9;:11;;;3469:9;:11;;;3498:9;:11;;;3384:139;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3372:151;;2868:666;;3624:23;;;3620:236;;3663:182;:172;3728:71;3817:4;3663:47;:172::i;2067:473:24:-;2112:20;2144:19;2166:82;2205:33;2166:25;:82::i;11769:1523:16:-;12013:43;12071:35;:33;:35::i;:::-;12393:19;;12302:33;12354:59;;;;;;;;;;;;;12427:69;;;;:32;;;:69;;;12013:93;;-1:-1:-1;12354:59:16;12514:47;;-1:-1:-1;12510:162:16;;12581:16;;;12600:33;12581:52;;;;;;;;;;;;;;;12651:7;;;;12510:162;1705:8;12689:36;;:41;12685:159;;12750:16;;;12769:36;12750:55;;12685:159;11769:1523;12918:15;12901:33;;:6;:33;;;12897:137;;12950:16;;;12969:34;12950:53;;;;;;;;;;;;;;;13017:7;;;12897:137;13116:4;13101:12;:19;13097:125;;;13136:16;;;13155:36;13136:55;;13097:125;13250:35;13231:16;;;13250:35;13231:54;;-1:-1:-1;;11769:1523:16;;;;;:::o;2900:672:21:-;3126:61;;;;;3086:25;;3126:53;:24;:53;;;;:61;;3180:6;;3126:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3086:101;;3261:11;3275:4;:14;;;3298:12;3275:37;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3261:51;;3332:1;3326:3;:7;3322:244;;;3429:126;;;;;:22;:7;:22;;;;:126;;3477:12;;;;3547:7;;;;3429:126;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2900:672;;;:::o;724:257:0:-;820:12;898:45;958:6;855:119;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;724:257:0;;;:::o;1531:170:36:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;13586:3626:18;13694:37;;:::i;:::-;13747:41;;:::i;:::-;13809:12;;13791:31;;:17;:31::i;:::-;13747:75;-1:-1:-1;13886:35:18;13866:9;:16;;;:55;;;;;;;;;13862:235;;13937:149;:139;14002:9;:19;;;14045:9;:16;;;14039:23;;;;;;;;13937:47;:139::i;:149::-;14153:12;;:18;;;:32;;;;;;:70;;;14211:6;:12;;;14189:34;;:6;:12;;;:18;;;:34;;;;14153:70;14149:282;;;14239:181;:171;14311:9;:19;;;14348:6;:12;;;14378:6;:12;;;:18;;;14239:54;:171::i;:181::-;14488:12;;:19;;;:33;;;;;;:73;;;14548:6;:13;;;14525:36;;:6;:12;;;:19;;;:36;;;;14488:73;14484:288;;;14577:184;:174;14650:9;:19;;;14687:6;:13;;;14718:6;:12;;;:19;;;14577:55;:174::i;:184::-;14846:14;14863:113;14909:9;:19;;;14946:6;:16;;;14863:28;:113::i;:::-;14846:130;;15004:6;:12;;;:18;;;14994:28;;:6;:28;;;;:79;;;;-1:-1:-1;15046:12:18;;:18;;;15027:46;;15066:6;15027:18;:46::i;:::-;15026:47;14994:79;14990:307;;;15167:19;;15236:12;;:18;;;15093:189;;:179;;15208:6;;15093:52;:179::i;:189::-;-1:-1:-1;15399:12:18;;:17;;;15379:38;;:19;:38::i;:::-;15350:67;;15568:589;;;;;;;;15613:19;;15568:589;;15657:12;;:18;;;;;15568:589;;;;;;;;;;;;15700:12;;;;;;15568:589;;;;;;15741:12;15568:589;;;;;;15798:12;;:23;15568:589;;-1:-1:-1;15568:589:18;;;15867:12;;:23;;;;15568:589;;;;;;;;;;15922:12;;:24;;;15568:589;;;;;;;;15977:12;;:24;;;;15568:589;;;;;;16041:27;;;;15568:589;;;;;;16110:32;;;;15568:589;;;;;;;15542:625;;:12;:625::i;:::-;15475:692;;;;15508:30;;;15475:692;;;;15476:30;;;15475:692;16216:12;;:32;;;:36;;16212:524;;16312:186;16362:7;:30;;;16312:186;;16410:6;:12;;;:24;;;16312:186;;16452:6;:12;;;:32;;;16312:186;;:32;:186::i;:::-;16268:231;;:33;;;;:231;;;16555:12;;:23;;;;16596:12;;;;16626:25;;;;;16513:212;;:24;:212::i;:::-;16781:19;;16814:12;;:18;;;;16846:12;;;;;16872:25;;;;16919:23;;16965;;;;;17003:30;;;;17047;;;;;17091:33;;;;17138:26;;17178:17;;;;;16751:454;;;;;;16781:19;;16814:18;17047:30;17138:26;;16751:454;:::i;:::-;;;;;;;;13586:3626;;;;:::o;17351:3133::-;17455:37;;:::i;:::-;17508:41;;:::i;:::-;17568:12;;17552:29;;:15;:29::i;:::-;17508:73;-1:-1:-1;17645:35:18;17625:9;:16;;;:55;;;;;;;;;17621:235;;17696:149;:139;17761:9;:19;;;17804:9;:16;;;17798:23;;;;;;;17696:149;17880:43;17942:35;:33;:35::i;:::-;18063:12;;:21;;;17880:97;;-1:-1:-1;18063:34:18;;18088:9;18063:34;;;;:108;;-1:-1:-1;18138:12:18;;:21;;;18118:42;;;;;;:19;;;:42;;;;;;;;18161:9;18118:53;;;;;;;;;;18117:54;18063:108;18042:375;;;18281:19;;18353:12;;:21;;;18204:198;;:188;;18322:9;;18204:55;:188::i;:198::-;-1:-1:-1;18483:12:18;;:18;;;:32;;;;;;:70;;;18541:6;:12;;;18519:34;;:6;:12;;;:18;;;:34;;;;18483:70;18479:282;;;18569:181;:171;18641:9;:19;;;18678:6;:12;;;18708:6;:12;;;:18;;;18569:54;:171::i;:181::-;18835:14;18852:113;18898:9;:19;;;18935:6;:16;;;18852:28;:113::i;:::-;18835:130;;19010:6;:12;;;:18;;;19000:28;;:6;:28;;;;:95;;;;-1:-1:-1;19068:12:18;;:18;;;19049:46;;19088:6;19049:18;:46::i;:::-;19048:47;19000:95;18979:353;;;19202:19;;19271:12;;:18;;;19128:189;;:179;;19243:6;;19128:52;:179::i;:189::-;-1:-1:-1;19492:633:18;;;;;;;;19537:19;;19492:633;;19581:12;;:18;;;;;19492:633;;;;;;19624:21;;;19466:669;;19492:633;;;19624:52;;19664:6;:12;;;19624:52;;;19656:4;19624:52;19492:633;;;;;;19705:6;:16;;;19492:633;;;;;;19766:6;:12;;;:23;;;19492:633;;;;;;19835:6;:12;;;:23;;;19492:633;;;;;;19890:6;:12;;;:24;;;19492:633;;;;;;19945:6;:12;;;:24;;;19492:633;;;;;;20009:6;:27;;;19492:633;;;;;;20078:9;:32;;;19492:633;;;;;19466:12;:669::i;:::-;19399:736;;;;19432:30;;;;19399:736;;;;;;;19400:30;;;;19399:736;;;20179:19;;20212:12;;:18;;;;20244:12;;;;20278:23;;20324;;;;20450:17;;;;;20151:326;;;;;;20179:19;;20212:18;;20244:12;;20278:23;;20324;19399:736;;20151:326;:::i;3704:437:1:-;3893:12;3971:59;4045:9;4068:22;4104:20;3928:206;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3704:437:1;;;;;:::o;4147:375::-;4305:12;4383:59;4457:9;4480:6;4500:5;4340:175;;;;;;;;;;:::i;12276:430:15:-;12366:43;12424:35;:33;:35::i;:::-;12590:38;:49;;;;;;;;;;;;:61;;1376:8;12590:61;;;12667:32;12366:93;;-1:-1:-1;12667:32:15;;;;12629:9;;12693:5;;12667:32;:::i;14407:1085::-;14598:43;14656:35;:33;:35::i;:::-;14740:88;;;;14702:23;14740:88;;;:64;;;:88;;;;;;;;:126;;;;;;;;;;:164;;;;;;;;;;14598:93;;-1:-1:-1;14964:30:15;;;14960:187;;;15010:126;:95;15075:12;15089:15;15010:64;:95::i;:126::-;15157:84;;;;;;;;:64;;;:84;;;;;;;;:118;;;;;;;;;;:152;;;;;;;;;;;:167;;;15340:145;;;;;15235:5;;15263:10;;15297;;15312:12;;15340:145;:::i;2201:168:19:-;2283:79;;;;;2322:4;;2283:52;;:79;;2336:8;;2346:15;;2283:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10452:567:13;10568:18;10556:9;:30;:61;;;;-1:-1:-1;10590:10:13;10612:4;10590:27;;10556:61;10552:461;;;10633:20;10656:37;:9;10674:18;10656:17;:37::i;:::-;10633:60;;10708:12;10725:27;:49;;10782:12;10725:74;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10707:92;;;10818:7;10813:190;;10845:143;:133;10916:10;10948:12;10845:49;:133::i;10552:461::-;10452:567;:::o;2220:311:1:-;2348:12;2426:48;2489:5;2508:6;2383:141;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2220:311:1;;;;:::o;4731:2042:13:-;4836:18;5367:4;5361:11;5397:21;5392:3;5385:34;5512:5;5506:12;5492;5488:31;5481:4;5476:3;5472:14;5465:55;5624:4;5617:5;5613:16;5607:23;5593:12;5589:42;5582:4;5577:3;5573:14;5566:66;5738:4;5731:5;5727:16;5721:23;5706:13;5702:43;5695:4;5690:3;5686:14;5679:67;5852:4;5845:5;5841:16;5835:23;5820:13;5816:43;5809:4;5804:3;5800:14;5793:67;5974:4;5967:5;5963:16;5957:23;5942:13;5938:43;5931:4;5926:3;5922:14;5915:67;6081:4;6074:5;6070:16;6064:23;6050:12;6046:42;6039:4;6034:3;6030:14;6023:66;6188:4;6181:5;6177:16;6171:23;6157:12;6153:42;6146:4;6141:3;6137:14;6130:66;6297:4;6290:5;6286:16;6280:23;6266:12;6262:42;6254:5;6249:3;6245:15;6238:67;6412:5;6405;6401:17;6395:24;6381:12;6377:43;6369:5;6364:3;6360:15;6353:68;6502:5;6495;6491:17;6485:24;6477:5;6472:3;6468:15;6461:49;6611:5;6604;6600:17;6594:24;6580:12;6576:43;6568:5;6563:3;6559:15;6552:68;6701:5;6694;6690:17;6684:24;6676:5;6671:3;6667:15;6660:49;6751:5;6746:3;6736:21;6722:35;;;5336:1431;;;:::o;3349:349:1:-;3496:12;3574:51;3640:12;3666:15;3531:160;;;;;;;;;:::i;3247:300:30:-;3411:21;3464:46;3498:11;3464:25;:9;3482:6;3464:17;:25::i;:::-;:33;;:46::i;:::-;3448:62;3247:300;-1:-1:-1;;;;3247:300:30:o;5137:298:22:-;5280:7;5310:118;5345:5;:15;;;5361:5;5376:4;5345:37;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5396:22;;;;;:15;;;;;;:22;;5412:5;;5396:22;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;2544:135:31:-;2629:7;2663:1;2659;:5;:13;;2671:1;2659:13;;;-1:-1:-1;2667:1:31;;2544:135;-1:-1:-1;2544:135:31:o;3834:545:30:-;3997:21;4237:104;4329:11;4237:70;4284:22;4329:11;4304:1;4284:19;:22::i;:::-;4237:25;:9;4255:6;4237:17;:25::i;:::-;:46;;:70::i;4618:401:31:-;4707:7;4738:17;4734:21;;4730:256;;;4771:204;4796:178;4859:82;4959:1;4796:45;:178::i;4771:204::-;-1:-1:-1;5010:1:31;4618:401::o;4028:1255:14:-;4251:11;;;;1321:66;-1:-1:-1;4243:47:14;;:110;;-1:-1:-1;4314:11:14;;;;1584:31;-1:-1:-1;4306:47:14;4243:110;4239:331;;;4377:182;:172;4442:71;4531:4;4377:47;:172::i;:182::-;4648:21;4621:23;;:48;;;;;;;;;4617:250;;;4685:171;:161;4750:60;4828:4;4685:47;:161::i;:171::-;4935:21;4908:23;;:48;;;;;;;;;4904:257;;;4972:178;:168;5037:67;5122:4;1380:337:3;1533:12;1611:52;1678:4;1696;1568:142;;;;;;;;;:::i;1625:335:25:-;1717:12;922:3;1918:9;1910:18;;;;;;;;1931:1;1910:22;1909:44;;;1625:335;-1:-1:-1;;1625:335:25:o;1492:331:1:-;1630:12;1708:49;1772:9;1795:11;1665:151;;;;;;;;;:::i;2946:397::-;3115:12;3193:66;3274:9;3297:5;3316:10;3150:186;;;;;;;;;;:::i;2537:403::-;2709:12;2787:67;2869:9;2892:6;2912:11;2744:189;;;;;;;;;;:::i;1829:385::-;1992:12;2070:64;2149:9;2172:6;2192:5;2027:180;;;;;;;;;;:::i;2236:520:21:-;2315:26;2357:23;2383;:21;:23::i;:::-;2357:49;-1:-1:-1;2420:20:21;2416:89;;2493:1;2486:8;;;;;2416:89;2514:25;2542:24;2559:6;2542:16;:24::i;:::-;2514:52;;2577:12;2602;2594:26;;2628:15;2594:54;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2576:72;;;2666:7;2658:59;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2734:15:21;;2236:520;-1:-1:-1;;;2236:520:21:o;20772:2058:18:-;20862:30;20894;21034:158;21069:10;:31;;;21114:68;21148:10;:33;;;21114:10;:22;;;:33;;;;:68;;;;:::i;:::-;21034:21;:158::i;:::-;21009:183;;21376:177;21430:22;21422:31;;21475:10;:22;;;21467:31;;21520:10;:22;;;21512:31;;21376:32;:177::i;:::-;21343:211;-1:-1:-1;21569:27:18;;;;;:58;;-1:-1:-1;21600:27:18;;;;21569:58;21565:132;;;-1:-1:-1;21681:1:18;;-1:-1:-1;21681:1:18;21673:13;;21565:132;22019:33;;;;:68;;:44;;22064:22;22019:44;:68::i;:::-;21753:334;;:48;:46;:48::i;:::-;21849:20;;21753:95;:117;;;;;;;;;;;;;:334;;;;22102:16;;;:33;;22130:4;22102:33;22098:506;;;22190:147;22228:10;:21;;;22267:10;:16;;;22301:22;22190:147;;:20;:147::i;:::-;22098:506;;;22408:185;22450:10;:21;;;22489:10;:16;;;22523:10;:16;;;22557:22;22408:185;;:24;:185::i;:::-;22654:169;22692:10;:21;;;22727:10;:16;;;22757:10;:20;;;22791:22;22654:169;;:24;:169::i;:::-;20772:2058;;;:::o;1310:1717:22:-;1486:31;;;1512:4;1486:31;;1478:80;;;;;;;;;;;;:::i;:::-;1609:4;1603:11;1729:66;1724:3;1717:79;1843:12;1836:5;1832:24;1825:4;1820:3;1816:14;1809:48;1901:12;1897:2;1893:21;1886:4;1881:3;1877:14;1870:45;1951:6;1944:4;1939:3;1935:14;1928:30;2157:2;2136:3;2114:4;2093:3;2074:1;2043:12;2036:5;2032:24;2009:5;1987:186;2201:16;2787:1;2781:3;2775:10;2772:17;2716:2;2708:6;2705:14;2698:22;2669:179;2601:6;2594:14;2570:296;2492:7;2471:409;2460:420;;2904:7;2894:2;;2954:6;2951:1;2946:3;2931:30;2990:6;2985:3;2978:19;1075:411:1;1251:12;1329:67;1411:9;1434:8;1456:13;1286:193;;;;;;;;;;:::i;1625:373:31:-;1711:7;1742:1;1738;:5;1734:236;;;1759:200;1784:174;1844:62;1924:1;1943;1784:42;:174::i;1759:200::-;-1:-1:-1;1986:5:31;;;1625:373::o;730:339:1:-;872:12;950:53;1018:8;1040:12;907:155;;;;;;;;;:::i;764:457:31:-;850:7;877:6;873:45;;-1:-1:-1;906:1:31;899:8;;873:45;939:5;;;943:1;939;:5;:1;958:5;;;;;:10;954:243;;984:202;1009:176;1069:64;1151:1;1170;1009:42;:176::i;1227:392::-;1313:7;1340:6;1336:232;;1362:195;1387:169;1447:57;1522:1;1541;1387:42;:169::i;1362:195::-;1577:9;1593:1;1589;:5;;;;;;;1227:392;-1:-1:-1;;;;1227:392:31:o;2004:::-;2090:7;2125:5;;;2144;;;2140:232;;;2165:196;2190:170;2250:58;2326:1;2345;2190:42;:170::i;1729:297:37:-;1869:12;966:10;1940:31;;1985:9;2008:1;1904:115;;;;;;;;;:::i;4123:181:21:-;4251:32;4259:23;4251:32;4286:11;4251:46;4123:181;:::o;3691:302::-;3780:12;3828:157;3888:24;3927:28;3969:6;3828:38;:157::i;3552:376:31:-;3641:7;3672:1;3668:5;;:1;:5;;;3664:236;;;3689:200;3714:174;3774:62;3854:1;3714:174;;3873:1;3714:174;;:42;:174::i;4477:135::-;4562:7;4596:1;4592:5;;:1;:5;;;:13;;4604:1;4592:13;;3934:395;4023:7;4058:5;;;4077;;;;;;;;4073:232;;;4098:196;4123:170;4183:58;4259:1;4123:170;;4278:1;4123:170;;:42;:170::i;3238:1617:22:-;3387:31;;;3413:4;3387:31;;3379:80;;;;;;;;;;;;:::i;:::-;3510:4;3504:11;3618:66;3613:3;3606:79;3729:12;3725:2;3721:21;3714:4;3709:3;3705:14;3698:45;3779:6;3772:4;3767:3;3763:14;3756:30;3985:2;3964:3;3942:4;3921:3;3902:1;3871:12;3864:5;3860:24;3837:5;3815:186;4029:16;4615:1;4609:3;4603:10;4600:17;4544:2;4536:6;4533:14;4526:22;4497:179;4429:6;4422:14;4398:296;4320:7;4299:409;4288:420;;4732:7;4722:2;;4782:6;4779:1;4774:3;4759:30;4818:6;4813:3;4806:19;4722:2;;;;3479:1370;;;:::o;1401:322:37:-;1554:12;818:10;1625:28;;1667:9;1690:1;1705;1589:127;;;;;;;;;;:::i;1048:432:6:-;1331:139;;1185:35;;1331:139;;1361:10;;1385;;1409:6;;1448:12;;1331:139;;;:::i;:::-;;;;;;;;;;;;;;1321:150;;1331:139;1321:150;;;;;1048:432;-1:-1:-1;;;;1048:432:6:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;97:33;72:20;97:33;:::i;1287:776::-;;1427:3;1420:4;1412:6;1408:17;1404:27;1394:2;;-1:-1;;1435:12;1394:2;1482:6;1469:20;1504:103;1519:87;1599:6;1519:87;:::i;:::-;1504:103;:::i;:::-;1635:21;;;1495:112;-1:-1;1679:4;1692:14;;;;1667:17;;;1781;;;1772:27;;;;1769:36;-1:-1;1766:2;;;1818:1;;1808:12;1766:2;1843:1;1828:229;1853:6;1850:1;1847:13;1828:229;;;6611:6;6598:20;6623:56;6673:5;6623:56;:::i;:::-;1921:73;;2008:14;;;;2036;;;;1875:1;1868:9;1828:229;;;1832:14;;;;;1387:676;;;;:::o;4661:381::-;;;4820:3;4813:4;4805:6;4801:17;4797:27;4787:2;;-1:-1;;4828:12;4787:2;-1:-1;4858:20;;4898:18;4887:30;;4884:2;;;-1:-1;;4920:12;4884:2;4964:4;4956:6;4952:17;4940:29;;5015:3;4964:4;5007;4999:6;4995:17;4956:6;4981:32;;4978:41;4975:2;;;5032:1;;5022:12;4975:2;4780:262;;;;;:::o;5068:707::-;;5185:3;5178:4;5170:6;5166:17;5162:27;5152:2;;-1:-1;;5193:12;5152:2;5240:6;5227:20;5262:80;5277:64;5334:6;5277:64;:::i;5262:80::-;5370:21;;;5253:89;-1:-1;5414:4;5427:14;;;;5402:17;;;5516;;;5507:27;;;;5504:36;-1:-1;5501:2;;;5553:1;;5543:12;5501:2;5578:1;5563:206;5588:6;5585:1;5582:13;5563:206;;;12980:20;;5656:50;;5720:14;;;;5748;;;;5610:1;5603:9;5563:206;;5783:124;5847:20;;5872:30;5847:20;5872:30;:::i;7076:2030::-;;7193:6;;7181:9;7176:3;7172:19;7168:32;7165:2;;;-1:-1;;7203:12;7165:2;7231:22;7193:6;7231:22;:::i;:::-;7222:31;;;7341:72;7409:3;7385:22;7341:72;:::i;:::-;7323:16;7316:98;7514:72;7582:3;7481:2;7562:9;7558:22;7514:72;:::i;:::-;7481:2;7500:5;7496:16;7489:98;7688:49;7733:3;7655:2;7713:9;7709:22;7688:49;:::i;:::-;7655:2;7674:5;7670:16;7663:75;7839:49;7884:3;7806:2;7864:9;7860:22;7839:49;:::i;:::-;7806:2;7825:5;7821:16;7814:75;7999:49;8044:3;7965;8024:9;8020:22;7999:49;:::i;:::-;7965:3;7985:5;7981:16;7974:75;8145:49;8190:3;8111;8170:9;8166:22;8145:49;:::i;:::-;8111:3;8131:5;8127:16;8120:75;8291:49;8336:3;8257;8316:9;8312:22;8291:49;:::i;:::-;8257:3;8277:5;8273:16;8266:75;8438:49;8483:3;8404;8463:9;8459:22;8438:49;:::i;:::-;8404:3;8424:5;8420:16;8413:75;8557:3;8593:49;8638:3;8557;8618:9;8614:22;8593:49;:::i;:::-;8573:18;;;8566:77;8704:3;8761:22;;;6116:20;8720:18;;;8713:77;8853:3;8889:48;8933:3;8909:22;;;8889:48;:::i;:::-;8853:3;8873:5;8869:18;8862:76;;8999:3;;9060:9;9056:22;12980:20;8999:3;9019:5;9015:18;9008:77;;7159:1947;;;;:::o;9893:1713::-;;10008:6;;9996:9;9991:3;9987:19;9983:32;9980:2;;;-1:-1;;10018:12;9980:2;10046:22;10008:6;10046:22;:::i;:::-;10037:31;;;10156:72;10224:3;10200:22;10156:72;:::i;:::-;10138:16;10131:98;10329:72;10397:3;10296:2;10377:9;10373:22;10329:72;:::i;:::-;10296:2;10315:5;10311:16;10304:98;10503:49;10548:3;10470:2;10528:9;10524:22;10503:49;:::i;:::-;10470:2;10489:5;10485:16;10478:75;10654:49;10699:3;10621:2;10679:9;10675:22;10654:49;:::i;:::-;10621:2;10640:5;10636:16;10629:75;10800:49;10845:3;10766;10825:9;10821:22;10800:49;:::i;:::-;10766:3;10786:5;10782:16;10775:75;10946:49;10991:3;10912;10971:9;10967:22;10946:49;:::i;:::-;10912:3;10932:5;10928:16;10921:75;11095:49;11140:3;11061;11120:9;11116:22;11095:49;:::i;:::-;11061:3;11081:5;11077:16;11070:75;11206:3;11265:9;11261:22;6116:20;11206:3;11226:5;11222:16;11215:75;11353:3;11389:48;11433:3;11353;11413:9;11409:22;11389:48;:::i;:::-;11353:3;11373:5;11369:18;11362:76;;11499:3;;11560:9;11556:22;12980:20;11499:3;11519:5;11515:18;11508:77;;9974:1632;;;;:::o;11855:773::-;;11971:4;11959:9;11954:3;11950:19;11946:30;11943:2;;;-1:-1;;11979:12;11943:2;12007:20;11971:4;12007:20;:::i;:::-;11998:29;;6962:6;6949:20;6974:51;7019:5;6974:51;:::i;:::-;12093:93;;12244:2;12296:22;;13391:20;71690:4;71679:16;;75989:33;;75979:2;;76036:1;;76026:12;75979:2;12277:47;12244:2;12263:5;12259:16;12252:73;;12383:2;12441:9;12437:22;6116:20;12383:2;12402:5;12398:16;12391:75;12524:2;12582:9;12578:22;6116:20;12524:2;12543:5;12539:16;12532:75;11937:691;;;;:::o;12635:130::-;12702:20;;12727:33;12702:20;12727:33;:::i;13191:128::-;13257:20;;71588:18;71577:30;;75868:34;;75858:2;;75916:1;;75906:12;13459:366;;;13580:2;13568:9;13559:7;13555:23;13551:32;13548:2;;;-1:-1;;13586:12;13548:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;13638:63;-1:-1;13738:2;13777:22;;72:20;97:33;72:20;97:33;:::i;:::-;13746:63;;;;13542:283;;;;;:::o;13832:1117::-;;;;;14108:3;14096:9;14087:7;14083:23;14079:33;14076:2;;;-1:-1;;14115:12;14076:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;14167:63;-1:-1;14295:2;14280:18;;14267:32;14319:18;14308:30;;;14305:2;;;-1:-1;;14341:12;14305:2;14371:101;14464:7;14455:6;14444:9;14440:22;14371:101;:::i;:::-;14361:111;;14537:2;14526:9;14522:18;14509:32;14495:46;;14319:18;14553:6;14550:30;14547:2;;;-1:-1;;14583:12;14547:2;14613:101;14706:7;14697:6;14686:9;14682:22;14613:101;:::i;:::-;14603:111;;14779:2;14768:9;14764:18;14751:32;14737:46;;14319:18;14795:6;14792:30;14789:2;;;-1:-1;;14825:12;14789:2;;14855:78;14925:7;14916:6;14905:9;14901:22;14855:78;:::i;:::-;14845:88;;;14070:879;;;;;;;:::o;14956:360::-;;;15074:2;15062:9;15053:7;15049:23;15045:32;15042:2;;;-1:-1;;15080:12;15042:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;15132:63;-1:-1;15232:2;15268:22;;5847:20;5872:30;5847:20;5872:30;:::i;15323:709::-;;;;;15524:3;15512:9;15503:7;15499:23;15495:33;15492:2;;;-1:-1;;15531:12;15492:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;15583:63;-1:-1;15683:2;15745:22;;6598:20;6623:56;6598:20;6623:56;:::i;:::-;15691:86;-1:-1;15814:2;15876:22;;6598:20;6623:56;6598:20;6623:56;:::i;:::-;15486:546;;;;-1:-1;15822:86;;15945:2;15984:22;12980:20;;-1:-1;;15486:546::o;16039:496::-;;;16182:2;16170:9;16161:7;16157:23;16153:32;16150:2;;;-1:-1;;16188:12;16150:2;16246:17;16233:31;16284:18;16276:6;16273:30;16270:2;;;-1:-1;;16306:12;16270:2;16382:22;;270:4;258:17;;254:27;-1:-1;244:2;;-1:-1;;285:12;244:2;332:6;319:20;354:80;369:64;426:6;369:64;:::i;354:80::-;440:16;476:6;469:5;462:21;506:4;;523:3;519:14;512:21;;506:4;498:6;494:17;628:3;506:4;;612:6;608:17;498:6;599:27;;596:36;593:2;;;-1:-1;;635:12;593:2;-1:-1;661:10;;655:206;680:6;677:1;674:13;655:206;;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;748:50;;702:1;695:9;;;;;812:14;;;;840;;655:206;;;659:14;16326:88;;;16469:50;16511:7;506:4;16491:9;16487:22;16469:50;:::i;:::-;16459:60;;;;;;;16144:391;;;;;:::o;16542:397::-;;;16681:2;16669:9;16660:7;16656:23;16652:32;16649:2;;;-1:-1;;16687:12;16649:2;16745:17;16732:31;16783:18;;16775:6;16772:30;16769:2;;;-1:-1;;16805:12;16769:2;16906:6;16895:9;16891:22;;;1023:3;1016:4;1008:6;1004:17;1000:27;990:2;;-1:-1;;1031:12;990:2;1074:6;1061:20;16783:18;1093:6;1090:30;1087:2;;;-1:-1;;1123:12;1087:2;1218:3;16681:2;;1202:6;1198:17;1159:6;1184:32;;1181:41;1178:2;;;-1:-1;;1225:12;1178:2;16681;1155:17;;;;;16825:98;;-1:-1;16643:296;;-1:-1;;;;16643:296::o;16946:991::-;;;;17205:2;17193:9;17184:7;17180:23;17176:32;17173:2;;;-1:-1;;17211:12;17173:2;17269:17;17256:31;17307:18;;17299:6;17296:30;17293:2;;;-1:-1;;17329:12;17293:2;17359:101;17452:7;17443:6;17432:9;17428:22;17359:101;:::i;:::-;17349:111;;17525:2;17514:9;17510:18;17497:32;17483:46;;17307:18;17541:6;17538:30;17535:2;;;-1:-1;;17571:12;17535:2;17601:101;17694:7;17685:6;17674:9;17670:22;17601:101;:::i;:::-;17591:111;;17767:2;17756:9;17752:18;17739:32;17725:46;;17307:18;17783:6;17780:30;17777:2;;;-1:-1;;17813:12;17777:2;;17843:78;17913:7;17904:6;17893:9;17889:22;17843:78;:::i;17944:796::-;;;;;18194:2;18182:9;18173:7;18169:23;18165:32;18162:2;;;-1:-1;;18200:12;18162:2;18258:17;18245:31;18296:18;;18288:6;18285:30;18282:2;;;-1:-1;;18318:12;18282:2;18449:6;18438:9;18434:22;;;2274:3;2267:4;2259:6;2255:17;2251:27;2241:2;;-1:-1;;2282:12;2241:2;2325:6;2312:20;18296:18;2344:6;2341:30;2338:2;;;-1:-1;;2374:12;2338:2;2471:3;2418:4;2461:6;2453;2449:19;2410:6;2435:34;;2432:43;2429:2;;;-1:-1;;2478:12;2429:2;2418:4;2406:17;;;;-1:-1;18338:128;-1:-1;18516:18;;;18503:32;;18544:30;;;18541:2;;;-1:-1;;18577:12;18541:2;;18615:109;18716:7;18707:6;18696:9;18692:22;18615:109;:::i;:::-;18156:584;;;;-1:-1;18597:127;-1:-1;;;;18156:584::o;18747:433::-;;18904:2;;18892:9;18883:7;18879:23;18875:32;18872:2;;;-1:-1;;18910:12;18872:2;18968:17;18955:31;19006:18;18998:6;18995:30;18992:2;;;-1:-1;;19028:12;18992:2;19132:22;;2687:4;2675:17;;2671:27;-1:-1;2661:2;;-1:-1;;2702:12;2661:2;2749:6;2736:20;2771:108;2786:92;2871:6;2786:92;:::i;2771:108::-;2907:21;;;2964:14;;;;2939:17;;;3065:6;3053:19;;;3044:29;;;;3041:38;-1:-1;3038:2;;;-1:-1;;3082:12;3038:2;-1:-1;3108:10;;3102:236;3127:6;3124:1;3121:13;3102:236;;;3207:65;3268:3;3256:10;3207:65;:::i;:::-;3195:78;;3149:1;3142:9;;;;;3287:14;;;;3315:16;;;;3102:236;;;-1:-1;19048:116;;18866:314;-1:-1;;;;;;;;18866:314::o;19187:792::-;;;;;19435:2;19423:9;19414:7;19410:23;19406:32;19403:2;;;-1:-1;;19441:12;19403:2;19499:17;19486:31;19537:18;;19529:6;19526:30;19523:2;;;-1:-1;;19559:12;19523:2;19688:6;19677:9;19673:22;;;3551:3;3544:4;3536:6;3532:17;3528:27;3518:2;;-1:-1;;3559:12;3518:2;3602:6;3589:20;19537:18;3621:6;3618:30;3615:2;;;-1:-1;;3651:12;3615:2;3748:3;3695:4;3738:6;3730;3726:19;3687:6;3712:34;;3709:43;3706:2;;;-1:-1;;3755:12;19986:429;;20141:2;;20129:9;20120:7;20116:23;20112:32;20109:2;;;-1:-1;;20147:12;20109:2;20205:17;20192:31;20243:18;20235:6;20232:30;20229:2;;;-1:-1;;20265:12;20229:2;20367:22;;3960:4;3948:17;;3944:27;-1:-1;3934:2;;-1:-1;;3975:12;3934:2;4022:6;4009:20;4044:106;4059:90;4142:6;4059:90;:::i;4044:106::-;4178:21;;;4235:14;;;;4210:17;;;4336:6;4324:19;;;4315:29;;;;4312:38;-1:-1;4309:2;;;-1:-1;;4353:12;4309:2;-1:-1;4379:10;;4373:234;4398:6;4395:1;4392:13;4373:234;;;4478:63;4537:3;4525:10;4478:63;:::i;:::-;4466:76;;4420:1;4413:9;;;;;4556:14;;;;4584:16;;;;4373:234;;20422:303;;20557:2;20545:9;20536:7;20532:23;20528:32;20525:2;;;-1:-1;;20563:12;20525:2;6431:6;6425:13;6443:53;6490:5;6443:53;:::i;20732:583::-;;;;20916:2;20904:9;20895:7;20891:23;20887:32;20884:2;;;-1:-1;;20922:12;20884:2;6611:6;6598:20;6623:56;6673:5;6623:56;:::i;:::-;20974:86;-1:-1;21097:2;21159:22;;6598:20;6623:56;6598:20;6623:56;:::i;:::-;20878:437;;21105:86;;-1:-1;;;21228:2;21267:22;;;;12980:20;;20878:437::o;21322:298::-;;21454:3;21442:9;21433:7;21429:23;21425:33;21422:2;;;-1:-1;;21461:12;21422:2;21523:81;21596:7;21572:22;21523:81;:::i;21627:482::-;;;21793:9;21784:7;21780:23;21805:3;21780:23;21776:33;21773:2;;;-1:-1;;21812:12;21773:2;21874:81;21947:7;21923:22;21874:81;:::i;:::-;21864:91;;11764:3;11746:16;;;11742:26;11739:2;;;-1:-1;;11771:12;11739:2;;21992:3;22065:9;22061:22;22001:92;;21767:342;;;;;:::o;22116:604::-;;;;22309:3;22297:9;22288:7;22284:23;22280:33;22277:2;;;-1:-1;;22316:12;22277:2;22378:81;22451:7;22427:22;22378:81;:::i;:::-;22368:91;;22515:80;22587:7;22496:3;22567:9;22563:22;22515:80;:::i;:::-;22505:90;;22632:3;22676:9;22672:22;12702:20;12727:33;12754:5;12727:33;:::i;:::-;22641:63;;;;22271:449;;;;;:::o;22727:856::-;;;;;;22954:3;22942:9;22933:7;22929:23;22925:33;22922:2;;;-1:-1;;22961:12;22922:2;23023:81;23096:7;23072:22;23023:81;:::i;:::-;23013:91;;23160:80;23232:7;23141:3;23212:9;23208:22;23160:80;:::i;:::-;23150:90;;23277:3;23321:9;23317:22;12702:20;12727:33;12754:5;12727:33;:::i;:::-;23286:63;-1:-1;23386:3;23426:22;;72:20;97:33;72:20;97:33;:::i;:::-;23395:63;-1:-1;23495:3;23535:22;;72:20;97:33;72:20;97:33;:::i;:::-;23504:63;;;;22916:667;;;;;;;;:::o;23590:585::-;;;;23751:9;23742:7;23738:23;23763:3;23738:23;23734:33;23731:2;;;-1:-1;;23770:12;23731:2;9278:4;9257:19;9253:30;9250:2;;;-1:-1;;9286:12;9250:2;;9314:20;9278:4;9314:20;:::i;:::-;9453:22;6264:13;9403:16;9396:86;9545:2;9630:9;9626:22;6785:13;75411:1;75404:5;75401:12;75391:2;;-1:-1;;75417:12;75391:2;9545;9560:16;;9553:102;9734:2;9799:22;;12850:13;12868:33;12850:13;12868:33;:::i;:::-;9734:2;9749:16;;9742:86;9278:4;24010:22;;12850:13;9753:5;;-1:-1;12868:33;12850:13;12868:33;:::i;:::-;24079:3;24127:22;;5989:13;23968:74;;-1:-1;6007:30;5989:13;6007:30;:::i;24182:294::-;;24312:3;24300:9;24291:7;24287:23;24283:33;24280:2;;;-1:-1;;24319:12;24280:2;24381:79;24452:7;24428:22;24381:79;:::i;24483:474::-;;;24657:3;24645:9;24636:7;24632:23;24628:33;24625:2;;;-1:-1;;24664:12;24625:2;24726:79;24797:7;24773:22;24726:79;:::i;:::-;24716:89;;24861:80;24933:7;24842:3;24913:9;24909:22;24861:80;:::i;:::-;24851:90;;24619:338;;;;;:::o;24964:600::-;;;;25155:3;25143:9;25134:7;25130:23;25126:33;25123:2;;;-1:-1;;25162:12;25123:2;25224:79;25295:7;25271:22;25224:79;:::i;:::-;25214:89;;25359:80;25431:7;25340:3;25411:9;25407:22;25359:80;:::i;:::-;25349:90;;25476:3;25520:9;25516:22;12702:20;12727:33;12754:5;12727:33;:::i;25571:972::-;;;;;;;25810:3;25798:9;25789:7;25785:23;25781:33;25778:2;;;-1:-1;;25817:12;25778:2;25879:79;25950:7;25926:22;25879:79;:::i;:::-;25869:89;;26014:80;26086:7;25995:3;26066:9;26062:22;26014:80;:::i;:::-;26004:90;;26131:3;26175:9;26171:22;12702:20;12727:33;12754:5;12727:33;:::i;:::-;26140:63;-1:-1;26240:3;26280:22;;72:20;97:33;72:20;97:33;:::i;:::-;26249:63;-1:-1;26349:3;26386:22;;5847:20;5872:30;5847:20;5872:30;:::i;:::-;26358:60;-1:-1;26455:3;26495:22;;72:20;97:33;72:20;97:33;:::i;:::-;26464:63;;;;25772:771;;;;;;;;:::o;26550:296::-;;26681:3;26669:9;26660:7;26656:23;26652:33;26649:2;;;-1:-1;;26688:12;26649:2;26750:80;26822:7;26798:22;26750:80;:::i;26853:263::-;;26968:2;26956:9;26947:7;26943:23;26939:32;26936:2;;;-1:-1;;26974:12;26936:2;-1:-1;13128:13;;26930:186;-1:-1;26930:186::o;28096:103::-;71287:42;71276:54;28157:37;;28151:48::o;29239:666::-;;29423:5;65924:12;67165:6;67160:3;67153:19;67202:4;;67197:3;67193:14;29435:90;;67202:4;29593:5;65280:14;-1:-1;29632:251;29657:6;29654:1;29651:13;29632:251;;;29718:13;;69655;69648:21;31690:34;;27447:14;;;;66639;;;;29679:1;29672:9;29632:251;;;-1:-1;29889:10;;29357:548;-1:-1;;;;;29357:548::o;39197:663::-;39411:16;39405:23;32070:3;32063:37;39578:4;39571:5;39567:16;39561:23;74350:1;74343:5;74340:12;74330:2;;74356:9;74330:2;39578:4;39652:14;;33096:64;39764:4;39753:16;;;39747:23;71167:34;71156:46;39824:14;;43876:37;39307:553::o;42882:926::-;6962:6;6949:20;6974:51;7019:5;6974:51;:::i;:::-;70397:53;70444:5;70397:53;:::i;:::-;33249:66;;68861:2;68852:12;;13391:20;71690:4;71679:16;;75989:33;;;75979:2;;-1:-1;;76026:12;75979:2;68861;43416:14;;44556:35;-1:-1;69358:12;;;;6116:20;43594:14;;;32063:37;68514:12;;;;6116:20;43772:14;;32063:37;43004:804::o;43815:103::-;71167:34;71156:46;43876:37;;43870:48::o;44392:100::-;71588:18;71577:30;44451:36;;44445:47::o;44717:665::-;69753:66;69742:78;;;;31934:56;;73998:2;73994:14;;;;;;45022:1;45013:11;;28415:58;45123:12;;;32063:37;45234:12;;;32063:37;45345:12;;;44915:467::o;45389:659::-;34172:66;34152:87;;34137:1;34258:11;;32063:37;;;;45900:12;;;32063:37;46011:12;;;45634:414::o;46055:379::-;46419:10;46243:191::o;46441:222::-;71287:42;71276:54;;;;28157:37;;46568:2;46553:18;;46539:124::o;46915:476::-;71287:42;71276:54;;;28026:58;;71276:54;;;;47294:2;47279:18;;28026:58;47377:2;47362:18;;32063:37;;;;47114:2;47099:18;;47085:306::o;47398:448::-;71287:42;71276:54;;;28026:58;;71276:54;;;;47755:2;47740:18;;28157:37;69655:13;;69648:21;47832:2;47817:18;;31690:34;47583:2;47568:18;;47554:292::o;47853:596::-;;48088:2;48077:9;48073:18;71287:42;;69465:5;71276:54;28033:3;28026:58;48214:2;48088;48214;48203:9;48199:18;48192:48;48254:108;28709:5;65924:12;67165:6;67160:3;67153:19;67193:14;48077:9;67193:14;28721:93;;48214:2;28885:5;65280:14;28897:21;;-1:-1;28924:260;28949:6;28946:1;28943:13;28924:260;;;29010:13;;71276:54;;28157:37;;66639:14;;;;27277;;;;28971:1;28964:9;28924:260;;;28928:14;;48246:116;;;;;;;31717:5;69655:13;69648:21;48435:2;48424:9;48420:18;31690:34;48059:390;;;;;;:::o;48456:333::-;71287:42;71276:54;;;28157:37;;71276:54;;48775:2;48760:18;;28157:37;48611:2;48596:18;;48582:207::o;48796:556::-;71287:42;71276:54;;;28157:37;;71276:54;;;49172:2;49157:18;;28157:37;71276:54;;49255:2;49240:18;;28157:37;49338:2;49323:18;;32063:37;;;;49007:3;48992:19;;48978:374::o;49359:333::-;71287:42;71276:54;;;;28157:37;;49678:2;49663:18;;32063:37;49514:2;49499:18;;49485:207::o;49699:984::-;50080:2;50094:47;;;65924:12;;50065:18;;;67153:19;;;49699:984;;50080:2;67202:4;;67193:14;;;;65280;;;49699:984;30535:341;30560:6;30557:1;30554:13;30535:341;;;27617:100;27713:3;30627:6;30621:13;27617:100;:::i;:::-;27737:14;;;;66639;;;;30582:1;30575:9;30535:341;;;-1:-1;;;50355:20;;;50335:18;;;50328:48;65924:12;;67153:19;;;67193:14;;;;-1:-1;65280:14;;;;-1:-1;31345:260;31370:6;31367:1;31364:13;31345:260;;;27853:46;27895:3;31437:6;31431:13;27853:46;:::i;:::-;27919:14;;;;66639;;;;30582:1;31385:9;31345:260;;;31349:14;;;;50546:9;50540:4;50536:20;50531:2;50520:9;50516:18;50509:48;50571:102;50668:4;50659:6;50571:102;:::i;:::-;50563:110;50051:632;-1:-1;;;;;;50051:632::o;50690:210::-;69655:13;;69648:21;31690:34;;50811:2;50796:18;;50782:118::o;50907:222::-;32063:37;;;51034:2;51019:18;;51005:124::o;51136:333::-;32063:37;;;71287:42;71276:54;51455:2;51440:18;;28157:37;51291:2;51276:18;;51262:207::o;51476:444::-;32063:37;;;71287:42;71276:54;;;51823:2;51808:18;;28157:37;71276:54;51906:2;51891:18;;28157:37;51659:2;51644:18;;51630:290::o;51927:1342::-;32063:37;;;71287:42;71276:54;;;52500:2;52485:18;;28157:37;71276:54;;;52583:2;52568:18;;28157:37;71276:54;;;52666:2;52651:18;;28157:37;71276:54;;;52749:3;52734:19;;28157:37;71276:54;;;;52833:3;52818:19;;28157:37;71167:34;71156:46;;;52917:3;52902:19;;43876:37;71156:46;;53001:3;52986:19;;43876:37;71156:46;;;53085:3;53070:19;;43876:37;53169:3;53154:19;;32063:37;;;;53254:3;53239:19;;32063:37;52335:3;52320:19;;52306:963::o;53276:1004::-;32063:37;;;71287:42;71276:54;;;53764:2;53749:18;;28157:37;71276:54;;;53847:2;53832:18;;28157:37;71276:54;;;53930:2;53915:18;;28157:37;71276:54;;54013:3;53998:19;;28157:37;71167:34;71156:46;;;54097:3;54082:19;;43876:37;71156:46;;;54181:3;54166:19;;43876:37;54265:3;54250:19;;32063:37;53599:3;53584:19;;53570:710::o;54287:444::-;32063:37;;;54634:2;54619:18;;32063:37;;;;54717:2;54702:18;;32063:37;54470:2;54455:18;;54441:290::o;54738:325::-;32063:37;;;71690:4;71679:16;55049:2;55034:18;;44556:35;54889:2;54874:18;;54860:203::o;55070:548::-;32063:37;;;71690:4;71679:16;;;;55438:2;55423:18;;44556:35;55521:2;55506:18;;32063:37;55604:2;55589:18;;32063:37;55277:3;55262:19;;55248:370::o;55625:218::-;69983:66;69972:78;;;;32460:36;;55750:2;55735:18;;55721:122::o;55850:329::-;69983:66;69972:78;;;;32460:36;;71287:42;71276:54;56165:2;56150:18;;28157:37;56003:2;55988:18;;55974:205::o;56186:480::-;56387:2;56372:18;;70397:53;70444:5;70397:53;:::i;:::-;32766:68;;;56569:2;56554:18;;32063:37;;;;56652:2;56637:18;;;32063:37;56358:308;:::o;56673:375::-;56849:2;56834:18;;70397:53;70444:5;70397:53;:::i;:::-;32938:71;;;57034:2;57019:18;32063:37;56820:228;:::o;57055:395::-;57241:2;57226:18;;74597:1;74587:12;;74577:2;;74603:9;57457:310;;57604:2;;57625:17;57618:47;33667:5;65924:12;67165:6;57604:2;57593:9;57589:18;67153:19;-1:-1;73256:101;73270:6;73267:1;73264:13;73256:101;;;73337:11;;;;;73331:18;73318:11;;;67193:14;73318:11;73311:39;73285:10;;73256:101;;;73372:6;73369:1;73366:13;73363:2;;;-1:-1;67193:14;73428:6;57593:9;73419:16;;73412:27;73363:2;-1:-1;73907:2;73887:14;73903:7;73883:28;33825:39;;;;67193:14;33825:39;;57575:192;-1:-1;;;57575:192::o;57774:416::-;57974:2;57988:47;;;34508:2;57959:18;;;67153:19;34544:34;67193:14;;;34524:55;34613:14;34599:12;;;34592:36;34647:12;;;57945:245::o;58197:416::-;58397:2;58411:47;;;34898:2;58382:18;;;67153:19;34934:34;67193:14;;;34914:55;35003:9;34989:12;;;34982:31;35032:12;;;58368:245::o;58620:416::-;58820:2;58834:47;;;35588:2;58805:18;;;67153:19;35624:34;67193:14;;;35604:55;35693:26;35679:12;;;35672:48;35739:12;;;58791:245::o;59043:416::-;59243:2;59257:47;;;35990:2;59228:18;;;67153:19;36026:34;67193:14;;;36006:55;36095:6;36081:12;;;36074:28;36121:12;;;59214:245::o;59466:416::-;59666:2;59680:47;;;36372:2;59651:18;;;67153:19;36408:34;67193:14;;;36388:55;36477:9;36463:12;;;36456:31;36506:12;;;59637:245::o;59889:563::-;60158:3;60143:19;;68697:2;68688:12;;36911:86;60147:9;68639:62;68688:12;36888:16;68639:62;:::i;:::-;36911:86;:::i;:::-;37065:73;37121:16;37114:5;37065:73;:::i;:::-;37045:93;;37144:86;68697:2;37219:3;37215:14;37201:12;37144:86;:::i;:::-;;37299:50;37343:4;37336:5;37332:16;37325:5;37299:50;:::i;:::-;37355:63;37343:4;37407:3;37403:14;37389:12;37355:63;:::i;:::-;;37487:50;37531:4;37524:5;37520:16;37513:5;37487:50;:::i;:::-;37543:63;37531:4;37595:3;37591:14;37577:12;37543:63;:::i;:::-;;37683:50;37727:4;37720:5;37716:16;37709:5;37683:50;:::i;:::-;37739:63;37727:4;37791:3;37787:14;37773:12;37739:63;:::i;:::-;;37865:50;37909:4;37902:5;37898:16;37891:5;37865:50;:::i;:::-;37921:63;37909:4;37973:3;37969:14;37955:12;37921:63;:::i;:::-;;38047:50;38091:4;38084:5;38080:16;38073:5;38047:50;:::i;:::-;38103:63;38091:4;38155:3;38151:14;38137:12;38103:63;:::i;:::-;;38230:50;38274:4;38267:5;38263:16;38256:5;38230:50;:::i;:::-;38286:63;38274:4;38338:3;38334:14;38320:12;38286:63;:::i;:::-;;38463:6;38419:52;38463:6;38456:5;38452:18;38445:5;38419:52;:::i;:::-;38477:65;38463:6;38529:3;38525:16;38511:12;38477:65;:::i;:::-;-1:-1;;38648:6;38637:18;;;6116:20;38710:16;;;32063:37;38834:6;38791:51;38823:18;;;38641:5;38791:51;:::i;:::-;38848:63;38834:6;38898:3;38894:16;38880:12;38848:63;:::i;:::-;-1:-1;;39017:6;39006:18;;;12980:20;39079:16;;;32063:37;60313:129;60437:3;60422:19;;60413:6;60313:129;:::i;60459:330::-;60640:2;60625:18;;60654:125;60629:9;60752:6;60654:125;:::i;60796:542::-;61027:3;61012:19;;61042:125;61016:9;61140:6;61042:125;:::i;:::-;71167:34;43906:5;71156:46;61246:2;61235:9;61231:18;43876:37;31717:5;69655:13;69648:21;61323:3;61312:9;61308:19;31690:34;60998:340;;;;;;:::o;61345:555::-;61610:3;61595:19;;68697:2;68688:12;;40991:86;61599:9;68639:62;68688:12;40968:16;68639:62;:::i;40991:86::-;41145:73;41201:16;41194:5;41145:73;:::i;:::-;41125:93;;41224:86;68697:2;41299:3;41295:14;41281:12;41224:86;:::i;:::-;;41379:50;41423:4;41416:5;41412:16;41405:5;41379:50;:::i;:::-;41435:63;41423:4;41487:3;41483:14;41469:12;41435:63;:::i;:::-;;41567:50;41611:4;41604:5;41600:16;41593:5;41567:50;:::i;:::-;41623:63;41611:4;41675:3;41671:14;41657:12;41623:63;:::i;:::-;;41749:50;41793:4;41786:5;41782:16;41775:5;41749:50;:::i;:::-;41805:63;41793:4;41857:3;41853:14;41839:12;41805:63;:::i;:::-;;41931:50;41975:4;41968:5;41964:16;41957:5;41931:50;:::i;:::-;41987:63;41975:4;42039:3;42035:14;42021:12;41987:63;:::i;:::-;;42116:50;42160:4;42153:5;42149:16;42142:5;42116:50;:::i;:::-;42172:63;42160:4;42224:3;42220:14;42206:12;42172:63;:::i;:::-;;42341:4;42334:5;42330:16;6116:20;42341:4;42405:3;42401:14;32063:37;42523:6;42480:51;42523:6;42516:5;42512:18;42505:5;42480:51;:::i;:::-;42537:63;42523:6;42587:3;42583:16;42569:12;42537:63;:::i;:::-;-1:-1;;42706:6;42695:18;;;12980:20;42768:16;;;32063:37;61761:129;61885:3;61870:19;;61861:6;61761:129;:::i;61907:222::-;71167:34;71156:46;;;;43876:37;;62034:2;62019:18;;62005:124::o;62136:333::-;71167:34;71156:46;;;43876:37;;71156:46;;62455:2;62440:18;;43876:37;62291:2;62276:18;;62262:207::o;62705:333::-;32063:37;;;63024:2;63009:18;;32063:37;62860:2;62845:18;;62831:207::o;63045:218::-;71493:10;71482:22;;;;44344:36;;63170:2;63155:18;;63141:122::o;63270:256::-;63332:2;63326:9;63358:17;;;63433:18;63418:34;;63454:22;;;63415:62;63412:2;;;63490:1;;63480:12;63412:2;63332;63499:22;63310:216;;-1:-1;63310:216::o;63533:304::-;;63692:18;63684:6;63681:30;63678:2;;;-1:-1;;63714:12;63678:2;-1:-1;63759:4;63747:17;;;63812:15;;63615:222::o;68286:119::-;;85:6;72:20;97:33;124:5;97:33;:::i;68880:119::-;;12715:6;12702:20;12727:33;12754:5;12727:33;:::i;69136:117::-;;13270:6;13257:20;71588:18;75895:5;71577:30;75871:5;75868:34;75858:2;;-1:-1;;75906:12;74026:111;74115:1;74108:5;74105:12;74095:2;;74121:9;74626:117;71287:42;74713:5;71276:54;74688:5;74685:35;74675:2;;74734:1;;74724:12;74750:111;74831:5;69655:13;69648:21;74809:5;74806:32;74796:2;;74852:1;;74842:12;75443:112;75530:1;75523:5;75520:12;75510:2;;75546:1;;75536:12;75562:117;71167:34;75649:5;71156:46;75624:5;75621:35;75611:2;;75670:1;;75660:12"
            },
            "methodIdentifiers": {
                "EIP712_DOMAIN_SEPARATOR()": "dab400f3",
                "FEATURE_NAME()": "6ae4b4f7",
                "FEATURE_VERSION()": "031b905c",
                "PROTOCOL_FEE_MULTIPLIER()": "a0edcef5",
                "_fillLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128,address,address)": "414e4ccf",
                "_fillRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128,address,bool,address)": "aa6b21cd",
                "batchCancelLimitOrders((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[])": "9baa45a8",
                "batchCancelPairLimitOrders(address[],address[],uint256[])": "86a0c8d7",
                "batchCancelPairLimitOrdersWithSigner(address,address[],address[],uint256[])": "9f0434f5",
                "batchCancelPairRfqOrders(address[],address[],uint256[])": "0f0e8cf7",
                "batchCancelPairRfqOrdersWithSigner(address,address[],address[],uint256[])": "fd5f995b",
                "batchCancelRfqOrders((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256)[])": "f6e0f6a5",
                "batchGetLimitOrderRelevantStates((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[])": "b4658bfb",
                "batchGetRfqOrderRelevantStates((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[])": "ad354eeb",
                "cancelLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))": "7d49ec1a",
                "cancelPairLimitOrders(address,address,uint256)": "d0a55fb0",
                "cancelPairLimitOrdersWithSigner(address,address,address,uint256)": "b10a33f4",
                "cancelPairRfqOrders(address,address,uint256)": "9a4f809c",
                "cancelPairRfqOrdersWithSigner(address,address,address,uint256)": "935c82a4",
                "cancelRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))": "fe55a3ef",
                "fillLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": "f6274f66",
                "fillOrKillLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": "9240529c",
                "fillOrKillRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": "438cdfc5",
                "fillRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": "aa77476c",
                "getLimitOrderHash((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))": "dd11d225",
                "getLimitOrderInfo((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))": "95480889",
                "getLimitOrderRelevantState((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32))": "1fb09795",
                "getProtocolFeeMultiplier()": "487b5c20",
                "getRfqOrderHash((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))": "016a6d65",
                "getRfqOrderInfo((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))": "346693c5",
                "getRfqOrderRelevantState((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32))": "37f381d8",
                "isValidOrderSigner(address,address)": "6b52a4a8",
                "migrate()": "8fd3ab80",
                "registerAllowedOrderSigner(address,bool)": "ea7faa61",
                "registerAllowedRfqOrigins(address[],bool)": "b09f1fb1",
                "transferProtocolFeesForPools(bytes32[])": "3cd2f026"
            }
        }
    },
    "sourceTreeHashHex": "0x9725e9efb8785e035b7be65c943815b11de7f3d3a2faf19a1b9bf8142bcb2504",
    "sources": {
        "./NativeOrdersFeature.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"../migrations/LibMigrate.sol\";\nimport \"./interfaces/IFeature.sol\";\nimport \"./interfaces/INativeOrdersFeature.sol\";\nimport \"./native_orders/NativeOrdersSettlement.sol\";\n\n\n/// @dev Feature for interacting with limit and RFQ orders.\ncontract NativeOrdersFeature is\n    IFeature,\n    NativeOrdersSettlement\n{\n    /// @dev Name of this feature.\n    string public constant override FEATURE_NAME = \"LimitOrders\";\n    /// @dev Version of this feature.\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 3, 0);\n\n    constructor(\n        address zeroExAddress,\n        IEtherTokenV06 weth,\n        IStaking staking,\n        FeeCollectorController feeCollectorController,\n        uint32 protocolFeeMultiplier\n    )\n        public\n        NativeOrdersSettlement(\n            zeroExAddress,\n            weth,\n            staking,\n            feeCollectorController,\n            protocolFeeMultiplier\n        )\n    {\n        // solhint-disable no-empty-blocks\n    }\n\n    /// @dev Initialize and register this feature.\n    ///      Should be delegatecalled by `Migrate.migrate()`.\n    /// @return success `LibMigrate.SUCCESS` on success.\n    function migrate()\n        external\n        returns (bytes4 success)\n    {\n        _registerFeatureFunction(this.transferProtocolFeesForPools.selector);\n        _registerFeatureFunction(this.fillLimitOrder.selector);\n        _registerFeatureFunction(this.fillRfqOrder.selector);\n        _registerFeatureFunction(this.fillOrKillLimitOrder.selector);\n        _registerFeatureFunction(this.fillOrKillRfqOrder.selector);\n        _registerFeatureFunction(this._fillLimitOrder.selector);\n        _registerFeatureFunction(this._fillRfqOrder.selector);\n        _registerFeatureFunction(this.cancelLimitOrder.selector);\n        _registerFeatureFunction(this.cancelRfqOrder.selector);\n        _registerFeatureFunction(this.batchCancelLimitOrders.selector);\n        _registerFeatureFunction(this.batchCancelRfqOrders.selector);\n        _registerFeatureFunction(this.cancelPairLimitOrders.selector);\n        _registerFeatureFunction(this.cancelPairLimitOrdersWithSigner.selector);\n        _registerFeatureFunction(this.batchCancelPairLimitOrders.selector);\n        _registerFeatureFunction(this.batchCancelPairLimitOrdersWithSigner.selector);\n        _registerFeatureFunction(this.cancelPairRfqOrders.selector);\n        _registerFeatureFunction(this.cancelPairRfqOrdersWithSigner.selector);\n        _registerFeatureFunction(this.batchCancelPairRfqOrders.selector);\n        _registerFeatureFunction(this.batchCancelPairRfqOrdersWithSigner.selector);\n        _registerFeatureFunction(this.getLimitOrderInfo.selector);\n        _registerFeatureFunction(this.getRfqOrderInfo.selector);\n        _registerFeatureFunction(this.getLimitOrderHash.selector);\n        _registerFeatureFunction(this.getRfqOrderHash.selector);\n        _registerFeatureFunction(this.getProtocolFeeMultiplier.selector);\n        _registerFeatureFunction(this.registerAllowedRfqOrigins.selector);\n        _registerFeatureFunction(this.getLimitOrderRelevantState.selector);\n        _registerFeatureFunction(this.getRfqOrderRelevantState.selector);\n        _registerFeatureFunction(this.batchGetLimitOrderRelevantStates.selector);\n        _registerFeatureFunction(this.batchGetRfqOrderRelevantStates.selector);\n        _registerFeatureFunction(this.registerAllowedOrderSigner.selector);\n        _registerFeatureFunction(this.isValidOrderSigner.selector);\n        return LibMigrate.MIGRATE_SUCCESS;\n    }\n}\n"
        },
        "../migrations/LibMigrate.sol": {
            "id": 23,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\nlibrary LibMigrate {\n\n    /// @dev Magic bytes returned by a migrator to indicate success.\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\n    /// @param target The call target.\n    /// @param data The call data.\n    function delegatecallMigrateFunction(\n        address target,\n        bytes memory data\n    )\n        internal\n    {\n        (bool success, bytes memory resultData) = target.delegatecall(data);\n        if (!success ||\n            resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\n        {\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 36,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "../errors/LibOwnableRichErrors.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOwnerError(address,address)\")),\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n        );\n    }\n\n    function MigrateCallFailedError(address target, bytes memory resultData)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MigrateCallFailedError(address,bytes)\")),\n            target,\n            resultData\n        );\n    }\n}\n"
        },
        "./interfaces/IFeature.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic interface for a feature contract.\ninterface IFeature {\n\n    // solhint-disable func-name-mixedcase\n\n    /// @dev The name of this feature set.\n    function FEATURE_NAME() external view returns (string memory name);\n\n    /// @dev The version of this feature set.\n    function FEATURE_VERSION() external view returns (uint256 version);\n}\n"
        },
        "./interfaces/INativeOrdersFeature.sol": {
            "id": 10,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\nimport \"./INativeOrdersEvents.sol\";\n\n\n/// @dev Feature for interacting with limit orders.\ninterface INativeOrdersFeature is\n    INativeOrdersEvents\n{\n\n    /// @dev Transfers protocol fees from the `FeeCollector` pools into\n    ///      the staking contract.\n    /// @param poolIds Staking pool IDs\n    function transferProtocolFeesForPools(bytes32[] calldata poolIds)\n        external;\n\n    /// @dev Fill a limit order. The taker and sender will be the caller.\n    /// @param order The limit order. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill a limit order. Internal variant. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      `msg.sender` (not `sender`).\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param sender The order sender.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        address sender\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order. Internal variant.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param useSelfBalance Whether to use the ExchangeProxy's transient\n    ///        balance of taker tokens to fill the order.\n    /// @param recipient The recipient of the maker tokens.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        bool useSelfBalance,\n        address recipient\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Cancel a single limit order. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The limit order.\n    function cancelLimitOrder(LibNativeOrder.LimitOrder calldata order)\n        external;\n\n    /// @dev Cancel a single RFQ order. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The RFQ order.\n    function cancelRfqOrder(LibNativeOrder.RfqOrder calldata order)\n        external;\n\n    /// @dev Mark what tx.origin addresses are allowed to fill an order that\n    ///      specifies the message sender as its txOrigin.\n    /// @param origins An array of origin addresses to update.\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedRfqOrigins(address[] memory origins, bool allowed)\n        external;\n\n    /// @dev Cancel multiple limit orders. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The limit orders.\n    function batchCancelLimitOrders(LibNativeOrder.LimitOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel multiple RFQ orders. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The RFQ orders.\n    function batchCancelRfqOrders(LibNativeOrder.RfqOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrdersWithSigner(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrdersWithSigner(\n        address maker,\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrdersWithSigner(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrdersWithSigner(\n        address maker,\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        external;\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the order info for an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderInfo Info about the order.\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the canonical hash of a limit order.\n    /// @param order The limit order.\n    /// @return orderHash The order hash.\n    function getLimitOrderHash(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the canonical hash of an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderHash The order hash.\n    function getRfqOrderHash(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the protocol fee multiplier. This should be multiplied by the\n    ///      gas price to arrive at the required protocol fee to fill a native order.\n    /// @return multiplier The protocol fee multiplier.\n    function getProtocolFeeMultiplier()\n        external\n        view\n        returns (uint32 multiplier);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Get order info, fillable amount, and signature validity for an RFQ order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getRfqOrderRelevantState(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Batch version of `getLimitOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getLimitOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The limit orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetLimitOrderRelevantStates(\n        LibNativeOrder.LimitOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n\n    /// @dev Batch version of `getRfqOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getRfqOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The RFQ orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetRfqOrderRelevantStates(\n        LibNativeOrder.RfqOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n\n    /// @dev Register a signer who can sign on behalf of msg.sender\n    ///      This allows one to sign on behalf of a contract that calls this function\n    /// @param signer The address from which you plan to generate signatures\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedOrderSigner(\n        address signer,\n        bool allowed\n    )\n        external;\n\n    /// @dev checks if a given address is registered to sign on behalf of a maker address\n    /// @param maker The maker address encoded in an order (can be a contract)\n    /// @param signer The address that is providing a signature\n    function isValidOrderSigner(\n        address maker,\n        address signer\n    )\n        external\n        view\n        returns (bool isAllowed);\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 27,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "./libs/LibSignature.sol": {
            "id": 14,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../../errors/LibSignatureRichErrors.sol\";\n\n\n/// @dev A library for validating signatures.\nlibrary LibSignature {\n    using LibRichErrorsV06 for bytes;\n\n    // '\\x19Ethereum Signed Message:\\n32\\x00\\x00\\x00\\x00' in a word.\n    uint256 private constant ETH_SIGN_HASH_PREFIX =\n        0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\n    ///      The valid range is given by fig (282) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\n    ///      The valid range is given by fig (283) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Retrieve the signer of a signature.\n    ///      Throws if the signature can't be validated.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    /// @return recovered The recovered signer address.\n    function getSignerOfHash(\n        bytes32 hash,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address recovered)\n    {\n        // Ensure this is a signature type that can be validated against a hash.\n        _validateHashCompatibleSignature(hash, signature);\n\n        if (signature.signatureType == SignatureType.EIP712) {\n            // Signed using EIP712\n            recovered = ecrecover(\n                hash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\n            // Signed using `eth_sign`\n            // Need to hash `hash` with \"\\x19Ethereum Signed Message:\\n32\" prefix\n            // in packed encoding.\n            bytes32 ethSignHash;\n            assembly {\n                // Use scratch space\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\n                mstore(28, hash) // length of 32 bytes\n                ethSignHash := keccak256(0, 60)\n            }\n            recovered = ecrecover(\n                ethSignHash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        }\n        // `recovered` can be null if the signature values are out of range.\n        if (recovered == address(0)) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n    }\n\n    /// @dev Validates that a signature is compatible with a hash signee.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    function _validateHashCompatibleSignature(\n        bytes32 hash,\n        Signature memory signature\n    )\n        private\n        pure\n    {\n        // Ensure the r and s are within malleability limits.\n        if (uint256(signature.r) >= ECDSA_SIGNATURE_R_LIMIT ||\n            uint256(signature.s) >= ECDSA_SIGNATURE_S_LIMIT)\n        {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n\n        // Always illegal signature.\n        if (signature.signatureType == SignatureType.ILLEGAL) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\n                hash\n            ).rrevert();\n        }\n\n        // Always invalid.\n        if (signature.signatureType == SignatureType.INVALID) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\n                hash\n            ).rrevert();\n        }\n\n        // Solidity should check that the signature type is within enum range for us\n        // when abi-decoding.\n    }\n}\n"
        },
        "../errors/LibSignatureRichErrors.sol": {
            "id": 3,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSignatureRichErrors {\n\n    enum SignatureValidationErrorCodes {\n        ALWAYS_INVALID,\n        INVALID_LENGTH,\n        UNSUPPORTED,\n        ILLEGAL,\n        WRONG_SIGNER,\n        BAD_SIGNATURE_DATA\n    }\n\n    // solhint-disable func-name-mixedcase\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32,address,bytes)\")),\n            code,\n            hash,\n            signerAddress,\n            signature\n        );\n    }\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32)\")),\n            code,\n            hash\n        );\n    }\n}\n"
        },
        "./libs/LibNativeOrder.sol": {
            "id": 13,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../errors/LibNativeOrdersRichErrors.sol\";\n\n\n/// @dev A library for common native order operations.\nlibrary LibNativeOrder {\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An OTC limit order.\n    struct OtcOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        uint256 expiryAndNonce; // [uint64 expiry, uint64 nonceBucket, uint128 nonce]\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Info on an OTC order.\n    struct OtcOrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n    }\n\n    uint256 private constant UINT_128_MASK = (1 << 128) - 1;\n    uint256 private constant UINT_64_MASK = (1 << 64) - 1;\n    uint256 private constant ADDRESS_MASK = (1 << 160) - 1;\n\n    // The type hash for limit orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"LimitOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"uint128 takerTokenFeeAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address sender,\",\n    //       \"address feeRecipient,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _LIMIT_ORDER_TYPEHASH =\n        0xce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d49;\n\n    // The type hash for RFQ orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"RfqOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _RFQ_ORDER_TYPEHASH =\n        0xe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da9;\n\n    // The type hash for OTC orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"OtcOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"uint256 expiryAndNonce\"\n    //     \")\"\n    // ))\n    uint256 private constant _OTC_ORDER_TYPEHASH =\n        0x2f754524de756ae72459efbe1ec88c19a745639821de528ac3fb88f9e65e35c8;\n\n    /// @dev Get the struct hash of a limit order.\n    /// @param order The limit order.\n    /// @return structHash The struct hash of the order.\n    function getLimitOrderStructHash(LimitOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.takerTokenFeeAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.sender,\n        //   order.feeRecipient,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _LIMIT_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.takerTokenFeeAmount;\n            mstore(add(mem, 0xA0), and(UINT_128_MASK, mload(add(order, 0x80))))\n            // order.maker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.taker;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.sender;\n            mstore(add(mem, 0x100), and(ADDRESS_MASK, mload(add(order, 0xE0))))\n            // order.feeRecipient;\n            mstore(add(mem, 0x120), and(ADDRESS_MASK, mload(add(order, 0x100))))\n            // order.pool;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            // order.expiry;\n            mstore(add(mem, 0x160), and(UINT_64_MASK, mload(add(order, 0x140))))\n            // order.salt;\n            mstore(add(mem, 0x180), mload(add(order, 0x160)))\n            structHash := keccak256(mem, 0x1A0)\n        }\n    }\n\n    /// @dev Get the struct hash of a RFQ order.\n    /// @param order The RFQ order.\n    /// @return structHash The struct hash of the order.\n    function getRfqOrderStructHash(RfqOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _RFQ_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.pool;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            // order.expiry;\n            mstore(add(mem, 0x120), and(UINT_64_MASK, mload(add(order, 0x100))))\n            // order.salt;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            structHash := keccak256(mem, 0x160)\n        }\n    }\n\n    /// @dev Get the struct hash of an OTC order.\n    /// @param order The OTC order.\n    /// @return structHash The struct hash of the order.\n    function getOtcOrderStructHash(OtcOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.expiryAndNonce,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _OTC_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.expiryAndNonce;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            structHash := keccak256(mem, 0x120)\n        }\n    }\n\n    /// @dev Refund any leftover protocol fees in `msg.value` to `msg.sender`.\n    /// @param ethProtocolFeePaid How much ETH was paid in protocol fees.\n    function refundExcessProtocolFeeToSender(uint256 ethProtocolFeePaid)\n        internal\n    {\n        if (msg.value > ethProtocolFeePaid && msg.sender != address(this)) {\n            uint256 refundAmount = msg.value.safeSub(ethProtocolFeePaid);\n            (bool success,) = msg\n                .sender\n                .call{value: refundAmount}(\"\");\n            if (!success) {\n                LibNativeOrdersRichErrors.ProtocolFeeRefundFailed(\n                    msg.sender,\n                    refundAmount\n                ).rrevert();\n            }\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 31,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 37,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"
        },
        "../errors/LibNativeOrdersRichErrors.sol": {
            "id": 1,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibNativeOrdersRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function ProtocolFeeRefundFailed(\n        address receiver,\n        uint256 refundAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"ProtocolFeeRefundFailed(address,uint256)\")),\n            receiver,\n            refundAmount\n        );\n    }\n\n    function OrderNotFillableByOriginError(\n        bytes32 orderHash,\n        address txOrigin,\n        address orderTxOrigin\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByOriginError(bytes32,address,address)\")),\n            orderHash,\n            txOrigin,\n            orderTxOrigin\n        );\n    }\n\n    function OrderNotFillableError(\n        bytes32 orderHash,\n        uint8 orderStatus\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableError(bytes32,uint8)\")),\n            orderHash,\n            orderStatus\n        );\n    }\n\n    function OrderNotSignedByMakerError(\n        bytes32 orderHash,\n        address signer,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotSignedByMakerError(bytes32,address,address)\")),\n            orderHash,\n            signer,\n            maker\n        );\n    }\n\n    function InvalidSignerError(\n        address maker,\n        address signer\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidSignerError(address,address)\")),\n            maker,\n            signer\n        );\n    }\n\n    function OrderNotFillableBySenderError(\n        bytes32 orderHash,\n        address sender,\n        address orderSender\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableBySenderError(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            orderSender\n        );\n    }\n\n    function OrderNotFillableByTakerError(\n        bytes32 orderHash,\n        address taker,\n        address orderTaker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByTakerError(bytes32,address,address)\")),\n            orderHash,\n            taker,\n            orderTaker\n        );\n    }\n\n    function CancelSaltTooLowError(\n        uint256 minValidSalt,\n        uint256 oldMinValidSalt\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"CancelSaltTooLowError(uint256,uint256)\")),\n            minValidSalt,\n            oldMinValidSalt\n        );\n    }\n\n    function FillOrKillFailedError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"FillOrKillFailedError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n\n    function OnlyOrderMakerAllowed(\n        bytes32 orderHash,\n        address sender,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOrderMakerAllowed(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            maker\n        );\n    }\n\n    function BatchFillIncompleteError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"BatchFillIncompleteError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n}\n"
        },
        "./interfaces/INativeOrdersEvents.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\n\n\n/// @dev Events emitted by NativeOrdersFeature.\ninterface INativeOrdersEvents {\n\n    /// @dev Emitted whenever a `LimitOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param feeRecipient Fee recipient of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param protocolFeePaid How much protocol fee was paid.\n    /// @param pool The fee pool associated with this order.\n    event LimitOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address feeRecipient,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        uint128 takerTokenFeeFilledAmount,\n        uint256 protocolFeePaid,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever an `RfqOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param pool The fee pool associated with this order.\n    event RfqOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever a limit or RFQ order is cancelled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The order maker.\n    event OrderCancelled(\n        bytes32 orderHash,\n        address maker\n    );\n\n    /// @dev Emitted whenever Limit orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledLimitOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted whenever RFQ orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledRfqOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted when new addresses are allowed or disallowed to fill\n    ///      orders with a given txOrigin.\n    /// @param origin The address doing the allowing.\n    /// @param addrs The address being allowed/disallowed.\n    /// @param allowed Indicates whether the address should be allowed.\n    event RfqOrderOriginsAllowed(\n        address origin,\n        address[] addrs,\n        bool allowed\n    );\n\n    /// @dev Emitted when new order signers are registered\n    /// @param maker The maker address that is registering a designated signer.\n    /// @param signer The address that will sign on behalf of maker.\n    /// @param allowed Indicates whether the address should be allowed.\n    event OrderSignerRegistered(\n        address maker,\n        address signer,\n        bool allowed\n    );\n}\n"
        },
        "./native_orders/NativeOrdersSettlement.sol": {
            "id": 18,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"../../errors/LibNativeOrdersRichErrors.sol\";\nimport \"../../fixins/FixinCommon.sol\";\nimport \"../../storage/LibNativeOrdersStorage.sol\";\nimport \"../../vendor/v3/IStaking.sol\";\nimport \"../interfaces/INativeOrdersEvents.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\nimport \"./NativeOrdersCancellation.sol\";\nimport \"./NativeOrdersProtocolFees.sol\";\n\n\n/// @dev Mixin for settling limit and RFQ orders.\nabstract contract NativeOrdersSettlement is\n    INativeOrdersEvents,\n    NativeOrdersCancellation,\n    NativeOrdersProtocolFees,\n    FixinCommon\n{\n    using LibSafeMathV06 for uint128;\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Params for `_settleOrder()`.\n    struct SettleOrderInfo {\n        // Order hash.\n        bytes32 orderHash;\n        // Maker of the order.\n        address maker;\n        // The address holding the taker tokens.\n        address payer;\n        // Recipient of the maker tokens.\n        address recipient;\n        // Maker token.\n        IERC20TokenV06 makerToken;\n        // Taker token.\n        IERC20TokenV06 takerToken;\n        // Maker token amount.\n        uint128 makerAmount;\n        // Taker token amount.\n        uint128 takerAmount;\n        // Maximum taker token amount to fill.\n        uint128 takerTokenFillAmount;\n        // How much taker token amount has already been filled in this order.\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Params for `_fillLimitOrderPrivate()`\n    struct FillLimitOrderPrivateParams {\n        // The limit order.\n        LibNativeOrder.LimitOrder order;\n        // The order signature.\n        LibSignature.Signature signature;\n        // Maximum taker token to fill this order with.\n        uint128 takerTokenFillAmount;\n        // The order taker.\n        address taker;\n        // The order sender.\n        address sender;\n    }\n\n    /// @dev Params for `_fillRfqOrderPrivate()`\n    struct FillRfqOrderPrivateParams {\n        LibNativeOrder.RfqOrder order;\n        // The order signature.\n        LibSignature.Signature signature;\n        // Maximum taker token to fill this order with.\n        uint128 takerTokenFillAmount;\n        // The order taker.\n        address taker;\n        // Whether to use the Exchange Proxy's balance\n        // of taker tokens.\n        bool useSelfBalance;\n        // The recipient of the maker tokens.\n        address recipient;\n    }\n\n    // @dev Fill results returned by `_fillLimitOrderPrivate()` and\n    ///     `_fillRfqOrderPrivate()`.\n    struct FillNativeOrderResults {\n        uint256 ethProtocolFeePaid;\n        uint128 takerTokenFilledAmount;\n        uint128 makerTokenFilledAmount;\n        uint128 takerTokenFeeFilledAmount;\n    }\n\n    constructor(\n        address zeroExAddress,\n        IEtherTokenV06 weth,\n        IStaking staking,\n        FeeCollectorController feeCollectorController,\n        uint32 protocolFeeMultiplier\n    )\n        public\n        NativeOrdersCancellation(zeroExAddress)\n        NativeOrdersProtocolFees(weth, staking, feeCollectorController, protocolFeeMultiplier)\n    {\n        // solhint-disable no-empty-blocks\n    }\n\n    /// @dev Fill a limit order. The taker and sender will be the caller.\n    /// @param order The limit order. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillLimitOrder(\n        LibNativeOrder.LimitOrder memory order,\n        LibSignature.Signature memory signature,\n        uint128 takerTokenFillAmount\n    )\n        public\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        FillNativeOrderResults memory results =\n            _fillLimitOrderPrivate(FillLimitOrderPrivateParams({\n                order: order,\n                signature: signature,\n                takerTokenFillAmount: takerTokenFillAmount,\n                taker: msg.sender,\n                sender: msg.sender\n            }));\n        LibNativeOrder.refundExcessProtocolFeeToSender(results.ethProtocolFeePaid);\n        (takerTokenFilledAmount, makerTokenFilledAmount) = (\n            results.takerTokenFilledAmount,\n            results.makerTokenFilledAmount\n        );\n    }\n\n    /// @dev Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller. ETH should be attached to pay the\n    ///      protocol fee.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillRfqOrder(\n        LibNativeOrder.RfqOrder memory order,\n        LibSignature.Signature memory signature,\n        uint128 takerTokenFillAmount\n    )\n        public\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        FillNativeOrderResults memory results =\n            _fillRfqOrderPrivate(FillRfqOrderPrivateParams({\n                order: order,\n                signature: signature,\n                takerTokenFillAmount: takerTokenFillAmount,\n                taker: msg.sender,\n                useSelfBalance: false,\n                recipient: msg.sender\n            }));\n        (takerTokenFilledAmount, makerTokenFilledAmount) = (\n            results.takerTokenFilledAmount,\n            results.makerTokenFilledAmount\n        );\n    }\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillLimitOrder(\n        LibNativeOrder.LimitOrder memory order,\n        LibSignature.Signature memory signature,\n        uint128 takerTokenFillAmount\n    )\n        public\n        payable\n        returns (uint128 makerTokenFilledAmount)\n    {\n        FillNativeOrderResults memory results =\n            _fillLimitOrderPrivate(FillLimitOrderPrivateParams({\n                order: order,\n                signature: signature,\n                takerTokenFillAmount: takerTokenFillAmount,\n                taker: msg.sender,\n                sender: msg.sender\n            }));\n        // Must have filled exactly the amount requested.\n        if (results.takerTokenFilledAmount < takerTokenFillAmount) {\n            LibNativeOrdersRichErrors.FillOrKillFailedError(\n                getLimitOrderHash(order),\n                results.takerTokenFilledAmount,\n                takerTokenFillAmount\n            ).rrevert();\n        }\n        LibNativeOrder.refundExcessProtocolFeeToSender(results.ethProtocolFeePaid);\n        makerTokenFilledAmount = results.makerTokenFilledAmount;\n    }\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillRfqOrder(\n        LibNativeOrder.RfqOrder memory order,\n        LibSignature.Signature memory signature,\n        uint128 takerTokenFillAmount\n    )\n        public\n        returns (uint128 makerTokenFilledAmount)\n    {\n        FillNativeOrderResults memory results =\n            _fillRfqOrderPrivate(FillRfqOrderPrivateParams({\n                order: order,\n                signature: signature,\n                takerTokenFillAmount: takerTokenFillAmount,\n                taker: msg.sender,\n                useSelfBalance: false,\n                recipient: msg.sender\n            }));\n        // Must have filled exactly the amount requested.\n        if (results.takerTokenFilledAmount < takerTokenFillAmount) {\n            LibNativeOrdersRichErrors.FillOrKillFailedError(\n                getRfqOrderHash(order),\n                results.takerTokenFilledAmount,\n                takerTokenFillAmount\n            ).rrevert();\n        }\n        makerTokenFilledAmount = results.makerTokenFilledAmount;\n    }\n\n    /// @dev Fill a limit order. Internal variant. ETH protocol fees can be\n    ///      attached to this call.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param sender The order sender.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillLimitOrder(\n        LibNativeOrder.LimitOrder memory order,\n        LibSignature.Signature memory signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        address sender\n    )\n        public\n        virtual\n        payable\n        onlySelf\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        FillNativeOrderResults memory results =\n            _fillLimitOrderPrivate(FillLimitOrderPrivateParams(\n                order,\n                signature,\n                takerTokenFillAmount,\n                taker,\n                sender\n            ));\n        (takerTokenFilledAmount, makerTokenFilledAmount) = (\n            results.takerTokenFilledAmount,\n            results.makerTokenFilledAmount\n        );\n    }\n\n    /// @dev Fill an RFQ order. Internal variant.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param useSelfBalance Whether to use the ExchangeProxy's transient\n    ///        balance of taker tokens to fill the order.\n    /// @param recipient The recipient of the maker tokens.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillRfqOrder(\n        LibNativeOrder.RfqOrder memory order,\n        LibSignature.Signature memory signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        bool useSelfBalance,\n        address recipient\n    )\n        public\n        virtual\n        onlySelf\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        FillNativeOrderResults memory results =\n            _fillRfqOrderPrivate(FillRfqOrderPrivateParams(\n                order,\n                signature,\n                takerTokenFillAmount,\n                taker,\n                useSelfBalance,\n                recipient\n            ));\n        (takerTokenFilledAmount, makerTokenFilledAmount) = (\n            results.takerTokenFilledAmount,\n            results.makerTokenFilledAmount\n        );\n    }\n\n    /// @dev Mark what tx.origin addresses are allowed to fill an order that\n    ///      specifies the message sender as its txOrigin.\n    /// @param origins An array of origin addresses to update.\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedRfqOrigins(\n        address[] memory origins,\n        bool allowed\n    )\n        external\n    {\n        require(msg.sender == tx.origin,\n            \"NativeOrdersFeature/NO_CONTRACT_ORIGINS\");\n\n        LibNativeOrdersStorage.Storage storage stor =\n            LibNativeOrdersStorage.getStorage();\n\n        for (uint256 i = 0; i < origins.length; i++) {\n            stor.originRegistry[msg.sender][origins[i]] = allowed;\n        }\n\n        emit RfqOrderOriginsAllowed(msg.sender, origins, allowed);\n    }\n\n    /// @dev Fill a limit order. Private variant. Does not refund protocol fees.\n    /// @param params Function params.\n    /// @return results Results of the fill.\n    function _fillLimitOrderPrivate(FillLimitOrderPrivateParams memory params)\n        private\n        returns (FillNativeOrderResults memory results)\n    {\n        LibNativeOrder.OrderInfo memory orderInfo = getLimitOrderInfo(params.order);\n\n        // Must be fillable.\n        if (orderInfo.status != LibNativeOrder.OrderStatus.FILLABLE) {\n            LibNativeOrdersRichErrors.OrderNotFillableError(\n                orderInfo.orderHash,\n                uint8(orderInfo.status)\n            ).rrevert();\n        }\n\n        // Must be fillable by the taker.\n        if (params.order.taker != address(0) && params.order.taker != params.taker) {\n            LibNativeOrdersRichErrors.OrderNotFillableByTakerError(\n                orderInfo.orderHash,\n                params.taker,\n                params.order.taker\n            ).rrevert();\n        }\n\n        // Must be fillable by the sender.\n        if (params.order.sender != address(0) && params.order.sender != params.sender) {\n            LibNativeOrdersRichErrors.OrderNotFillableBySenderError(\n                orderInfo.orderHash,\n                params.sender,\n                params.order.sender\n            ).rrevert();\n        }\n\n        // Signature must be valid for the order.\n        {\n            address signer = LibSignature.getSignerOfHash(\n                orderInfo.orderHash,\n                params.signature\n            );\n            if (signer != params.order.maker && !isValidOrderSigner(params.order.maker, signer)) {\n                LibNativeOrdersRichErrors.OrderNotSignedByMakerError(\n                    orderInfo.orderHash,\n                    signer,\n                    params.order.maker\n                ).rrevert();\n            }\n        }\n\n        // Pay the protocol fee.\n        results.ethProtocolFeePaid = _collectProtocolFee(params.order.pool);\n\n        // Settle between the maker and taker.\n        (results.takerTokenFilledAmount, results.makerTokenFilledAmount) = _settleOrder(\n            SettleOrderInfo({\n                orderHash: orderInfo.orderHash,\n                maker: params.order.maker,\n                payer: params.taker,\n                recipient: params.taker,\n                makerToken: IERC20TokenV06(params.order.makerToken),\n                takerToken: IERC20TokenV06(params.order.takerToken),\n                makerAmount: params.order.makerAmount,\n                takerAmount: params.order.takerAmount,\n                takerTokenFillAmount: params.takerTokenFillAmount,\n                takerTokenFilledAmount: orderInfo.takerTokenFilledAmount\n            })\n        );\n\n        // Pay the fee recipient.\n        if (params.order.takerTokenFeeAmount > 0) {\n            results.takerTokenFeeFilledAmount = uint128(LibMathV06.getPartialAmountFloor(\n                results.takerTokenFilledAmount,\n                params.order.takerAmount,\n                params.order.takerTokenFeeAmount\n            ));\n            _transferERC20TokensFrom(\n                params.order.takerToken,\n                params.taker,\n                params.order.feeRecipient,\n                uint256(results.takerTokenFeeFilledAmount)\n            );\n        }\n\n        emit LimitOrderFilled(\n            orderInfo.orderHash,\n            params.order.maker,\n            params.taker,\n            params.order.feeRecipient,\n            address(params.order.makerToken),\n            address(params.order.takerToken),\n            results.takerTokenFilledAmount,\n            results.makerTokenFilledAmount,\n            results.takerTokenFeeFilledAmount,\n            results.ethProtocolFeePaid,\n            params.order.pool\n        );\n    }\n\n    /// @dev Fill an RFQ order. Private variant.\n    /// @param params Function params.\n    /// @return results Results of the fill.\n    function _fillRfqOrderPrivate(FillRfqOrderPrivateParams memory params)\n        private\n        returns (FillNativeOrderResults memory results)\n    {\n        LibNativeOrder.OrderInfo memory orderInfo = getRfqOrderInfo(params.order);\n\n        // Must be fillable.\n        if (orderInfo.status != LibNativeOrder.OrderStatus.FILLABLE) {\n            LibNativeOrdersRichErrors.OrderNotFillableError(\n                orderInfo.orderHash,\n                uint8(orderInfo.status)\n            ).rrevert();\n        }\n\n        {\n            LibNativeOrdersStorage.Storage storage stor =\n                LibNativeOrdersStorage.getStorage();\n\n            // Must be fillable by the tx.origin.\n            if (\n                params.order.txOrigin != tx.origin &&\n                !stor.originRegistry[params.order.txOrigin][tx.origin]\n            ) {\n                LibNativeOrdersRichErrors.OrderNotFillableByOriginError(\n                    orderInfo.orderHash,\n                    tx.origin,\n                    params.order.txOrigin\n                ).rrevert();\n            }\n        }\n\n        // Must be fillable by the taker.\n        if (params.order.taker != address(0) && params.order.taker != params.taker) {\n            LibNativeOrdersRichErrors.OrderNotFillableByTakerError(\n                orderInfo.orderHash,\n                params.taker,\n                params.order.taker\n            ).rrevert();\n        }\n\n        // Signature must be valid for the order.\n        {\n            address signer = LibSignature.getSignerOfHash(\n                orderInfo.orderHash,\n                params.signature\n            );\n            if (\n                signer != params.order.maker &&\n                !isValidOrderSigner(params.order.maker, signer)\n            ) {\n                LibNativeOrdersRichErrors.OrderNotSignedByMakerError(\n                    orderInfo.orderHash,\n                    signer,\n                    params.order.maker\n                ).rrevert();\n            }\n        }\n\n        // Settle between the maker and taker.\n        (results.takerTokenFilledAmount, results.makerTokenFilledAmount) = _settleOrder(\n            SettleOrderInfo({\n                orderHash: orderInfo.orderHash,\n                maker: params.order.maker,\n                payer: params.useSelfBalance ? address(this) : params.taker,\n                recipient: params.recipient,\n                makerToken: IERC20TokenV06(params.order.makerToken),\n                takerToken: IERC20TokenV06(params.order.takerToken),\n                makerAmount: params.order.makerAmount,\n                takerAmount: params.order.takerAmount,\n                takerTokenFillAmount: params.takerTokenFillAmount,\n                takerTokenFilledAmount: orderInfo.takerTokenFilledAmount\n            })\n        );\n\n        emit RfqOrderFilled(\n            orderInfo.orderHash,\n            params.order.maker,\n            params.taker,\n            address(params.order.makerToken),\n            address(params.order.takerToken),\n            results.takerTokenFilledAmount,\n            results.makerTokenFilledAmount,\n            params.order.pool\n        );\n    }\n\n    /// @dev Settle the trade between an order's maker and taker.\n    /// @param settleInfo Information needed to execute the settlement.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _settleOrder(SettleOrderInfo memory settleInfo)\n        private\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        // Clamp the taker token fill amount to the fillable amount.\n        takerTokenFilledAmount = LibSafeMathV06.min128(\n            settleInfo.takerTokenFillAmount,\n            settleInfo.takerAmount.safeSub128(settleInfo.takerTokenFilledAmount)\n        );\n        // Compute the maker token amount.\n        // This should never overflow because the values are all clamped to\n        // (2^128-1).\n        makerTokenFilledAmount = uint128(LibMathV06.getPartialAmountFloor(\n            uint256(takerTokenFilledAmount),\n            uint256(settleInfo.takerAmount),\n            uint256(settleInfo.makerAmount)\n        ));\n\n        if (takerTokenFilledAmount == 0 || makerTokenFilledAmount == 0) {\n            // Nothing to do.\n            return (0, 0);\n        }\n\n        // Update filled state for the order.\n        LibNativeOrdersStorage\n            .getStorage()\n            .orderHashToTakerTokenFilledAmount[settleInfo.orderHash] =\n            // OK to overwrite the whole word because we shouldn't get to this\n            // function if the order is cancelled.\n                settleInfo.takerTokenFilledAmount.safeAdd128(takerTokenFilledAmount);\n\n        if (settleInfo.payer == address(this)) {\n            // Transfer this -> maker.\n            _transferERC20Tokens(\n                settleInfo.takerToken,\n                settleInfo.maker,\n                takerTokenFilledAmount\n            );\n        } else {\n            // Transfer taker -> maker.\n            _transferERC20TokensFrom(\n                settleInfo.takerToken,\n                settleInfo.payer,\n                settleInfo.maker,\n                takerTokenFilledAmount\n            );\n        }\n\n        // Transfer maker -> recipient.\n        _transferERC20TokensFrom(\n            settleInfo.makerToken,\n            settleInfo.maker,\n            settleInfo.recipient,\n            makerTokenFilledAmount\n        );\n    }\n\n    /// @dev register a signer who can sign on behalf of msg.sender\n    /// @param signer The address from which you plan to generate signatures\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedOrderSigner(\n        address signer,\n        bool allowed\n    )\n        external\n    {\n        LibNativeOrdersStorage.Storage storage stor =\n            LibNativeOrdersStorage.getStorage();\n\n        stor.orderSignerRegistry[msg.sender][signer] = allowed;\n\n        emit OrderSignerRegistered(msg.sender, signer, allowed);\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": {
            "id": 28,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 30,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 34,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n"
        },
        "../fixins/FixinCommon.sol": {
            "id": 19,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\nimport \"../features/interfaces/IOwnableFeature.sol\";\nimport \"../features/interfaces/ISimpleFunctionRegistryFeature.sol\";\n\n\n/// @dev Common feature utilities.\nabstract contract FixinCommon {\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The implementation address of this feature.\n    address internal immutable _implementation;\n\n    /// @dev The caller must be this contract.\n    modifier onlySelf() virtual {\n        if (msg.sender != address(this)) {\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\n        }\n        _;\n    }\n\n    /// @dev The caller of this function must be the owner.\n    modifier onlyOwner() virtual {\n        {\n            address owner = IOwnableFeature(address(this)).owner();\n            if (msg.sender != owner) {\n                LibOwnableRichErrors.OnlyOwnerError(\n                    msg.sender,\n                    owner\n                ).rrevert();\n            }\n        }\n        _;\n    }\n\n    constructor() internal {\n        // Remember this feature's original address.\n        _implementation = address(this);\n    }\n\n    /// @dev Registers a function implemented by this feature at `_implementation`.\n    ///      Can and should only be called within a `migrate()`.\n    /// @param selector The selector of the function whose implementation\n    ///        is at `_implementation`.\n    function _registerFeatureFunction(bytes4 selector)\n        internal\n    {\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\n    }\n\n    /// @dev Encode a feature version as a `uint256`.\n    /// @param major The major version number of the feature.\n    /// @param minor The minor version number of the feature.\n    /// @param revision The revision number of the feature.\n    /// @return encodedVersion The encoded version number.\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\n        internal\n        pure\n        returns (uint256 encodedVersion)\n    {\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\n    }\n}\n"
        },
        "../errors/LibCommonRichErrors.sol": {
            "id": 0,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibCommonRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyCallableBySelfError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableBySelfError(address)\")),\n            sender\n        );\n    }\n\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IllegalReentrancyError(bytes4,uint256)\")),\n            selector,\n            reentrancyFlags\n        );\n    }\n}\n"
        },
        "./interfaces/IOwnableFeature.sol": {
            "id": 11,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\n/// @dev Owner management and migration features.\ninterface IOwnableFeature is\n    IOwnableV06\n{\n    /// @dev Emitted when `migrate()` is called.\n    /// @param caller The caller of `migrate()`.\n    /// @param migrator The migration contract.\n    /// @param newOwner The address of the new owner.\n    event Migrated(address caller, address migrator, address newOwner);\n\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\n    ///      The result of the function being called should be the magic bytes\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\n    ///      The owner will be temporarily set to `address(this)` inside the call.\n    ///      Before returning, the owner will be set to `newOwner`.\n    /// @param target The migrator contract address.\n    /// @param newOwner The address of the new owner.\n    /// @param data The call data.\n    function migrate(address target, bytes calldata data, address newOwner) external;\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": {
            "id": 39,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n"
        },
        "./interfaces/ISimpleFunctionRegistryFeature.sol": {
            "id": 12,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic registry management features.\ninterface ISimpleFunctionRegistryFeature {\n\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\n    /// @param selector The function selector.\n    /// @param oldImpl The implementation contract address being replaced.\n    /// @param newImpl The replacement implementation contract address.\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\n\n    /// @dev Roll back to a prior implementation of a function.\n    /// @param selector The function selector.\n    /// @param targetImpl The address of an older implementation of the function.\n    function rollback(bytes4 selector, address targetImpl) external;\n\n    /// @dev Register or replace a function.\n    /// @param selector The function selector.\n    /// @param impl The implementation contract for the function.\n    function extend(bytes4 selector, address impl) external;\n\n    /// @dev Retrieve the length of the rollback history for a function.\n    /// @param selector The function selector.\n    /// @return rollbackLength The number of items in the rollback history for\n    ///         the function.\n    function getRollbackLength(bytes4 selector)\n        external\n        view\n        returns (uint256 rollbackLength);\n\n    /// @dev Retrieve an entry in the rollback history for a function.\n    /// @param selector The function selector.\n    /// @param idx The index in the rollback history.\n    /// @return impl An implementation address for the function at\n    ///         index `idx`.\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\n        external\n        view\n        returns (address impl);\n}\n"
        },
        "../storage/LibNativeOrdersStorage.sol": {
            "id": 24,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"./LibStorage.sol\";\n\n\n/// @dev Storage helpers for `NativeOrdersFeature`.\nlibrary LibNativeOrdersStorage {\n\n    /// @dev Storage bucket for this feature.\n    struct Storage {\n        // How much taker token has been filled in order.\n        // The lower `uint128` is the taker token fill amount.\n        // The high bit will be `1` if the order was directly cancelled.\n        mapping(bytes32 => uint256) orderHashToTakerTokenFilledAmount;\n        // The minimum valid order salt for a given maker and order pair (maker, taker)\n        // for limit orders.\n        mapping(address => mapping(address => mapping(address => uint256)))\n            limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt;\n        // The minimum valid order salt for a given maker and order pair (maker, taker)\n        // for RFQ orders.\n        mapping(address => mapping(address => mapping(address => uint256)))\n            rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt;\n        // For a given order origin, which tx.origin addresses are allowed to\n        // fill the order.\n        mapping(address => mapping(address => bool)) originRegistry;\n        // For a given maker address, which addresses are allowed to\n        // sign on its behalf.\n        mapping(address => mapping(address => bool)) orderSignerRegistry;\n    }\n\n    /// @dev Get the storage bucket for this contract.\n    function getStorage() internal pure returns (Storage storage stor) {\n        uint256 storageSlot = LibStorage.getStorageSlot(\n            LibStorage.StorageId.NativeOrders\n        );\n        // Dip into assembly to change the slot pointed to by the local\n        // variable `stor`.\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\n        assembly { stor_slot := storageSlot }\n    }\n}\n"
        },
        "../storage/LibStorage.sol": {
            "id": 25,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Common storage helpers\nlibrary LibStorage {\n\n    /// @dev What to bit-shift a storage ID by to get its slot.\n    ///      This gives us a maximum of 2**128 inline fields in each bucket.\n    uint256 private constant STORAGE_SLOT_EXP = 128;\n\n    /// @dev Storage IDs for feature storage buckets.\n    ///      WARNING: APPEND-ONLY.\n    enum StorageId {\n        Proxy,\n        SimpleFunctionRegistry,\n        Ownable,\n        TokenSpender,\n        TransformERC20,\n        MetaTransactions,\n        ReentrancyGuard,\n        NativeOrders,\n        OtcOrders\n    }\n\n    /// @dev Get the storage slot given a storage ID. We assign unique, well-spaced\n    ///     slots to storage bucket variables to ensure they do not overlap.\n    ///     See: https://solidity.readthedocs.io/en/v0.6.6/assembly.html#access-to-external-variables-functions-and-libraries\n    /// @param storageId An entry in `StorageId`\n    /// @return slot The storage slot.\n    function getStorageSlot(StorageId storageId)\n        internal\n        pure\n        returns (uint256 slot)\n    {\n        // This should never overflow with a reasonable `STORAGE_SLOT_EXP`\n        // because Solidity will do a range check on `storageId` during the cast.\n        return (uint256(storageId) + 1) << STORAGE_SLOT_EXP;\n    }\n}\n"
        },
        "../vendor/v3/IStaking.sol": {
            "id": 26,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\ninterface IStaking {\n    function joinStakingPoolAsMaker(bytes32) external;\n    function payProtocolFee(address, address, uint256) external payable;\n}\n"
        },
        "./native_orders/NativeOrdersCancellation.sol": {
            "id": 15,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../../errors/LibNativeOrdersRichErrors.sol\";\nimport \"../../storage/LibNativeOrdersStorage.sol\";\nimport \"../interfaces/INativeOrdersEvents.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\nimport \"./NativeOrdersInfo.sol\";\n\n/// @dev Feature for cancelling limit and RFQ orders.\nabstract contract NativeOrdersCancellation is\n    INativeOrdersEvents,\n    NativeOrdersInfo\n{\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Highest bit of a uint256, used to flag cancelled orders.\n    uint256 private constant HIGH_BIT = 1 << 255;\n\n    constructor(\n        address zeroExAddress\n    )\n        internal\n        NativeOrdersInfo(zeroExAddress)\n    {\n        // solhint-disable no-empty-blocks\n    }\n\n    /// @dev Cancel a single limit order. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The limit order.\n    function cancelLimitOrder(LibNativeOrder.LimitOrder memory order)\n        public\n    {\n        bytes32 orderHash = getLimitOrderHash(order);\n        if (msg.sender != order.maker && !isValidOrderSigner(order.maker, msg.sender)) {\n            LibNativeOrdersRichErrors.OnlyOrderMakerAllowed(\n                orderHash,\n                msg.sender,\n                order.maker\n            ).rrevert();\n        }\n        _cancelOrderHash(orderHash, order.maker);\n    }\n\n    /// @dev Cancel a single RFQ order. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The RFQ order.\n    function cancelRfqOrder(LibNativeOrder.RfqOrder memory order)\n        public\n    {\n        bytes32 orderHash = getRfqOrderHash(order);\n        if (msg.sender != order.maker && !isValidOrderSigner(order.maker, msg.sender)) {\n            LibNativeOrdersRichErrors.OnlyOrderMakerAllowed(\n                orderHash,\n                msg.sender,\n                order.maker\n            ).rrevert();\n        }\n        _cancelOrderHash(orderHash, order.maker);\n    }\n\n    /// @dev Cancel multiple limit orders. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The limit orders.\n    function batchCancelLimitOrders(LibNativeOrder.LimitOrder[] memory orders)\n        public\n    {\n        for (uint256 i = 0; i < orders.length; ++i) {\n            cancelLimitOrder(orders[i]);\n        }\n    }\n\n    /// @dev Cancel multiple RFQ orders. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The RFQ orders.\n    function batchCancelRfqOrders(LibNativeOrder.RfqOrder[] memory orders)\n        public\n    {\n        for (uint256 i = 0; i < orders.length; ++i) {\n            cancelRfqOrder(orders[i]);\n        }\n    }\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        public\n    {\n        _cancelPairLimitOrders(msg.sender, makerToken, takerToken, minValidSalt);\n    }\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker the maker for whom the msg.sender is the signer.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrdersWithSigner(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        public\n    {\n        // verify that the signer is authorized for the maker\n        if (!isValidOrderSigner(maker, msg.sender)) {\n            LibNativeOrdersRichErrors.InvalidSignerError(\n                maker,\n                msg.sender\n            ).rrevert();\n        }\n\n        _cancelPairLimitOrders(maker, makerToken, takerToken, minValidSalt);\n    }\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrders(\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        public\n    {\n        require(\n            makerTokens.length == takerTokens.length &&\n            makerTokens.length == minValidSalts.length,\n            \"NativeOrdersFeature/MISMATCHED_PAIR_ORDERS_ARRAY_LENGTHS\"\n        );\n\n        for (uint256 i = 0; i < makerTokens.length; ++i) {\n            _cancelPairLimitOrders(\n                msg.sender,\n                makerTokens[i],\n                takerTokens[i],\n                minValidSalts[i]\n            );\n        }\n    }\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker the maker for whom the msg.sender is the signer.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrdersWithSigner(\n        address maker,\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        public\n    {\n        require(\n            makerTokens.length == takerTokens.length &&\n            makerTokens.length == minValidSalts.length,\n            \"NativeOrdersFeature/MISMATCHED_PAIR_ORDERS_ARRAY_LENGTHS\"\n        );\n\n        if (!isValidOrderSigner(maker, msg.sender)) {\n            LibNativeOrdersRichErrors.InvalidSignerError(\n                maker,\n                msg.sender\n            ).rrevert();\n        }\n\n        for (uint256 i = 0; i < makerTokens.length; ++i) {\n            _cancelPairLimitOrders(\n                maker,\n                makerTokens[i],\n                takerTokens[i],\n                minValidSalts[i]\n            );\n        }\n    }\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        public\n    {\n        _cancelPairRfqOrders(msg.sender, makerToken, takerToken, minValidSalt);\n    }\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker the maker for whom the msg.sender is the signer.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrdersWithSigner(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        public\n    {\n        if (!isValidOrderSigner(maker, msg.sender)) {\n            LibNativeOrdersRichErrors.InvalidSignerError(\n                maker,\n                msg.sender\n            ).rrevert();\n        }\n\n        _cancelPairRfqOrders(maker, makerToken, takerToken, minValidSalt);\n    }\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrders(\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        public\n    {\n        require(\n            makerTokens.length == takerTokens.length &&\n            makerTokens.length == minValidSalts.length,\n            \"NativeOrdersFeature/MISMATCHED_PAIR_ORDERS_ARRAY_LENGTHS\"\n        );\n\n        for (uint256 i = 0; i < makerTokens.length; ++i) {\n            _cancelPairRfqOrders(\n                msg.sender,\n                makerTokens[i],\n                takerTokens[i],\n                minValidSalts[i]\n            );\n        }\n    }\n\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker the maker for whom the msg.sender is the signer.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrdersWithSigner(\n        address maker,\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        public\n    {\n        require(\n            makerTokens.length == takerTokens.length &&\n            makerTokens.length == minValidSalts.length,\n            \"NativeOrdersFeature/MISMATCHED_PAIR_ORDERS_ARRAY_LENGTHS\"\n        );\n\n        if (!isValidOrderSigner(maker, msg.sender)) {\n            LibNativeOrdersRichErrors.InvalidSignerError(\n                maker,\n                msg.sender\n            ).rrevert();\n        }\n\n        for (uint256 i = 0; i < makerTokens.length; ++i) {\n            _cancelPairRfqOrders(\n                maker,\n                makerTokens[i],\n                takerTokens[i],\n                minValidSalts[i]\n            );\n        }\n    }\n\n    /// @dev Cancel a limit or RFQ order directly by its order hash.\n    /// @param orderHash The order's order hash.\n    /// @param maker The order's maker.\n    function _cancelOrderHash(bytes32 orderHash, address maker)\n        private\n    {\n        LibNativeOrdersStorage.Storage storage stor =\n            LibNativeOrdersStorage.getStorage();\n        // Set the high bit on the raw taker token fill amount to indicate\n        // a cancel. It's OK to cancel twice.\n        stor.orderHashToTakerTokenFilledAmount[orderHash] |= HIGH_BIT;\n\n        emit OrderCancelled(orderHash, maker);\n    }\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided.\n    /// @param maker The target maker address\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function _cancelPairRfqOrders(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        private\n    {\n        LibNativeOrdersStorage.Storage storage stor =\n            LibNativeOrdersStorage.getStorage();\n\n        uint256 oldMinValidSalt =\n            stor.rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\n                [maker]\n                [address(makerToken)]\n                [address(takerToken)];\n\n        // New min salt must >= the old one.\n        if (oldMinValidSalt > minValidSalt) {\n            LibNativeOrdersRichErrors.\n                CancelSaltTooLowError(minValidSalt, oldMinValidSalt)\n                    .rrevert();\n        }\n\n        stor.rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\n            [maker]\n            [address(makerToken)]\n            [address(takerToken)] = minValidSalt;\n\n        emit PairCancelledRfqOrders(\n            maker,\n            address(makerToken),\n            address(takerToken),\n            minValidSalt\n        );\n    }\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided.\n    /// @param maker The target maker address\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function _cancelPairLimitOrders(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        private\n    {\n        LibNativeOrdersStorage.Storage storage stor =\n            LibNativeOrdersStorage.getStorage();\n\n        uint256 oldMinValidSalt =\n            stor.limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\n                [maker]\n                [address(makerToken)]\n                [address(takerToken)];\n\n        // New min salt must >= the old one.\n        if (oldMinValidSalt > minValidSalt) {\n            LibNativeOrdersRichErrors.\n                CancelSaltTooLowError(minValidSalt, oldMinValidSalt)\n                    .rrevert();\n        }\n\n        stor.limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\n            [maker]\n            [address(makerToken)]\n            [address(takerToken)] = minValidSalt;\n\n        emit PairCancelledLimitOrders(\n            maker,\n            address(makerToken),\n            address(takerToken),\n            minValidSalt\n        );\n    }\n}\n"
        },
        "./native_orders/NativeOrdersInfo.sol": {
            "id": 16,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"../../fixins/FixinEIP712.sol\";\nimport \"../../fixins/FixinTokenSpender.sol\";\nimport \"../../storage/LibNativeOrdersStorage.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\n\n\n/// @dev Feature for getting info about limit and RFQ orders.\nabstract contract NativeOrdersInfo is\n    FixinEIP712,\n    FixinTokenSpender\n{\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    // @dev Params for `_getActualFillableTakerTokenAmount()`.\n    struct GetActualFillableTakerTokenAmountParams {\n        address maker;\n        IERC20TokenV06 makerToken;\n        uint128 orderMakerAmount;\n        uint128 orderTakerAmount;\n        LibNativeOrder.OrderInfo orderInfo;\n    }\n\n    /// @dev Highest bit of a uint256, used to flag cancelled orders.\n    uint256 private constant HIGH_BIT = 1 << 255;\n\n    constructor(\n        address zeroExAddress\n    )\n        internal\n        FixinEIP712(zeroExAddress)\n    {\n        // solhint-disable no-empty-blocks\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder memory order)\n        public\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo)\n    {\n        // Recover maker and compute order hash.\n        orderInfo.orderHash = getLimitOrderHash(order);\n        uint256 minValidSalt = LibNativeOrdersStorage.getStorage()\n            .limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\n                [order.maker]\n                [address(order.makerToken)]\n                [address(order.takerToken)];\n        _populateCommonOrderInfoFields(\n            orderInfo,\n            order.takerAmount,\n            order.expiry,\n            order.salt,\n            minValidSalt\n        );\n    }\n\n    /// @dev Get the order info for an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderInfo Info about the order.\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder memory order)\n        public\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo)\n    {\n        // Recover maker and compute order hash.\n        orderInfo.orderHash = getRfqOrderHash(order);\n        uint256 minValidSalt = LibNativeOrdersStorage.getStorage()\n            .rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\n                [order.maker]\n                [address(order.makerToken)]\n                [address(order.takerToken)];\n        _populateCommonOrderInfoFields(\n            orderInfo,\n            order.takerAmount,\n            order.expiry,\n            order.salt,\n            minValidSalt\n        );\n\n        // Check for missing txOrigin.\n        if (order.txOrigin == address(0)) {\n            orderInfo.status = LibNativeOrder.OrderStatus.INVALID;\n        }\n    }\n\n    /// @dev Get the canonical hash of a limit order.\n    /// @param order The limit order.\n    /// @return orderHash The order hash.\n    function getLimitOrderHash(LibNativeOrder.LimitOrder memory order)\n        public\n        view\n        returns (bytes32 orderHash)\n    {\n        return _getEIP712Hash(\n            LibNativeOrder.getLimitOrderStructHash(order)\n        );\n    }\n\n    /// @dev Get the canonical hash of an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderHash The order hash.\n    function getRfqOrderHash(LibNativeOrder.RfqOrder memory order)\n        public\n        view\n        returns (bytes32 orderHash)\n    {\n        return _getEIP712Hash(\n            LibNativeOrder.getRfqOrderStructHash(order)\n        );\n    }\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LibNativeOrder.LimitOrder memory order,\n        LibSignature.Signature calldata signature\n    )\n        public\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        )\n    {\n        orderInfo = getLimitOrderInfo(order);\n        actualFillableTakerTokenAmount = _getActualFillableTakerTokenAmount(\n            GetActualFillableTakerTokenAmountParams({\n                maker: order.maker,\n                makerToken: order.makerToken,\n                orderMakerAmount: order.makerAmount,\n                orderTakerAmount: order.takerAmount,\n                orderInfo: orderInfo\n            })\n        );\n        address signerOfHash = LibSignature.getSignerOfHash(orderInfo.orderHash, signature);\n        isSignatureValid =\n            (order.maker == signerOfHash) ||\n            isValidOrderSigner(order.maker, signerOfHash);\n    }\n\n    /// @dev Get order info, fillable amount, and signature validity for an RFQ order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getRfqOrderRelevantState(\n        LibNativeOrder.RfqOrder memory order,\n        LibSignature.Signature memory signature\n    )\n        public\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        )\n    {\n        orderInfo = getRfqOrderInfo(order);\n        actualFillableTakerTokenAmount = _getActualFillableTakerTokenAmount(\n            GetActualFillableTakerTokenAmountParams({\n                maker: order.maker,\n                makerToken: order.makerToken,\n                orderMakerAmount: order.makerAmount,\n                orderTakerAmount: order.takerAmount,\n                orderInfo: orderInfo\n            })\n        );\n        address signerOfHash = LibSignature.getSignerOfHash(orderInfo.orderHash, signature);\n        isSignatureValid =\n            (order.maker == signerOfHash) ||\n            isValidOrderSigner(order.maker, signerOfHash);\n    }\n\n    /// @dev Batch version of `getLimitOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getLimitOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The limit orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetLimitOrderRelevantStates(\n        LibNativeOrder.LimitOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        )\n    {\n        require(\n            orders.length == signatures.length,\n            \"NativeOrdersFeature/MISMATCHED_ARRAY_LENGTHS\"\n        );\n        orderInfos = new LibNativeOrder.OrderInfo[](orders.length);\n        actualFillableTakerTokenAmounts = new uint128[](orders.length);\n        isSignatureValids = new bool[](orders.length);\n        for (uint256 i = 0; i < orders.length; ++i) {\n            try\n                this.getLimitOrderRelevantState(orders[i], signatures[i])\n                    returns (\n                        LibNativeOrder.OrderInfo memory orderInfo,\n                        uint128 actualFillableTakerTokenAmount,\n                        bool isSignatureValid\n                    )\n            {\n                orderInfos[i] = orderInfo;\n                actualFillableTakerTokenAmounts[i] = actualFillableTakerTokenAmount;\n                isSignatureValids[i] = isSignatureValid;\n            }\n            catch {}\n        }\n    }\n\n    /// @dev Batch version of `getRfqOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getRfqOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The RFQ orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetRfqOrderRelevantStates(\n        LibNativeOrder.RfqOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        )\n    {\n        require(\n            orders.length == signatures.length,\n            \"NativeOrdersFeature/MISMATCHED_ARRAY_LENGTHS\"\n        );\n        orderInfos = new LibNativeOrder.OrderInfo[](orders.length);\n        actualFillableTakerTokenAmounts = new uint128[](orders.length);\n        isSignatureValids = new bool[](orders.length);\n        for (uint256 i = 0; i < orders.length; ++i) {\n            try\n                this.getRfqOrderRelevantState(orders[i], signatures[i])\n                    returns (\n                        LibNativeOrder.OrderInfo memory orderInfo,\n                        uint128 actualFillableTakerTokenAmount,\n                        bool isSignatureValid\n                    )\n            {\n                orderInfos[i] = orderInfo;\n                actualFillableTakerTokenAmounts[i] = actualFillableTakerTokenAmount;\n                isSignatureValids[i] = isSignatureValid;\n            }\n            catch {}\n        }\n    }\n\n    /// @dev Populate `status` and `takerTokenFilledAmount` fields in\n    ///      `orderInfo`, which use the same code path for both limit and\n    ///      RFQ orders.\n    /// @param orderInfo `OrderInfo` with `orderHash` and `maker` filled.\n    /// @param takerAmount The order's taker token amount..\n    /// @param expiry The order's expiry.\n    /// @param salt The order's salt.\n    /// @param salt The minimum valid salt for the maker and pair combination.\n    function _populateCommonOrderInfoFields(\n        LibNativeOrder.OrderInfo memory orderInfo,\n        uint128 takerAmount,\n        uint64 expiry,\n        uint256 salt,\n        uint256 minValidSalt\n    )\n        private\n        view\n    {\n        LibNativeOrdersStorage.Storage storage stor =\n            LibNativeOrdersStorage.getStorage();\n\n        // Get the filled and direct cancel state.\n        {\n            // The high bit of the raw taker token filled amount will be set\n            // if the order was cancelled.\n            uint256 rawTakerTokenFilledAmount =\n                stor.orderHashToTakerTokenFilledAmount[orderInfo.orderHash];\n            orderInfo.takerTokenFilledAmount = uint128(rawTakerTokenFilledAmount);\n            if (orderInfo.takerTokenFilledAmount >= takerAmount) {\n                orderInfo.status = LibNativeOrder.OrderStatus.FILLED;\n                return;\n            }\n            if (rawTakerTokenFilledAmount & HIGH_BIT != 0) {\n                orderInfo.status = LibNativeOrder.OrderStatus.CANCELLED;\n                return;\n            }\n        }\n\n        // Check for expiration.\n        if (expiry <= uint64(block.timestamp)) {\n            orderInfo.status = LibNativeOrder.OrderStatus.EXPIRED;\n            return;\n        }\n\n        // Check if the order was cancelled by salt.\n        if (minValidSalt > salt) {\n            orderInfo.status = LibNativeOrder.OrderStatus.CANCELLED;\n            return;\n        }\n        orderInfo.status = LibNativeOrder.OrderStatus.FILLABLE;\n    }\n\n    /// @dev Calculate the actual fillable taker token amount of an order\n    ///      based on maker allowance and balances.\n    function _getActualFillableTakerTokenAmount(\n        GetActualFillableTakerTokenAmountParams memory params\n    )\n        private\n        view\n        returns (uint128 actualFillableTakerTokenAmount)\n    {\n        if (params.orderMakerAmount == 0 || params.orderTakerAmount == 0) {\n            // Empty order.\n            return 0;\n        }\n        if (params.orderInfo.status != LibNativeOrder.OrderStatus.FILLABLE) {\n            // Not fillable.\n            return 0;\n        }\n\n        // Get the fillable maker amount based on the order quantities and\n        // previously filled amount\n        uint256 fillableMakerTokenAmount = LibMathV06.getPartialAmountFloor(\n            uint256(\n                params.orderTakerAmount\n                - params.orderInfo.takerTokenFilledAmount\n            ),\n            uint256(params.orderTakerAmount),\n            uint256(params.orderMakerAmount)\n        );\n        // Clamp it to the amount of maker tokens we can spend on behalf of the\n        // maker.\n        fillableMakerTokenAmount = LibSafeMathV06.min256(\n            fillableMakerTokenAmount,\n            _getSpendableERC20BalanceOf(params.makerToken, params.maker)\n        );\n        // Convert to taker token amount.\n        return LibMathV06.getPartialAmountCeil(\n            fillableMakerTokenAmount,\n            uint256(params.orderMakerAmount),\n            uint256(params.orderTakerAmount)\n        ).safeDowncastToUint128();\n    }\n\n    /// @dev checks if a given address is registered to sign on behalf of a maker address\n    /// @param maker The maker address encoded in an order (can be a contract)\n    /// @param signer The address that is providing a signature\n    function isValidOrderSigner(\n        address maker,\n        address signer\n    )\n        public\n        view\n        returns (bool isValid)\n    {\n        // returns false if it the mapping doesn't exist\n        return LibNativeOrdersStorage.getStorage()\n            .orderSignerRegistry\n                [maker]\n                [signer];\n    }\n}\n"
        },
        "../fixins/FixinEIP712.sol": {
            "id": 20,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\n/// @dev EIP712 helpers for features.\nabstract contract FixinEIP712 {\n\n    /// @dev The domain hash separator for the entire exchange proxy.\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\n\n    constructor(address zeroExAddress) internal {\n        // Compute `EIP712_DOMAIN_SEPARATOR`\n        {\n            uint256 chainId;\n            assembly { chainId := chainid() }\n            EIP712_DOMAIN_SEPARATOR = keccak256(\n                abi.encode(\n                    keccak256(\n                        \"EIP712Domain(\"\n                            \"string name,\"\n                            \"string version,\"\n                            \"uint256 chainId,\"\n                            \"address verifyingContract\"\n                        \")\"\n                    ),\n                    keccak256(\"ZeroEx\"),\n                    keccak256(\"1.0.0\"),\n                    chainId,\n                    zeroExAddress\n                )\n            );\n        }\n    }\n\n    function _getEIP712Hash(bytes32 structHash)\n        internal\n        view\n        returns (bytes32 eip712Hash)\n    {\n        return keccak256(abi.encodePacked(\n            hex\"1901\",\n            EIP712_DOMAIN_SEPARATOR,\n            structHash\n        ));\n    }\n}\n"
        },
        "../fixins/FixinTokenSpender.sol": {
            "id": 22,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\n/// @dev Helpers for moving tokens around.\nabstract contract FixinTokenSpender {\n\n    // Mask of the lower 20 bytes of a bytes32.\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\n\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _transferERC20TokensFrom(\n        IERC20TokenV06 token,\n        address owner,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        require(address(token) != address(this), \"FixinTokenSpender/CANNOT_INVOKE_SELF\");\n\n        assembly {\n            let ptr := mload(0x40) // free memory pointer\n\n            // selector for transferFrom(address,address,uint256)\n            mstore(ptr, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(ptr, 0x04), and(owner, ADDRESS_MASK))\n            mstore(add(ptr, 0x24), and(to, ADDRESS_MASK))\n            mstore(add(ptr, 0x44), amount)\n\n            let success := call(\n                gas(),\n                and(token, ADDRESS_MASK),\n                0,\n                ptr,\n                0x64,\n                ptr,\n                32\n            )\n\n            let rdsize := returndatasize()\n\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\n            // but some don't. We accept 0-length return data as success, or at\n            // least 32 bytes that starts with a 32-byte boolean true.\n            success := and(\n                success,                             // call itself succeeded\n                or(\n                    iszero(rdsize),                  // no return data, or\n                    and(\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\n                        eq(mload(ptr), 1)            // starts with uint256(1)\n                    )\n                )\n            )\n\n            if iszero(success) {\n                returndatacopy(ptr, 0, rdsize)\n                revert(ptr, rdsize)\n            }\n        }\n    }\n\n    /// @dev Transfers ERC20 tokens from ourselves to `to`.\n    /// @param token The token to spend.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _transferERC20Tokens(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        require(address(token) != address(this), \"FixinTokenSpender/CANNOT_INVOKE_SELF\");\n\n        assembly {\n            let ptr := mload(0x40) // free memory pointer\n\n            // selector for transfer(address,uint256)\n            mstore(ptr, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(ptr, 0x04), and(to, ADDRESS_MASK))\n            mstore(add(ptr, 0x24), amount)\n\n            let success := call(\n                gas(),\n                and(token, ADDRESS_MASK),\n                0,\n                ptr,\n                0x44,\n                ptr,\n                32\n            )\n\n            let rdsize := returndatasize()\n\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\n            // but some don't. We accept 0-length return data as success, or at\n            // least 32 bytes that starts with a 32-byte boolean true.\n            success := and(\n                success,                             // call itself succeeded\n                or(\n                    iszero(rdsize),                  // no return data, or\n                    and(\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\n                        eq(mload(ptr), 1)            // starts with uint256(1)\n                    )\n                )\n            )\n\n            if iszero(success) {\n                returndatacopy(ptr, 0, rdsize)\n                revert(ptr, rdsize)\n            }\n        }\n    }\n\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\n    ///      pulled from `owner` by this address.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @return amount The amount of tokens that can be pulled.\n    function _getSpendableERC20BalanceOf(\n        IERC20TokenV06 token,\n        address owner\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        return LibSafeMathV06.min256(\n            token.allowance(owner, address(this)),\n            token.balanceOf(owner)\n        );\n    }\n}\n"
        },
        "./native_orders/NativeOrdersProtocolFees.sol": {
            "id": 17,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../fixins/FixinProtocolFees.sol\";\nimport \"../../errors/LibNativeOrdersRichErrors.sol\";\nimport \"../../vendor/v3/IStaking.sol\";\n\n\n/// @dev Mixin for protocol fee utility functions.\nabstract contract NativeOrdersProtocolFees is\n    FixinProtocolFees\n{\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    constructor(\n        IEtherTokenV06 weth,\n        IStaking staking,\n        FeeCollectorController feeCollectorController,\n        uint32 protocolFeeMultiplier\n    )\n        internal\n        FixinProtocolFees(weth, staking, feeCollectorController, protocolFeeMultiplier)\n    {\n        // solhint-disable no-empty-blocks\n    }\n\n    /// @dev Transfers protocol fees from the `FeeCollector` pools into\n    ///      the staking contract.\n    /// @param poolIds Staking pool IDs\n    function transferProtocolFeesForPools(bytes32[] calldata poolIds)\n        external\n    {\n        for (uint256 i = 0; i < poolIds.length; ++i) {\n            _transferFeesForPool(poolIds[i]);\n        }\n    }\n\n    /// @dev Get the protocol fee multiplier. This should be multiplied by the\n    ///      gas price to arrive at the required protocol fee to fill a native order.\n    /// @return multiplier The protocol fee multiplier.\n    function getProtocolFeeMultiplier()\n        external\n        view\n        returns (uint32 multiplier)\n    {\n        return PROTOCOL_FEE_MULTIPLIER;\n    }\n}\n"
        },
        "../fixins/FixinProtocolFees.sol": {
            "id": 21,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../external/FeeCollector.sol\";\nimport \"../external/FeeCollectorController.sol\";\nimport \"../external/LibFeeCollector.sol\";\nimport \"../vendor/v3/IStaking.sol\";\n\n\n/// @dev Helpers for collecting protocol fees.\nabstract contract FixinProtocolFees {\n\n    /// @dev The protocol fee multiplier.\n    uint32 public immutable PROTOCOL_FEE_MULTIPLIER;\n    /// @dev The `FeeCollectorController` contract.\n    FeeCollectorController private immutable FEE_COLLECTOR_CONTROLLER;\n    /// @dev Hash of the fee collector init code.\n    bytes32 private immutable FEE_COLLECTOR_INIT_CODE_HASH;\n    /// @dev The WETH token contract.\n    IEtherTokenV06 private immutable WETH;\n    /// @dev The staking contract.\n    IStaking private immutable STAKING;\n\n    constructor(\n        IEtherTokenV06 weth,\n        IStaking staking,\n        FeeCollectorController feeCollectorController,\n        uint32 protocolFeeMultiplier\n    )\n        internal\n    {\n        FEE_COLLECTOR_CONTROLLER = feeCollectorController;\n        FEE_COLLECTOR_INIT_CODE_HASH =\n            feeCollectorController.FEE_COLLECTOR_INIT_CODE_HASH();\n        WETH = weth;\n        STAKING = staking;\n        PROTOCOL_FEE_MULTIPLIER = protocolFeeMultiplier;\n    }\n\n    /// @dev   Collect the specified protocol fee in ETH.\n    ///        The fee is stored in a per-pool fee collector contract.\n    /// @param poolId The pool ID for which a fee is being collected.\n    /// @return ethProtocolFeePaid How much protocol fee was collected in ETH.\n    function _collectProtocolFee(bytes32 poolId)\n        internal\n        returns (uint256 ethProtocolFeePaid)\n    {\n        uint256 protocolFeePaid = _getSingleProtocolFee();\n        if (protocolFeePaid == 0) {\n            // Nothing to do.\n            return 0;\n        }\n        FeeCollector feeCollector = _getFeeCollector(poolId);\n        (bool success,) = address(feeCollector).call{value: protocolFeePaid}(\"\");\n        require(success, \"FixinProtocolFees/ETHER_TRANSFER_FALIED\");\n        return protocolFeePaid;\n    }\n\n    /// @dev Transfer fees for a given pool to the staking contract.\n    /// @param poolId Identifies the pool whose fees are being paid.\n    function _transferFeesForPool(bytes32 poolId)\n        internal\n    {\n        // This will create a FeeCollector contract (if necessary) and wrap\n        // fees for the pool ID.\n        FeeCollector feeCollector =\n            FEE_COLLECTOR_CONTROLLER.prepareFeeCollectorToPayFees(poolId);\n        // All fees in the fee collector should be in WETH now.\n        uint256 bal = WETH.balanceOf(address(feeCollector));\n        if (bal > 1) {\n            // Leave 1 wei behind to avoid high SSTORE cost of zero-->non-zero.\n            STAKING.payProtocolFee(\n                address(feeCollector),\n                address(feeCollector),\n                bal - 1);\n        }\n    }\n\n    /// @dev Compute the CREATE2 address for a fee collector.\n    /// @param poolId The fee collector's pool ID.\n    function _getFeeCollector(bytes32 poolId)\n        internal\n        view\n        returns (FeeCollector)\n    {\n        return FeeCollector(LibFeeCollector.getFeeCollectorAddress(\n            address(FEE_COLLECTOR_CONTROLLER),\n            FEE_COLLECTOR_INIT_CODE_HASH,\n            poolId\n        ));\n    }\n\n    /// @dev Get the cost of a single protocol fee.\n    /// @return protocolFeeAmount The protocol fee amount, in ETH/WETH.\n    function _getSingleProtocolFee()\n        internal\n        view\n        returns (uint256 protocolFeeAmount)\n    {\n        return uint256(PROTOCOL_FEE_MULTIPLIER) * tx.gasprice;\n    }\n}\n"
        },
        "../external/FeeCollector.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/AuthorizableV06.sol\";\nimport \"../vendor/v3/IStaking.sol\";\n\n/// @dev The collector contract for protocol fees\ncontract FeeCollector is AuthorizableV06 {\n    /// @dev Allow ether transfers to the collector.\n    receive() external payable { }\n\n    constructor() public {\n        _addAuthorizedAddress(msg.sender);\n    }\n\n    /// @dev   Approve the staking contract and join a pool. Only an authority\n    ///        can call this.\n    /// @param weth The WETH contract.\n    /// @param staking The staking contract.\n    /// @param poolId The pool ID this contract is collecting fees for.\n    function initialize(\n        IEtherTokenV06 weth,\n        IStaking staking,\n        bytes32 poolId\n    )\n        external\n        onlyAuthorized\n    {\n        weth.approve(address(staking), type(uint256).max);\n        staking.joinStakingPoolAsMaker(poolId);\n    }\n\n    /// @dev Convert all held ether to WETH. Only an authority can call this.\n    /// @param weth The WETH contract.\n    function convertToWeth(\n        IEtherTokenV06 weth\n    )\n        external\n        onlyAuthorized\n    {\n        if (address(this).balance > 0) {\n            weth.deposit{value: address(this).balance}();\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/AuthorizableV06.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./interfaces/IAuthorizableV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibAuthorizableRichErrorsV06.sol\";\nimport \"./OwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract AuthorizableV06 is\n    OwnableV06,\n    IAuthorizableV06\n{\n    /// @dev Only authorized addresses can invoke functions with this modifier.\n    modifier onlyAuthorized {\n        _assertSenderIsAuthorized();\n        _;\n    }\n\n    // @dev Whether an address is authorized to call privileged functions.\n    // @param 0 Address to query.\n    // @return 0 Whether the address is authorized.\n    mapping (address => bool) public override authorized;\n    // @dev Whether an address is authorized to call privileged functions.\n    // @param 0 Index of authorized address.\n    // @return 0 Authorized address.\n    address[] public override authorities;\n\n    /// @dev Initializes the `owner` address.\n    constructor()\n        public\n        OwnableV06()\n    {}\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        _addAuthorizedAddress(target);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        if (!authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\n        }\n        for (uint256 i = 0; i < authorities.length; i++) {\n            if (authorities[i] == target) {\n                _removeAuthorizedAddressAtIndex(target, i);\n                break;\n            }\n        }\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external\n        override\n        onlyOwner\n    {\n        _removeAuthorizedAddressAtIndex(target, index);\n    }\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        override\n        view\n        returns (address[] memory)\n    {\n        return authorities;\n    }\n\n    /// @dev Reverts if msg.sender is not authorized.\n    function _assertSenderIsAuthorized()\n        internal\n        view\n    {\n        if (!authorized[msg.sender]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.SenderNotAuthorizedError(msg.sender));\n        }\n    }\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function _addAuthorizedAddress(address target)\n        internal\n    {\n        // Ensure that the target is not the zero address.\n        if (target == address(0)) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.ZeroCantBeAuthorizedError());\n        }\n\n        // Ensure that the target is not already authorized.\n        if (authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetAlreadyAuthorizedError(target));\n        }\n\n        authorized[target] = true;\n        authorities.push(target);\n        emit AuthorizedAddressAdded(target, msg.sender);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function _removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        internal\n    {\n        if (!authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\n        }\n        if (index >= authorities.length) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.IndexOutOfBoundsError(\n                index,\n                authorities.length\n            ));\n        }\n        if (authorities[index] != target) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.AuthorizedAddressMismatchError(\n                authorities[index],\n                target\n            ));\n        }\n\n        delete authorized[target];\n        authorities[index] = authorities[authorities.length - 1];\n        authorities.pop();\n        emit AuthorizedAddressRemoved(target, msg.sender);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/interfaces/IAuthorizableV06.sol": {
            "id": 38,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IOwnableV06.sol\";\n\n\ninterface IAuthorizableV06 is\n    IOwnableV06\n{\n    // Event logged when a new address is authorized.\n    event AuthorizedAddressAdded(\n        address indexed target,\n        address indexed caller\n    );\n\n    // Event logged when a currently authorized address is unauthorized.\n    event AuthorizedAddressRemoved(\n        address indexed target,\n        address indexed caller\n    );\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n\n    /// @dev Gets all authorized addresses.\n    /// @return authorizedAddresses Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory authorizedAddresses);\n\n    /// @dev Whether an adderss is authorized to call privileged functions.\n    /// @param addr Address to query.\n    /// @return isAuthorized Whether the address is authorized.\n    function authorized(address addr) external view returns (bool isAuthorized);\n\n    /// @dev All addresseses authorized to call privileged functions.\n    /// @param idx Index of authorized address.\n    /// @return addr Authorized address.\n    function authorities(uint256 idx) external view returns (address addr);\n\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/IOwnableV06.sol": {
            "id": 39,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibAuthorizableRichErrorsV06.sol": {
            "id": 33,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibAuthorizableRichErrorsV06 {\n\n    // bytes4(keccak256(\"AuthorizedAddressMismatchError(address,address)\"))\n    bytes4 internal constant AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR =\n        0x140a84db;\n\n    // bytes4(keccak256(\"IndexOutOfBoundsError(uint256,uint256)\"))\n    bytes4 internal constant INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR =\n        0xe9f83771;\n\n    // bytes4(keccak256(\"SenderNotAuthorizedError(address)\"))\n    bytes4 internal constant SENDER_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xb65a25b9;\n\n    // bytes4(keccak256(\"TargetAlreadyAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR =\n        0xde16f1a0;\n\n    // bytes4(keccak256(\"TargetNotAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xeb5108a2;\n\n    // bytes4(keccak256(\"ZeroCantBeAuthorizedError()\"))\n    bytes internal constant ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES =\n        hex\"57654fe4\";\n\n    // solhint-disable func-name-mixedcase\n    function AuthorizedAddressMismatchError(\n        address authorized,\n        address target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR,\n            authorized,\n            target\n        );\n    }\n\n    function IndexOutOfBoundsError(\n        uint256 index,\n        uint256 length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR,\n            index,\n            length\n        );\n    }\n\n    function SenderNotAuthorizedError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SENDER_NOT_AUTHORIZED_ERROR_SELECTOR,\n            sender\n        );\n    }\n\n    function TargetAlreadyAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function TargetNotAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_NOT_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function ZeroCantBeAuthorizedError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/OwnableV06.sol": {
            "id": 32,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./interfaces/IOwnableV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibOwnableRichErrorsV06.sol\";\n\n\ncontract OwnableV06 is\n    IOwnableV06\n{\n    /// @dev The owner of this contract.\n    /// @return 0 The owner address.\n    address public override owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    /// @dev Change the owner of this contract.\n    /// @param newOwner New owner address.\n    function transferOwnership(address newOwner)\n        public\n        override\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.TransferOwnerToZeroError());\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.OnlyOwnerError(\n                msg.sender,\n                owner\n            ));\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibOwnableRichErrorsV06.sol": {
            "id": 35,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrorsV06 {\n\n    // bytes4(keccak256(\"OnlyOwnerError(address,address)\"))\n    bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =\n        0x1de45ad1;\n\n    // bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n    bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =\n        hex\"e69edc3e\";\n\n    // solhint-disable func-name-mixedcase\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_OWNER_ERROR_SELECTOR,\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;\n    }\n}\n"
        },
        "../external/FeeCollectorController.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../vendor/v3/IStaking.sol\";\nimport \"./FeeCollector.sol\";\nimport \"./LibFeeCollector.sol\";\n\n\n/// @dev A contract that manages `FeeCollector` contracts.\ncontract FeeCollectorController {\n\n    /// @dev Hash of the fee collector init code.\n    bytes32 public immutable FEE_COLLECTOR_INIT_CODE_HASH;\n    /// @dev The WETH contract.\n    IEtherTokenV06 private immutable WETH;\n    /// @dev The staking contract.\n    IStaking private immutable STAKING;\n\n    constructor(\n        IEtherTokenV06 weth,\n        IStaking staking\n    )\n        public\n    {\n        FEE_COLLECTOR_INIT_CODE_HASH = keccak256(type(FeeCollector).creationCode);\n        WETH = weth;\n        STAKING = staking;\n    }\n\n    /// @dev Deploy (if needed) a `FeeCollector` contract for `poolId`\n    ///      and wrap its ETH into WETH. Anyone may call this.\n    /// @param poolId The pool ID associated with the staking pool.\n    /// @return feeCollector The `FeeCollector` contract instance.\n    function prepareFeeCollectorToPayFees(bytes32 poolId)\n        external\n        returns (FeeCollector feeCollector)\n    {\n        feeCollector = getFeeCollector(poolId);\n        uint256 codeSize;\n        assembly {\n            codeSize := extcodesize(feeCollector)\n        }\n\n        if (codeSize == 0) {\n            // Create and initialize the contract if necessary.\n            new FeeCollector{salt: bytes32(poolId)}();\n            feeCollector.initialize(WETH, STAKING, poolId);\n        }\n\n        if (address(feeCollector).balance > 1) {\n            feeCollector.convertToWeth(WETH);\n        }\n\n        return feeCollector;\n    }\n\n    /// @dev Get the `FeeCollector` contract for a given pool ID. The contract\n    ///      will not actually exist until `prepareFeeCollectorToPayFees()`\n    ///      has been called once.\n    /// @param poolId The pool ID associated with the staking pool.\n    /// @return feeCollector The `FeeCollector` contract instance.\n    function getFeeCollector(bytes32 poolId)\n        public\n        view\n        returns (FeeCollector feeCollector)\n    {\n        return FeeCollector(LibFeeCollector.getFeeCollectorAddress(\n            address(this),\n            FEE_COLLECTOR_INIT_CODE_HASH,\n            poolId\n        ));\n    }\n}\n"
        },
        "../external/LibFeeCollector.sol": {
            "id": 6,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Helpers for computing `FeeCollector` contract addresses.\nlibrary LibFeeCollector {\n\n    /// @dev Compute the CREATE2 address for a fee collector.\n    /// @param controller The address of the `FeeCollectorController` contract.\n    /// @param initCodeHash The init code hash of the `FeeCollector` contract.\n    /// @param poolId The fee collector's pool ID.\n    function getFeeCollectorAddress(address controller, bytes32 initCodeHash, bytes32 poolId)\n        internal\n        pure\n        returns (address payable feeCollectorAddress)\n    {\n        // Compute the CREATE2 address for the fee collector.\n        return address(uint256(keccak256(abi.encodePacked(\n            byte(0xff),\n            controller,\n            poolId, // pool ID is salt\n            initCodeHash\n        ))));\n    }\n}\n"
        }
    },
    "sourceCodes": {
        "./NativeOrdersFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"../migrations/LibMigrate.sol\";\nimport \"./interfaces/IFeature.sol\";\nimport \"./interfaces/INativeOrdersFeature.sol\";\nimport \"./native_orders/NativeOrdersSettlement.sol\";\n\n\n/// @dev Feature for interacting with limit and RFQ orders.\ncontract NativeOrdersFeature is\n    IFeature,\n    NativeOrdersSettlement\n{\n    /// @dev Name of this feature.\n    string public constant override FEATURE_NAME = \"LimitOrders\";\n    /// @dev Version of this feature.\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 3, 0);\n\n    constructor(\n        address zeroExAddress,\n        IEtherTokenV06 weth,\n        IStaking staking,\n        FeeCollectorController feeCollectorController,\n        uint32 protocolFeeMultiplier\n    )\n        public\n        NativeOrdersSettlement(\n            zeroExAddress,\n            weth,\n            staking,\n            feeCollectorController,\n            protocolFeeMultiplier\n        )\n    {\n        // solhint-disable no-empty-blocks\n    }\n\n    /// @dev Initialize and register this feature.\n    ///      Should be delegatecalled by `Migrate.migrate()`.\n    /// @return success `LibMigrate.SUCCESS` on success.\n    function migrate()\n        external\n        returns (bytes4 success)\n    {\n        _registerFeatureFunction(this.transferProtocolFeesForPools.selector);\n        _registerFeatureFunction(this.fillLimitOrder.selector);\n        _registerFeatureFunction(this.fillRfqOrder.selector);\n        _registerFeatureFunction(this.fillOrKillLimitOrder.selector);\n        _registerFeatureFunction(this.fillOrKillRfqOrder.selector);\n        _registerFeatureFunction(this._fillLimitOrder.selector);\n        _registerFeatureFunction(this._fillRfqOrder.selector);\n        _registerFeatureFunction(this.cancelLimitOrder.selector);\n        _registerFeatureFunction(this.cancelRfqOrder.selector);\n        _registerFeatureFunction(this.batchCancelLimitOrders.selector);\n        _registerFeatureFunction(this.batchCancelRfqOrders.selector);\n        _registerFeatureFunction(this.cancelPairLimitOrders.selector);\n        _registerFeatureFunction(this.cancelPairLimitOrdersWithSigner.selector);\n        _registerFeatureFunction(this.batchCancelPairLimitOrders.selector);\n        _registerFeatureFunction(this.batchCancelPairLimitOrdersWithSigner.selector);\n        _registerFeatureFunction(this.cancelPairRfqOrders.selector);\n        _registerFeatureFunction(this.cancelPairRfqOrdersWithSigner.selector);\n        _registerFeatureFunction(this.batchCancelPairRfqOrders.selector);\n        _registerFeatureFunction(this.batchCancelPairRfqOrdersWithSigner.selector);\n        _registerFeatureFunction(this.getLimitOrderInfo.selector);\n        _registerFeatureFunction(this.getRfqOrderInfo.selector);\n        _registerFeatureFunction(this.getLimitOrderHash.selector);\n        _registerFeatureFunction(this.getRfqOrderHash.selector);\n        _registerFeatureFunction(this.getProtocolFeeMultiplier.selector);\n        _registerFeatureFunction(this.registerAllowedRfqOrigins.selector);\n        _registerFeatureFunction(this.getLimitOrderRelevantState.selector);\n        _registerFeatureFunction(this.getRfqOrderRelevantState.selector);\n        _registerFeatureFunction(this.batchGetLimitOrderRelevantStates.selector);\n        _registerFeatureFunction(this.batchGetRfqOrderRelevantStates.selector);\n        _registerFeatureFunction(this.registerAllowedOrderSigner.selector);\n        _registerFeatureFunction(this.isValidOrderSigner.selector);\n        return LibMigrate.MIGRATE_SUCCESS;\n    }\n}\n",
        "../migrations/LibMigrate.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\nlibrary LibMigrate {\n\n    /// @dev Magic bytes returned by a migrator to indicate success.\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\n    /// @param target The call target.\n    /// @param data The call data.\n    function delegatecallMigrateFunction(\n        address target,\n        bytes memory data\n    )\n        internal\n    {\n        (bool success, bytes memory resultData) = target.delegatecall(data);\n        if (!success ||\n            resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\n        {\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "../errors/LibOwnableRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOwnerError(address,address)\")),\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n        );\n    }\n\n    function MigrateCallFailedError(address target, bytes memory resultData)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MigrateCallFailedError(address,bytes)\")),\n            target,\n            resultData\n        );\n    }\n}\n",
        "./interfaces/IFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic interface for a feature contract.\ninterface IFeature {\n\n    // solhint-disable func-name-mixedcase\n\n    /// @dev The name of this feature set.\n    function FEATURE_NAME() external view returns (string memory name);\n\n    /// @dev The version of this feature set.\n    function FEATURE_VERSION() external view returns (uint256 version);\n}\n",
        "./interfaces/INativeOrdersFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\nimport \"./INativeOrdersEvents.sol\";\n\n\n/// @dev Feature for interacting with limit orders.\ninterface INativeOrdersFeature is\n    INativeOrdersEvents\n{\n\n    /// @dev Transfers protocol fees from the `FeeCollector` pools into\n    ///      the staking contract.\n    /// @param poolIds Staking pool IDs\n    function transferProtocolFeesForPools(bytes32[] calldata poolIds)\n        external;\n\n    /// @dev Fill a limit order. The taker and sender will be the caller.\n    /// @param order The limit order. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        payable\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 makerTokenFilledAmount);\n\n    /// @dev Fill a limit order. Internal variant. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      `msg.sender` (not `sender`).\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param sender The order sender.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillLimitOrder(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        address sender\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an RFQ order. Internal variant.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param useSelfBalance Whether to use the ExchangeProxy's transient\n    ///        balance of taker tokens to fill the order.\n    /// @param recipient The recipient of the maker tokens.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillRfqOrder(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        bool useSelfBalance,\n        address recipient\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Cancel a single limit order. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The limit order.\n    function cancelLimitOrder(LibNativeOrder.LimitOrder calldata order)\n        external;\n\n    /// @dev Cancel a single RFQ order. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The RFQ order.\n    function cancelRfqOrder(LibNativeOrder.RfqOrder calldata order)\n        external;\n\n    /// @dev Mark what tx.origin addresses are allowed to fill an order that\n    ///      specifies the message sender as its txOrigin.\n    /// @param origins An array of origin addresses to update.\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedRfqOrigins(address[] memory origins, bool allowed)\n        external;\n\n    /// @dev Cancel multiple limit orders. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The limit orders.\n    function batchCancelLimitOrders(LibNativeOrder.LimitOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel multiple RFQ orders. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The RFQ orders.\n    function batchCancelRfqOrders(LibNativeOrder.RfqOrder[] calldata orders)\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrdersWithSigner(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all limit orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrdersWithSigner(\n        address maker,\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrdersWithSigner(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrders(\n        IERC20TokenV06[] calldata makerTokens,\n        IERC20TokenV06[] calldata takerTokens,\n        uint256[] calldata minValidSalts\n    )\n        external;\n\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same maker and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker The maker for which to cancel.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrdersWithSigner(\n        address maker,\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        external;\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the order info for an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderInfo Info about the order.\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo);\n\n    /// @dev Get the canonical hash of a limit order.\n    /// @param order The limit order.\n    /// @return orderHash The order hash.\n    function getLimitOrderHash(LibNativeOrder.LimitOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the canonical hash of an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderHash The order hash.\n    function getRfqOrderHash(LibNativeOrder.RfqOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the protocol fee multiplier. This should be multiplied by the\n    ///      gas price to arrive at the required protocol fee to fill a native order.\n    /// @return multiplier The protocol fee multiplier.\n    function getProtocolFeeMultiplier()\n        external\n        view\n        returns (uint32 multiplier);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LibNativeOrder.LimitOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Get order info, fillable amount, and signature validity for an RFQ order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getRfqOrderRelevantState(\n        LibNativeOrder.RfqOrder calldata order,\n        LibSignature.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n\n    /// @dev Batch version of `getLimitOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getLimitOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The limit orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetLimitOrderRelevantStates(\n        LibNativeOrder.LimitOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n\n    /// @dev Batch version of `getRfqOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getRfqOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The RFQ orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetRfqOrderRelevantStates(\n        LibNativeOrder.RfqOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        );\n\n    /// @dev Register a signer who can sign on behalf of msg.sender\n    ///      This allows one to sign on behalf of a contract that calls this function\n    /// @param signer The address from which you plan to generate signatures\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedOrderSigner(\n        address signer,\n        bool allowed\n    )\n        external;\n\n    /// @dev checks if a given address is registered to sign on behalf of a maker address\n    /// @param maker The maker address encoded in an order (can be a contract)\n    /// @param signer The address that is providing a signature\n    function isValidOrderSigner(\n        address maker,\n        address signer\n    )\n        external\n        view\n        returns (bool isAllowed);\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "./libs/LibSignature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../../errors/LibSignatureRichErrors.sol\";\n\n\n/// @dev A library for validating signatures.\nlibrary LibSignature {\n    using LibRichErrorsV06 for bytes;\n\n    // '\\x19Ethereum Signed Message:\\n32\\x00\\x00\\x00\\x00' in a word.\n    uint256 private constant ETH_SIGN_HASH_PREFIX =\n        0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\n    ///      The valid range is given by fig (282) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\n    ///      The valid range is given by fig (283) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Retrieve the signer of a signature.\n    ///      Throws if the signature can't be validated.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    /// @return recovered The recovered signer address.\n    function getSignerOfHash(\n        bytes32 hash,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address recovered)\n    {\n        // Ensure this is a signature type that can be validated against a hash.\n        _validateHashCompatibleSignature(hash, signature);\n\n        if (signature.signatureType == SignatureType.EIP712) {\n            // Signed using EIP712\n            recovered = ecrecover(\n                hash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\n            // Signed using `eth_sign`\n            // Need to hash `hash` with \"\\x19Ethereum Signed Message:\\n32\" prefix\n            // in packed encoding.\n            bytes32 ethSignHash;\n            assembly {\n                // Use scratch space\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\n                mstore(28, hash) // length of 32 bytes\n                ethSignHash := keccak256(0, 60)\n            }\n            recovered = ecrecover(\n                ethSignHash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        }\n        // `recovered` can be null if the signature values are out of range.\n        if (recovered == address(0)) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n    }\n\n    /// @dev Validates that a signature is compatible with a hash signee.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    function _validateHashCompatibleSignature(\n        bytes32 hash,\n        Signature memory signature\n    )\n        private\n        pure\n    {\n        // Ensure the r and s are within malleability limits.\n        if (uint256(signature.r) >= ECDSA_SIGNATURE_R_LIMIT ||\n            uint256(signature.s) >= ECDSA_SIGNATURE_S_LIMIT)\n        {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n\n        // Always illegal signature.\n        if (signature.signatureType == SignatureType.ILLEGAL) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\n                hash\n            ).rrevert();\n        }\n\n        // Always invalid.\n        if (signature.signatureType == SignatureType.INVALID) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\n                hash\n            ).rrevert();\n        }\n\n        // Solidity should check that the signature type is within enum range for us\n        // when abi-decoding.\n    }\n}\n",
        "../errors/LibSignatureRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSignatureRichErrors {\n\n    enum SignatureValidationErrorCodes {\n        ALWAYS_INVALID,\n        INVALID_LENGTH,\n        UNSUPPORTED,\n        ILLEGAL,\n        WRONG_SIGNER,\n        BAD_SIGNATURE_DATA\n    }\n\n    // solhint-disable func-name-mixedcase\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32,address,bytes)\")),\n            code,\n            hash,\n            signerAddress,\n            signature\n        );\n    }\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32)\")),\n            code,\n            hash\n        );\n    }\n}\n",
        "./libs/LibNativeOrder.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../errors/LibNativeOrdersRichErrors.sol\";\n\n\n/// @dev A library for common native order operations.\nlibrary LibNativeOrder {\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An OTC limit order.\n    struct OtcOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        uint256 expiryAndNonce; // [uint64 expiry, uint64 nonceBucket, uint128 nonce]\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Info on an OTC order.\n    struct OtcOrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n    }\n\n    uint256 private constant UINT_128_MASK = (1 << 128) - 1;\n    uint256 private constant UINT_64_MASK = (1 << 64) - 1;\n    uint256 private constant ADDRESS_MASK = (1 << 160) - 1;\n\n    // The type hash for limit orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"LimitOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"uint128 takerTokenFeeAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address sender,\",\n    //       \"address feeRecipient,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _LIMIT_ORDER_TYPEHASH =\n        0xce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d49;\n\n    // The type hash for RFQ orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"RfqOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _RFQ_ORDER_TYPEHASH =\n        0xe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da9;\n\n    // The type hash for OTC orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"OtcOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"uint256 expiryAndNonce\"\n    //     \")\"\n    // ))\n    uint256 private constant _OTC_ORDER_TYPEHASH =\n        0x2f754524de756ae72459efbe1ec88c19a745639821de528ac3fb88f9e65e35c8;\n\n    /// @dev Get the struct hash of a limit order.\n    /// @param order The limit order.\n    /// @return structHash The struct hash of the order.\n    function getLimitOrderStructHash(LimitOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.takerTokenFeeAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.sender,\n        //   order.feeRecipient,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _LIMIT_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.takerTokenFeeAmount;\n            mstore(add(mem, 0xA0), and(UINT_128_MASK, mload(add(order, 0x80))))\n            // order.maker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.taker;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.sender;\n            mstore(add(mem, 0x100), and(ADDRESS_MASK, mload(add(order, 0xE0))))\n            // order.feeRecipient;\n            mstore(add(mem, 0x120), and(ADDRESS_MASK, mload(add(order, 0x100))))\n            // order.pool;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            // order.expiry;\n            mstore(add(mem, 0x160), and(UINT_64_MASK, mload(add(order, 0x140))))\n            // order.salt;\n            mstore(add(mem, 0x180), mload(add(order, 0x160)))\n            structHash := keccak256(mem, 0x1A0)\n        }\n    }\n\n    /// @dev Get the struct hash of a RFQ order.\n    /// @param order The RFQ order.\n    /// @return structHash The struct hash of the order.\n    function getRfqOrderStructHash(RfqOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _RFQ_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.pool;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            // order.expiry;\n            mstore(add(mem, 0x120), and(UINT_64_MASK, mload(add(order, 0x100))))\n            // order.salt;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            structHash := keccak256(mem, 0x160)\n        }\n    }\n\n    /// @dev Get the struct hash of an OTC order.\n    /// @param order The OTC order.\n    /// @return structHash The struct hash of the order.\n    function getOtcOrderStructHash(OtcOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.expiryAndNonce,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _OTC_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.expiryAndNonce;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            structHash := keccak256(mem, 0x120)\n        }\n    }\n\n    /// @dev Refund any leftover protocol fees in `msg.value` to `msg.sender`.\n    /// @param ethProtocolFeePaid How much ETH was paid in protocol fees.\n    function refundExcessProtocolFeeToSender(uint256 ethProtocolFeePaid)\n        internal\n    {\n        if (msg.value > ethProtocolFeePaid && msg.sender != address(this)) {\n            uint256 refundAmount = msg.value.safeSub(ethProtocolFeePaid);\n            (bool success,) = msg\n                .sender\n                .call{value: refundAmount}(\"\");\n            if (!success) {\n                LibNativeOrdersRichErrors.ProtocolFeeRefundFailed(\n                    msg.sender,\n                    refundAmount\n                ).rrevert();\n            }\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "../errors/LibNativeOrdersRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibNativeOrdersRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function ProtocolFeeRefundFailed(\n        address receiver,\n        uint256 refundAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"ProtocolFeeRefundFailed(address,uint256)\")),\n            receiver,\n            refundAmount\n        );\n    }\n\n    function OrderNotFillableByOriginError(\n        bytes32 orderHash,\n        address txOrigin,\n        address orderTxOrigin\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByOriginError(bytes32,address,address)\")),\n            orderHash,\n            txOrigin,\n            orderTxOrigin\n        );\n    }\n\n    function OrderNotFillableError(\n        bytes32 orderHash,\n        uint8 orderStatus\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableError(bytes32,uint8)\")),\n            orderHash,\n            orderStatus\n        );\n    }\n\n    function OrderNotSignedByMakerError(\n        bytes32 orderHash,\n        address signer,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotSignedByMakerError(bytes32,address,address)\")),\n            orderHash,\n            signer,\n            maker\n        );\n    }\n\n    function InvalidSignerError(\n        address maker,\n        address signer\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidSignerError(address,address)\")),\n            maker,\n            signer\n        );\n    }\n\n    function OrderNotFillableBySenderError(\n        bytes32 orderHash,\n        address sender,\n        address orderSender\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableBySenderError(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            orderSender\n        );\n    }\n\n    function OrderNotFillableByTakerError(\n        bytes32 orderHash,\n        address taker,\n        address orderTaker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByTakerError(bytes32,address,address)\")),\n            orderHash,\n            taker,\n            orderTaker\n        );\n    }\n\n    function CancelSaltTooLowError(\n        uint256 minValidSalt,\n        uint256 oldMinValidSalt\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"CancelSaltTooLowError(uint256,uint256)\")),\n            minValidSalt,\n            oldMinValidSalt\n        );\n    }\n\n    function FillOrKillFailedError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"FillOrKillFailedError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n\n    function OnlyOrderMakerAllowed(\n        bytes32 orderHash,\n        address sender,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOrderMakerAllowed(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            maker\n        );\n    }\n\n    function BatchFillIncompleteError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"BatchFillIncompleteError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n}\n",
        "./interfaces/INativeOrdersEvents.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\n\n\n/// @dev Events emitted by NativeOrdersFeature.\ninterface INativeOrdersEvents {\n\n    /// @dev Emitted whenever a `LimitOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param feeRecipient Fee recipient of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param protocolFeePaid How much protocol fee was paid.\n    /// @param pool The fee pool associated with this order.\n    event LimitOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address feeRecipient,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        uint128 takerTokenFeeFilledAmount,\n        uint256 protocolFeePaid,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever an `RfqOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param pool The fee pool associated with this order.\n    event RfqOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address makerToken,\n        address takerToken,\n        uint128 takerTokenFilledAmount,\n        uint128 makerTokenFilledAmount,\n        bytes32 pool\n    );\n\n    /// @dev Emitted whenever a limit or RFQ order is cancelled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The order maker.\n    event OrderCancelled(\n        bytes32 orderHash,\n        address maker\n    );\n\n    /// @dev Emitted whenever Limit orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledLimitOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted whenever RFQ orders are cancelled by pair by a maker.\n    /// @param maker The maker of the order.\n    /// @param makerToken The maker token in a pair for the orders cancelled.\n    /// @param takerToken The taker token in a pair for the orders cancelled.\n    /// @param minValidSalt The new minimum valid salt an order with this pair must\n    ///        have.\n    event PairCancelledRfqOrders(\n        address maker,\n        address makerToken,\n        address takerToken,\n        uint256 minValidSalt\n    );\n\n    /// @dev Emitted when new addresses are allowed or disallowed to fill\n    ///      orders with a given txOrigin.\n    /// @param origin The address doing the allowing.\n    /// @param addrs The address being allowed/disallowed.\n    /// @param allowed Indicates whether the address should be allowed.\n    event RfqOrderOriginsAllowed(\n        address origin,\n        address[] addrs,\n        bool allowed\n    );\n\n    /// @dev Emitted when new order signers are registered\n    /// @param maker The maker address that is registering a designated signer.\n    /// @param signer The address that will sign on behalf of maker.\n    /// @param allowed Indicates whether the address should be allowed.\n    event OrderSignerRegistered(\n        address maker,\n        address signer,\n        bool allowed\n    );\n}\n",
        "./native_orders/NativeOrdersSettlement.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"../../errors/LibNativeOrdersRichErrors.sol\";\nimport \"../../fixins/FixinCommon.sol\";\nimport \"../../storage/LibNativeOrdersStorage.sol\";\nimport \"../../vendor/v3/IStaking.sol\";\nimport \"../interfaces/INativeOrdersEvents.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\nimport \"./NativeOrdersCancellation.sol\";\nimport \"./NativeOrdersProtocolFees.sol\";\n\n\n/// @dev Mixin for settling limit and RFQ orders.\nabstract contract NativeOrdersSettlement is\n    INativeOrdersEvents,\n    NativeOrdersCancellation,\n    NativeOrdersProtocolFees,\n    FixinCommon\n{\n    using LibSafeMathV06 for uint128;\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Params for `_settleOrder()`.\n    struct SettleOrderInfo {\n        // Order hash.\n        bytes32 orderHash;\n        // Maker of the order.\n        address maker;\n        // The address holding the taker tokens.\n        address payer;\n        // Recipient of the maker tokens.\n        address recipient;\n        // Maker token.\n        IERC20TokenV06 makerToken;\n        // Taker token.\n        IERC20TokenV06 takerToken;\n        // Maker token amount.\n        uint128 makerAmount;\n        // Taker token amount.\n        uint128 takerAmount;\n        // Maximum taker token amount to fill.\n        uint128 takerTokenFillAmount;\n        // How much taker token amount has already been filled in this order.\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Params for `_fillLimitOrderPrivate()`\n    struct FillLimitOrderPrivateParams {\n        // The limit order.\n        LibNativeOrder.LimitOrder order;\n        // The order signature.\n        LibSignature.Signature signature;\n        // Maximum taker token to fill this order with.\n        uint128 takerTokenFillAmount;\n        // The order taker.\n        address taker;\n        // The order sender.\n        address sender;\n    }\n\n    /// @dev Params for `_fillRfqOrderPrivate()`\n    struct FillRfqOrderPrivateParams {\n        LibNativeOrder.RfqOrder order;\n        // The order signature.\n        LibSignature.Signature signature;\n        // Maximum taker token to fill this order with.\n        uint128 takerTokenFillAmount;\n        // The order taker.\n        address taker;\n        // Whether to use the Exchange Proxy's balance\n        // of taker tokens.\n        bool useSelfBalance;\n        // The recipient of the maker tokens.\n        address recipient;\n    }\n\n    // @dev Fill results returned by `_fillLimitOrderPrivate()` and\n    ///     `_fillRfqOrderPrivate()`.\n    struct FillNativeOrderResults {\n        uint256 ethProtocolFeePaid;\n        uint128 takerTokenFilledAmount;\n        uint128 makerTokenFilledAmount;\n        uint128 takerTokenFeeFilledAmount;\n    }\n\n    constructor(\n        address zeroExAddress,\n        IEtherTokenV06 weth,\n        IStaking staking,\n        FeeCollectorController feeCollectorController,\n        uint32 protocolFeeMultiplier\n    )\n        public\n        NativeOrdersCancellation(zeroExAddress)\n        NativeOrdersProtocolFees(weth, staking, feeCollectorController, protocolFeeMultiplier)\n    {\n        // solhint-disable no-empty-blocks\n    }\n\n    /// @dev Fill a limit order. The taker and sender will be the caller.\n    /// @param order The limit order. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillLimitOrder(\n        LibNativeOrder.LimitOrder memory order,\n        LibSignature.Signature memory signature,\n        uint128 takerTokenFillAmount\n    )\n        public\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        FillNativeOrderResults memory results =\n            _fillLimitOrderPrivate(FillLimitOrderPrivateParams({\n                order: order,\n                signature: signature,\n                takerTokenFillAmount: takerTokenFillAmount,\n                taker: msg.sender,\n                sender: msg.sender\n            }));\n        LibNativeOrder.refundExcessProtocolFeeToSender(results.ethProtocolFeePaid);\n        (takerTokenFilledAmount, makerTokenFilledAmount) = (\n            results.takerTokenFilledAmount,\n            results.makerTokenFilledAmount\n        );\n    }\n\n    /// @dev Fill an RFQ order for up to `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller. ETH should be attached to pay the\n    ///      protocol fee.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this order with.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillRfqOrder(\n        LibNativeOrder.RfqOrder memory order,\n        LibSignature.Signature memory signature,\n        uint128 takerTokenFillAmount\n    )\n        public\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        FillNativeOrderResults memory results =\n            _fillRfqOrderPrivate(FillRfqOrderPrivateParams({\n                order: order,\n                signature: signature,\n                takerTokenFillAmount: takerTokenFillAmount,\n                taker: msg.sender,\n                useSelfBalance: false,\n                recipient: msg.sender\n            }));\n        (takerTokenFilledAmount, makerTokenFilledAmount) = (\n            results.takerTokenFilledAmount,\n            results.makerTokenFilledAmount\n        );\n    }\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillLimitOrder(\n        LibNativeOrder.LimitOrder memory order,\n        LibSignature.Signature memory signature,\n        uint128 takerTokenFillAmount\n    )\n        public\n        payable\n        returns (uint128 makerTokenFilledAmount)\n    {\n        FillNativeOrderResults memory results =\n            _fillLimitOrderPrivate(FillLimitOrderPrivateParams({\n                order: order,\n                signature: signature,\n                takerTokenFillAmount: takerTokenFillAmount,\n                taker: msg.sender,\n                sender: msg.sender\n            }));\n        // Must have filled exactly the amount requested.\n        if (results.takerTokenFilledAmount < takerTokenFillAmount) {\n            LibNativeOrdersRichErrors.FillOrKillFailedError(\n                getLimitOrderHash(order),\n                results.takerTokenFilledAmount,\n                takerTokenFillAmount\n            ).rrevert();\n        }\n        LibNativeOrder.refundExcessProtocolFeeToSender(results.ethProtocolFeePaid);\n        makerTokenFilledAmount = results.makerTokenFilledAmount;\n    }\n\n    /// @dev Fill an RFQ order for exactly `takerTokenFillAmount` taker tokens.\n    ///      The taker will be the caller. ETH protocol fees can be\n    ///      attached to this call. Any unspent ETH will be refunded to\n    ///      the caller.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount How much taker token to fill this order with.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOrKillRfqOrder(\n        LibNativeOrder.RfqOrder memory order,\n        LibSignature.Signature memory signature,\n        uint128 takerTokenFillAmount\n    )\n        public\n        returns (uint128 makerTokenFilledAmount)\n    {\n        FillNativeOrderResults memory results =\n            _fillRfqOrderPrivate(FillRfqOrderPrivateParams({\n                order: order,\n                signature: signature,\n                takerTokenFillAmount: takerTokenFillAmount,\n                taker: msg.sender,\n                useSelfBalance: false,\n                recipient: msg.sender\n            }));\n        // Must have filled exactly the amount requested.\n        if (results.takerTokenFilledAmount < takerTokenFillAmount) {\n            LibNativeOrdersRichErrors.FillOrKillFailedError(\n                getRfqOrderHash(order),\n                results.takerTokenFilledAmount,\n                takerTokenFillAmount\n            ).rrevert();\n        }\n        makerTokenFilledAmount = results.makerTokenFilledAmount;\n    }\n\n    /// @dev Fill a limit order. Internal variant. ETH protocol fees can be\n    ///      attached to this call.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param sender The order sender.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillLimitOrder(\n        LibNativeOrder.LimitOrder memory order,\n        LibSignature.Signature memory signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        address sender\n    )\n        public\n        virtual\n        payable\n        onlySelf\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        FillNativeOrderResults memory results =\n            _fillLimitOrderPrivate(FillLimitOrderPrivateParams(\n                order,\n                signature,\n                takerTokenFillAmount,\n                taker,\n                sender\n            ));\n        (takerTokenFilledAmount, makerTokenFilledAmount) = (\n            results.takerTokenFilledAmount,\n            results.makerTokenFilledAmount\n        );\n    }\n\n    /// @dev Fill an RFQ order. Internal variant.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @param takerTokenFillAmount Maximum taker token to fill this order with.\n    /// @param taker The order taker.\n    /// @param useSelfBalance Whether to use the ExchangeProxy's transient\n    ///        balance of taker tokens to fill the order.\n    /// @param recipient The recipient of the maker tokens.\n    /// @return takerTokenFilledAmount How much maker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillRfqOrder(\n        LibNativeOrder.RfqOrder memory order,\n        LibSignature.Signature memory signature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        bool useSelfBalance,\n        address recipient\n    )\n        public\n        virtual\n        onlySelf\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        FillNativeOrderResults memory results =\n            _fillRfqOrderPrivate(FillRfqOrderPrivateParams(\n                order,\n                signature,\n                takerTokenFillAmount,\n                taker,\n                useSelfBalance,\n                recipient\n            ));\n        (takerTokenFilledAmount, makerTokenFilledAmount) = (\n            results.takerTokenFilledAmount,\n            results.makerTokenFilledAmount\n        );\n    }\n\n    /// @dev Mark what tx.origin addresses are allowed to fill an order that\n    ///      specifies the message sender as its txOrigin.\n    /// @param origins An array of origin addresses to update.\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedRfqOrigins(\n        address[] memory origins,\n        bool allowed\n    )\n        external\n    {\n        require(msg.sender == tx.origin,\n            \"NativeOrdersFeature/NO_CONTRACT_ORIGINS\");\n\n        LibNativeOrdersStorage.Storage storage stor =\n            LibNativeOrdersStorage.getStorage();\n\n        for (uint256 i = 0; i < origins.length; i++) {\n            stor.originRegistry[msg.sender][origins[i]] = allowed;\n        }\n\n        emit RfqOrderOriginsAllowed(msg.sender, origins, allowed);\n    }\n\n    /// @dev Fill a limit order. Private variant. Does not refund protocol fees.\n    /// @param params Function params.\n    /// @return results Results of the fill.\n    function _fillLimitOrderPrivate(FillLimitOrderPrivateParams memory params)\n        private\n        returns (FillNativeOrderResults memory results)\n    {\n        LibNativeOrder.OrderInfo memory orderInfo = getLimitOrderInfo(params.order);\n\n        // Must be fillable.\n        if (orderInfo.status != LibNativeOrder.OrderStatus.FILLABLE) {\n            LibNativeOrdersRichErrors.OrderNotFillableError(\n                orderInfo.orderHash,\n                uint8(orderInfo.status)\n            ).rrevert();\n        }\n\n        // Must be fillable by the taker.\n        if (params.order.taker != address(0) && params.order.taker != params.taker) {\n            LibNativeOrdersRichErrors.OrderNotFillableByTakerError(\n                orderInfo.orderHash,\n                params.taker,\n                params.order.taker\n            ).rrevert();\n        }\n\n        // Must be fillable by the sender.\n        if (params.order.sender != address(0) && params.order.sender != params.sender) {\n            LibNativeOrdersRichErrors.OrderNotFillableBySenderError(\n                orderInfo.orderHash,\n                params.sender,\n                params.order.sender\n            ).rrevert();\n        }\n\n        // Signature must be valid for the order.\n        {\n            address signer = LibSignature.getSignerOfHash(\n                orderInfo.orderHash,\n                params.signature\n            );\n            if (signer != params.order.maker && !isValidOrderSigner(params.order.maker, signer)) {\n                LibNativeOrdersRichErrors.OrderNotSignedByMakerError(\n                    orderInfo.orderHash,\n                    signer,\n                    params.order.maker\n                ).rrevert();\n            }\n        }\n\n        // Pay the protocol fee.\n        results.ethProtocolFeePaid = _collectProtocolFee(params.order.pool);\n\n        // Settle between the maker and taker.\n        (results.takerTokenFilledAmount, results.makerTokenFilledAmount) = _settleOrder(\n            SettleOrderInfo({\n                orderHash: orderInfo.orderHash,\n                maker: params.order.maker,\n                payer: params.taker,\n                recipient: params.taker,\n                makerToken: IERC20TokenV06(params.order.makerToken),\n                takerToken: IERC20TokenV06(params.order.takerToken),\n                makerAmount: params.order.makerAmount,\n                takerAmount: params.order.takerAmount,\n                takerTokenFillAmount: params.takerTokenFillAmount,\n                takerTokenFilledAmount: orderInfo.takerTokenFilledAmount\n            })\n        );\n\n        // Pay the fee recipient.\n        if (params.order.takerTokenFeeAmount > 0) {\n            results.takerTokenFeeFilledAmount = uint128(LibMathV06.getPartialAmountFloor(\n                results.takerTokenFilledAmount,\n                params.order.takerAmount,\n                params.order.takerTokenFeeAmount\n            ));\n            _transferERC20TokensFrom(\n                params.order.takerToken,\n                params.taker,\n                params.order.feeRecipient,\n                uint256(results.takerTokenFeeFilledAmount)\n            );\n        }\n\n        emit LimitOrderFilled(\n            orderInfo.orderHash,\n            params.order.maker,\n            params.taker,\n            params.order.feeRecipient,\n            address(params.order.makerToken),\n            address(params.order.takerToken),\n            results.takerTokenFilledAmount,\n            results.makerTokenFilledAmount,\n            results.takerTokenFeeFilledAmount,\n            results.ethProtocolFeePaid,\n            params.order.pool\n        );\n    }\n\n    /// @dev Fill an RFQ order. Private variant.\n    /// @param params Function params.\n    /// @return results Results of the fill.\n    function _fillRfqOrderPrivate(FillRfqOrderPrivateParams memory params)\n        private\n        returns (FillNativeOrderResults memory results)\n    {\n        LibNativeOrder.OrderInfo memory orderInfo = getRfqOrderInfo(params.order);\n\n        // Must be fillable.\n        if (orderInfo.status != LibNativeOrder.OrderStatus.FILLABLE) {\n            LibNativeOrdersRichErrors.OrderNotFillableError(\n                orderInfo.orderHash,\n                uint8(orderInfo.status)\n            ).rrevert();\n        }\n\n        {\n            LibNativeOrdersStorage.Storage storage stor =\n                LibNativeOrdersStorage.getStorage();\n\n            // Must be fillable by the tx.origin.\n            if (\n                params.order.txOrigin != tx.origin &&\n                !stor.originRegistry[params.order.txOrigin][tx.origin]\n            ) {\n                LibNativeOrdersRichErrors.OrderNotFillableByOriginError(\n                    orderInfo.orderHash,\n                    tx.origin,\n                    params.order.txOrigin\n                ).rrevert();\n            }\n        }\n\n        // Must be fillable by the taker.\n        if (params.order.taker != address(0) && params.order.taker != params.taker) {\n            LibNativeOrdersRichErrors.OrderNotFillableByTakerError(\n                orderInfo.orderHash,\n                params.taker,\n                params.order.taker\n            ).rrevert();\n        }\n\n        // Signature must be valid for the order.\n        {\n            address signer = LibSignature.getSignerOfHash(\n                orderInfo.orderHash,\n                params.signature\n            );\n            if (\n                signer != params.order.maker &&\n                !isValidOrderSigner(params.order.maker, signer)\n            ) {\n                LibNativeOrdersRichErrors.OrderNotSignedByMakerError(\n                    orderInfo.orderHash,\n                    signer,\n                    params.order.maker\n                ).rrevert();\n            }\n        }\n\n        // Settle between the maker and taker.\n        (results.takerTokenFilledAmount, results.makerTokenFilledAmount) = _settleOrder(\n            SettleOrderInfo({\n                orderHash: orderInfo.orderHash,\n                maker: params.order.maker,\n                payer: params.useSelfBalance ? address(this) : params.taker,\n                recipient: params.recipient,\n                makerToken: IERC20TokenV06(params.order.makerToken),\n                takerToken: IERC20TokenV06(params.order.takerToken),\n                makerAmount: params.order.makerAmount,\n                takerAmount: params.order.takerAmount,\n                takerTokenFillAmount: params.takerTokenFillAmount,\n                takerTokenFilledAmount: orderInfo.takerTokenFilledAmount\n            })\n        );\n\n        emit RfqOrderFilled(\n            orderInfo.orderHash,\n            params.order.maker,\n            params.taker,\n            address(params.order.makerToken),\n            address(params.order.takerToken),\n            results.takerTokenFilledAmount,\n            results.makerTokenFilledAmount,\n            params.order.pool\n        );\n    }\n\n    /// @dev Settle the trade between an order's maker and taker.\n    /// @param settleInfo Information needed to execute the settlement.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _settleOrder(SettleOrderInfo memory settleInfo)\n        private\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        // Clamp the taker token fill amount to the fillable amount.\n        takerTokenFilledAmount = LibSafeMathV06.min128(\n            settleInfo.takerTokenFillAmount,\n            settleInfo.takerAmount.safeSub128(settleInfo.takerTokenFilledAmount)\n        );\n        // Compute the maker token amount.\n        // This should never overflow because the values are all clamped to\n        // (2^128-1).\n        makerTokenFilledAmount = uint128(LibMathV06.getPartialAmountFloor(\n            uint256(takerTokenFilledAmount),\n            uint256(settleInfo.takerAmount),\n            uint256(settleInfo.makerAmount)\n        ));\n\n        if (takerTokenFilledAmount == 0 || makerTokenFilledAmount == 0) {\n            // Nothing to do.\n            return (0, 0);\n        }\n\n        // Update filled state for the order.\n        LibNativeOrdersStorage\n            .getStorage()\n            .orderHashToTakerTokenFilledAmount[settleInfo.orderHash] =\n            // OK to overwrite the whole word because we shouldn't get to this\n            // function if the order is cancelled.\n                settleInfo.takerTokenFilledAmount.safeAdd128(takerTokenFilledAmount);\n\n        if (settleInfo.payer == address(this)) {\n            // Transfer this -> maker.\n            _transferERC20Tokens(\n                settleInfo.takerToken,\n                settleInfo.maker,\n                takerTokenFilledAmount\n            );\n        } else {\n            // Transfer taker -> maker.\n            _transferERC20TokensFrom(\n                settleInfo.takerToken,\n                settleInfo.payer,\n                settleInfo.maker,\n                takerTokenFilledAmount\n            );\n        }\n\n        // Transfer maker -> recipient.\n        _transferERC20TokensFrom(\n            settleInfo.makerToken,\n            settleInfo.maker,\n            settleInfo.recipient,\n            makerTokenFilledAmount\n        );\n    }\n\n    /// @dev register a signer who can sign on behalf of msg.sender\n    /// @param signer The address from which you plan to generate signatures\n    /// @param allowed True to register, false to unregister.\n    function registerAllowedOrderSigner(\n        address signer,\n        bool allowed\n    )\n        external\n    {\n        LibNativeOrdersStorage.Storage storage stor =\n            LibNativeOrdersStorage.getStorage();\n\n        stor.orderSignerRegistry[msg.sender][signer] = allowed;\n\n        emit OrderSignerRegistered(msg.sender, signer, allowed);\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "../fixins/FixinCommon.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\nimport \"../features/interfaces/IOwnableFeature.sol\";\nimport \"../features/interfaces/ISimpleFunctionRegistryFeature.sol\";\n\n\n/// @dev Common feature utilities.\nabstract contract FixinCommon {\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The implementation address of this feature.\n    address internal immutable _implementation;\n\n    /// @dev The caller must be this contract.\n    modifier onlySelf() virtual {\n        if (msg.sender != address(this)) {\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\n        }\n        _;\n    }\n\n    /// @dev The caller of this function must be the owner.\n    modifier onlyOwner() virtual {\n        {\n            address owner = IOwnableFeature(address(this)).owner();\n            if (msg.sender != owner) {\n                LibOwnableRichErrors.OnlyOwnerError(\n                    msg.sender,\n                    owner\n                ).rrevert();\n            }\n        }\n        _;\n    }\n\n    constructor() internal {\n        // Remember this feature's original address.\n        _implementation = address(this);\n    }\n\n    /// @dev Registers a function implemented by this feature at `_implementation`.\n    ///      Can and should only be called within a `migrate()`.\n    /// @param selector The selector of the function whose implementation\n    ///        is at `_implementation`.\n    function _registerFeatureFunction(bytes4 selector)\n        internal\n    {\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\n    }\n\n    /// @dev Encode a feature version as a `uint256`.\n    /// @param major The major version number of the feature.\n    /// @param minor The minor version number of the feature.\n    /// @param revision The revision number of the feature.\n    /// @return encodedVersion The encoded version number.\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\n        internal\n        pure\n        returns (uint256 encodedVersion)\n    {\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\n    }\n}\n",
        "../errors/LibCommonRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibCommonRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyCallableBySelfError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableBySelfError(address)\")),\n            sender\n        );\n    }\n\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IllegalReentrancyError(bytes4,uint256)\")),\n            selector,\n            reentrancyFlags\n        );\n    }\n}\n",
        "./interfaces/IOwnableFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\n/// @dev Owner management and migration features.\ninterface IOwnableFeature is\n    IOwnableV06\n{\n    /// @dev Emitted when `migrate()` is called.\n    /// @param caller The caller of `migrate()`.\n    /// @param migrator The migration contract.\n    /// @param newOwner The address of the new owner.\n    event Migrated(address caller, address migrator, address newOwner);\n\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\n    ///      The result of the function being called should be the magic bytes\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\n    ///      The owner will be temporarily set to `address(this)` inside the call.\n    ///      Before returning, the owner will be set to `newOwner`.\n    /// @param target The migrator contract address.\n    /// @param newOwner The address of the new owner.\n    /// @param data The call data.\n    function migrate(address target, bytes calldata data, address newOwner) external;\n}\n",
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n",
        "./interfaces/ISimpleFunctionRegistryFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic registry management features.\ninterface ISimpleFunctionRegistryFeature {\n\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\n    /// @param selector The function selector.\n    /// @param oldImpl The implementation contract address being replaced.\n    /// @param newImpl The replacement implementation contract address.\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\n\n    /// @dev Roll back to a prior implementation of a function.\n    /// @param selector The function selector.\n    /// @param targetImpl The address of an older implementation of the function.\n    function rollback(bytes4 selector, address targetImpl) external;\n\n    /// @dev Register or replace a function.\n    /// @param selector The function selector.\n    /// @param impl The implementation contract for the function.\n    function extend(bytes4 selector, address impl) external;\n\n    /// @dev Retrieve the length of the rollback history for a function.\n    /// @param selector The function selector.\n    /// @return rollbackLength The number of items in the rollback history for\n    ///         the function.\n    function getRollbackLength(bytes4 selector)\n        external\n        view\n        returns (uint256 rollbackLength);\n\n    /// @dev Retrieve an entry in the rollback history for a function.\n    /// @param selector The function selector.\n    /// @param idx The index in the rollback history.\n    /// @return impl An implementation address for the function at\n    ///         index `idx`.\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\n        external\n        view\n        returns (address impl);\n}\n",
        "../storage/LibNativeOrdersStorage.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"./LibStorage.sol\";\n\n\n/// @dev Storage helpers for `NativeOrdersFeature`.\nlibrary LibNativeOrdersStorage {\n\n    /// @dev Storage bucket for this feature.\n    struct Storage {\n        // How much taker token has been filled in order.\n        // The lower `uint128` is the taker token fill amount.\n        // The high bit will be `1` if the order was directly cancelled.\n        mapping(bytes32 => uint256) orderHashToTakerTokenFilledAmount;\n        // The minimum valid order salt for a given maker and order pair (maker, taker)\n        // for limit orders.\n        mapping(address => mapping(address => mapping(address => uint256)))\n            limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt;\n        // The minimum valid order salt for a given maker and order pair (maker, taker)\n        // for RFQ orders.\n        mapping(address => mapping(address => mapping(address => uint256)))\n            rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt;\n        // For a given order origin, which tx.origin addresses are allowed to\n        // fill the order.\n        mapping(address => mapping(address => bool)) originRegistry;\n        // For a given maker address, which addresses are allowed to\n        // sign on its behalf.\n        mapping(address => mapping(address => bool)) orderSignerRegistry;\n    }\n\n    /// @dev Get the storage bucket for this contract.\n    function getStorage() internal pure returns (Storage storage stor) {\n        uint256 storageSlot = LibStorage.getStorageSlot(\n            LibStorage.StorageId.NativeOrders\n        );\n        // Dip into assembly to change the slot pointed to by the local\n        // variable `stor`.\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\n        assembly { stor_slot := storageSlot }\n    }\n}\n",
        "../storage/LibStorage.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Common storage helpers\nlibrary LibStorage {\n\n    /// @dev What to bit-shift a storage ID by to get its slot.\n    ///      This gives us a maximum of 2**128 inline fields in each bucket.\n    uint256 private constant STORAGE_SLOT_EXP = 128;\n\n    /// @dev Storage IDs for feature storage buckets.\n    ///      WARNING: APPEND-ONLY.\n    enum StorageId {\n        Proxy,\n        SimpleFunctionRegistry,\n        Ownable,\n        TokenSpender,\n        TransformERC20,\n        MetaTransactions,\n        ReentrancyGuard,\n        NativeOrders,\n        OtcOrders\n    }\n\n    /// @dev Get the storage slot given a storage ID. We assign unique, well-spaced\n    ///     slots to storage bucket variables to ensure they do not overlap.\n    ///     See: https://solidity.readthedocs.io/en/v0.6.6/assembly.html#access-to-external-variables-functions-and-libraries\n    /// @param storageId An entry in `StorageId`\n    /// @return slot The storage slot.\n    function getStorageSlot(StorageId storageId)\n        internal\n        pure\n        returns (uint256 slot)\n    {\n        // This should never overflow with a reasonable `STORAGE_SLOT_EXP`\n        // because Solidity will do a range check on `storageId` during the cast.\n        return (uint256(storageId) + 1) << STORAGE_SLOT_EXP;\n    }\n}\n",
        "../vendor/v3/IStaking.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\ninterface IStaking {\n    function joinStakingPoolAsMaker(bytes32) external;\n    function payProtocolFee(address, address, uint256) external payable;\n}\n",
        "./native_orders/NativeOrdersCancellation.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../../errors/LibNativeOrdersRichErrors.sol\";\nimport \"../../storage/LibNativeOrdersStorage.sol\";\nimport \"../interfaces/INativeOrdersEvents.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\nimport \"./NativeOrdersInfo.sol\";\n\n/// @dev Feature for cancelling limit and RFQ orders.\nabstract contract NativeOrdersCancellation is\n    INativeOrdersEvents,\n    NativeOrdersInfo\n{\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Highest bit of a uint256, used to flag cancelled orders.\n    uint256 private constant HIGH_BIT = 1 << 255;\n\n    constructor(\n        address zeroExAddress\n    )\n        internal\n        NativeOrdersInfo(zeroExAddress)\n    {\n        // solhint-disable no-empty-blocks\n    }\n\n    /// @dev Cancel a single limit order. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The limit order.\n    function cancelLimitOrder(LibNativeOrder.LimitOrder memory order)\n        public\n    {\n        bytes32 orderHash = getLimitOrderHash(order);\n        if (msg.sender != order.maker && !isValidOrderSigner(order.maker, msg.sender)) {\n            LibNativeOrdersRichErrors.OnlyOrderMakerAllowed(\n                orderHash,\n                msg.sender,\n                order.maker\n            ).rrevert();\n        }\n        _cancelOrderHash(orderHash, order.maker);\n    }\n\n    /// @dev Cancel a single RFQ order. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param order The RFQ order.\n    function cancelRfqOrder(LibNativeOrder.RfqOrder memory order)\n        public\n    {\n        bytes32 orderHash = getRfqOrderHash(order);\n        if (msg.sender != order.maker && !isValidOrderSigner(order.maker, msg.sender)) {\n            LibNativeOrdersRichErrors.OnlyOrderMakerAllowed(\n                orderHash,\n                msg.sender,\n                order.maker\n            ).rrevert();\n        }\n        _cancelOrderHash(orderHash, order.maker);\n    }\n\n    /// @dev Cancel multiple limit orders. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The limit orders.\n    function batchCancelLimitOrders(LibNativeOrder.LimitOrder[] memory orders)\n        public\n    {\n        for (uint256 i = 0; i < orders.length; ++i) {\n            cancelLimitOrder(orders[i]);\n        }\n    }\n\n    /// @dev Cancel multiple RFQ orders. The caller must be the maker or a valid order signer.\n    ///      Silently succeeds if the order has already been cancelled.\n    /// @param orders The RFQ orders.\n    function batchCancelRfqOrders(LibNativeOrder.RfqOrder[] memory orders)\n        public\n    {\n        for (uint256 i = 0; i < orders.length; ++i) {\n            cancelRfqOrder(orders[i]);\n        }\n    }\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        public\n    {\n        _cancelPairLimitOrders(msg.sender, makerToken, takerToken, minValidSalt);\n    }\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker the maker for whom the msg.sender is the signer.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairLimitOrdersWithSigner(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        public\n    {\n        // verify that the signer is authorized for the maker\n        if (!isValidOrderSigner(maker, msg.sender)) {\n            LibNativeOrdersRichErrors.InvalidSignerError(\n                maker,\n                msg.sender\n            ).rrevert();\n        }\n\n        _cancelPairLimitOrders(maker, makerToken, takerToken, minValidSalt);\n    }\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrders(\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        public\n    {\n        require(\n            makerTokens.length == takerTokens.length &&\n            makerTokens.length == minValidSalts.length,\n            \"NativeOrdersFeature/MISMATCHED_PAIR_ORDERS_ARRAY_LENGTHS\"\n        );\n\n        for (uint256 i = 0; i < makerTokens.length; ++i) {\n            _cancelPairLimitOrders(\n                msg.sender,\n                makerTokens[i],\n                takerTokens[i],\n                minValidSalts[i]\n            );\n        }\n    }\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker the maker for whom the msg.sender is the signer.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairLimitOrdersWithSigner(\n        address maker,\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        public\n    {\n        require(\n            makerTokens.length == takerTokens.length &&\n            makerTokens.length == minValidSalts.length,\n            \"NativeOrdersFeature/MISMATCHED_PAIR_ORDERS_ARRAY_LENGTHS\"\n        );\n\n        if (!isValidOrderSigner(maker, msg.sender)) {\n            LibNativeOrdersRichErrors.InvalidSignerError(\n                maker,\n                msg.sender\n            ).rrevert();\n        }\n\n        for (uint256 i = 0; i < makerTokens.length; ++i) {\n            _cancelPairLimitOrders(\n                maker,\n                makerTokens[i],\n                takerTokens[i],\n                minValidSalts[i]\n            );\n        }\n    }\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrders(\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        public\n    {\n        _cancelPairRfqOrders(msg.sender, makerToken, takerToken, minValidSalt);\n    }\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker the maker for whom the msg.sender is the signer.\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function cancelPairRfqOrdersWithSigner(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        public\n    {\n        if (!isValidOrderSigner(maker, msg.sender)) {\n            LibNativeOrdersRichErrors.InvalidSignerError(\n                maker,\n                msg.sender\n            ).rrevert();\n        }\n\n        _cancelPairRfqOrders(maker, makerToken, takerToken, minValidSalt);\n    }\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided. The caller must be the maker. Subsequent\n    ///      calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrders(\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        public\n    {\n        require(\n            makerTokens.length == takerTokens.length &&\n            makerTokens.length == minValidSalts.length,\n            \"NativeOrdersFeature/MISMATCHED_PAIR_ORDERS_ARRAY_LENGTHS\"\n        );\n\n        for (uint256 i = 0; i < makerTokens.length; ++i) {\n            _cancelPairRfqOrders(\n                msg.sender,\n                makerTokens[i],\n                takerTokens[i],\n                minValidSalts[i]\n            );\n        }\n    }\n\n    /// @dev Cancel all RFQ orders for a given maker and pairs with salts less\n    ///      than the values provided. The caller must be a signer registered to the maker.\n    ///      Subsequent calls to this function with the same caller and pair require the\n    ///      new salt to be >= the old salt.\n    /// @param maker the maker for whom the msg.sender is the signer.\n    /// @param makerTokens The maker tokens.\n    /// @param takerTokens The taker tokens.\n    /// @param minValidSalts The new minimum valid salts.\n    function batchCancelPairRfqOrdersWithSigner(\n        address maker,\n        IERC20TokenV06[] memory makerTokens,\n        IERC20TokenV06[] memory takerTokens,\n        uint256[] memory minValidSalts\n    )\n        public\n    {\n        require(\n            makerTokens.length == takerTokens.length &&\n            makerTokens.length == minValidSalts.length,\n            \"NativeOrdersFeature/MISMATCHED_PAIR_ORDERS_ARRAY_LENGTHS\"\n        );\n\n        if (!isValidOrderSigner(maker, msg.sender)) {\n            LibNativeOrdersRichErrors.InvalidSignerError(\n                maker,\n                msg.sender\n            ).rrevert();\n        }\n\n        for (uint256 i = 0; i < makerTokens.length; ++i) {\n            _cancelPairRfqOrders(\n                maker,\n                makerTokens[i],\n                takerTokens[i],\n                minValidSalts[i]\n            );\n        }\n    }\n\n    /// @dev Cancel a limit or RFQ order directly by its order hash.\n    /// @param orderHash The order's order hash.\n    /// @param maker The order's maker.\n    function _cancelOrderHash(bytes32 orderHash, address maker)\n        private\n    {\n        LibNativeOrdersStorage.Storage storage stor =\n            LibNativeOrdersStorage.getStorage();\n        // Set the high bit on the raw taker token fill amount to indicate\n        // a cancel. It's OK to cancel twice.\n        stor.orderHashToTakerTokenFilledAmount[orderHash] |= HIGH_BIT;\n\n        emit OrderCancelled(orderHash, maker);\n    }\n\n    /// @dev Cancel all RFQ orders for a given maker and pair with a salt less\n    ///      than the value provided.\n    /// @param maker The target maker address\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function _cancelPairRfqOrders(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        private\n    {\n        LibNativeOrdersStorage.Storage storage stor =\n            LibNativeOrdersStorage.getStorage();\n\n        uint256 oldMinValidSalt =\n            stor.rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\n                [maker]\n                [address(makerToken)]\n                [address(takerToken)];\n\n        // New min salt must >= the old one.\n        if (oldMinValidSalt > minValidSalt) {\n            LibNativeOrdersRichErrors.\n                CancelSaltTooLowError(minValidSalt, oldMinValidSalt)\n                    .rrevert();\n        }\n\n        stor.rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\n            [maker]\n            [address(makerToken)]\n            [address(takerToken)] = minValidSalt;\n\n        emit PairCancelledRfqOrders(\n            maker,\n            address(makerToken),\n            address(takerToken),\n            minValidSalt\n        );\n    }\n\n    /// @dev Cancel all limit orders for a given maker and pair with a salt less\n    ///      than the value provided.\n    /// @param maker The target maker address\n    /// @param makerToken The maker token.\n    /// @param takerToken The taker token.\n    /// @param minValidSalt The new minimum valid salt.\n    function _cancelPairLimitOrders(\n        address maker,\n        IERC20TokenV06 makerToken,\n        IERC20TokenV06 takerToken,\n        uint256 minValidSalt\n    )\n        private\n    {\n        LibNativeOrdersStorage.Storage storage stor =\n            LibNativeOrdersStorage.getStorage();\n\n        uint256 oldMinValidSalt =\n            stor.limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\n                [maker]\n                [address(makerToken)]\n                [address(takerToken)];\n\n        // New min salt must >= the old one.\n        if (oldMinValidSalt > minValidSalt) {\n            LibNativeOrdersRichErrors.\n                CancelSaltTooLowError(minValidSalt, oldMinValidSalt)\n                    .rrevert();\n        }\n\n        stor.limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\n            [maker]\n            [address(makerToken)]\n            [address(takerToken)] = minValidSalt;\n\n        emit PairCancelledLimitOrders(\n            maker,\n            address(makerToken),\n            address(takerToken),\n            minValidSalt\n        );\n    }\n}\n",
        "./native_orders/NativeOrdersInfo.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"../../fixins/FixinEIP712.sol\";\nimport \"../../fixins/FixinTokenSpender.sol\";\nimport \"../../storage/LibNativeOrdersStorage.sol\";\nimport \"../libs/LibSignature.sol\";\nimport \"../libs/LibNativeOrder.sol\";\n\n\n/// @dev Feature for getting info about limit and RFQ orders.\nabstract contract NativeOrdersInfo is\n    FixinEIP712,\n    FixinTokenSpender\n{\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    // @dev Params for `_getActualFillableTakerTokenAmount()`.\n    struct GetActualFillableTakerTokenAmountParams {\n        address maker;\n        IERC20TokenV06 makerToken;\n        uint128 orderMakerAmount;\n        uint128 orderTakerAmount;\n        LibNativeOrder.OrderInfo orderInfo;\n    }\n\n    /// @dev Highest bit of a uint256, used to flag cancelled orders.\n    uint256 private constant HIGH_BIT = 1 << 255;\n\n    constructor(\n        address zeroExAddress\n    )\n        internal\n        FixinEIP712(zeroExAddress)\n    {\n        // solhint-disable no-empty-blocks\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LibNativeOrder.LimitOrder memory order)\n        public\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo)\n    {\n        // Recover maker and compute order hash.\n        orderInfo.orderHash = getLimitOrderHash(order);\n        uint256 minValidSalt = LibNativeOrdersStorage.getStorage()\n            .limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\n                [order.maker]\n                [address(order.makerToken)]\n                [address(order.takerToken)];\n        _populateCommonOrderInfoFields(\n            orderInfo,\n            order.takerAmount,\n            order.expiry,\n            order.salt,\n            minValidSalt\n        );\n    }\n\n    /// @dev Get the order info for an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderInfo Info about the order.\n    function getRfqOrderInfo(LibNativeOrder.RfqOrder memory order)\n        public\n        view\n        returns (LibNativeOrder.OrderInfo memory orderInfo)\n    {\n        // Recover maker and compute order hash.\n        orderInfo.orderHash = getRfqOrderHash(order);\n        uint256 minValidSalt = LibNativeOrdersStorage.getStorage()\n            .rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt\n                [order.maker]\n                [address(order.makerToken)]\n                [address(order.takerToken)];\n        _populateCommonOrderInfoFields(\n            orderInfo,\n            order.takerAmount,\n            order.expiry,\n            order.salt,\n            minValidSalt\n        );\n\n        // Check for missing txOrigin.\n        if (order.txOrigin == address(0)) {\n            orderInfo.status = LibNativeOrder.OrderStatus.INVALID;\n        }\n    }\n\n    /// @dev Get the canonical hash of a limit order.\n    /// @param order The limit order.\n    /// @return orderHash The order hash.\n    function getLimitOrderHash(LibNativeOrder.LimitOrder memory order)\n        public\n        view\n        returns (bytes32 orderHash)\n    {\n        return _getEIP712Hash(\n            LibNativeOrder.getLimitOrderStructHash(order)\n        );\n    }\n\n    /// @dev Get the canonical hash of an RFQ order.\n    /// @param order The RFQ order.\n    /// @return orderHash The order hash.\n    function getRfqOrderHash(LibNativeOrder.RfqOrder memory order)\n        public\n        view\n        returns (bytes32 orderHash)\n    {\n        return _getEIP712Hash(\n            LibNativeOrder.getRfqOrderStructHash(order)\n        );\n    }\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LibNativeOrder.LimitOrder memory order,\n        LibSignature.Signature calldata signature\n    )\n        public\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        )\n    {\n        orderInfo = getLimitOrderInfo(order);\n        actualFillableTakerTokenAmount = _getActualFillableTakerTokenAmount(\n            GetActualFillableTakerTokenAmountParams({\n                maker: order.maker,\n                makerToken: order.makerToken,\n                orderMakerAmount: order.makerAmount,\n                orderTakerAmount: order.takerAmount,\n                orderInfo: orderInfo\n            })\n        );\n        address signerOfHash = LibSignature.getSignerOfHash(orderInfo.orderHash, signature);\n        isSignatureValid =\n            (order.maker == signerOfHash) ||\n            isValidOrderSigner(order.maker, signerOfHash);\n    }\n\n    /// @dev Get order info, fillable amount, and signature validity for an RFQ order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The RFQ order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getRfqOrderRelevantState(\n        LibNativeOrder.RfqOrder memory order,\n        LibSignature.Signature memory signature\n    )\n        public\n        view\n        returns (\n            LibNativeOrder.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        )\n    {\n        orderInfo = getRfqOrderInfo(order);\n        actualFillableTakerTokenAmount = _getActualFillableTakerTokenAmount(\n            GetActualFillableTakerTokenAmountParams({\n                maker: order.maker,\n                makerToken: order.makerToken,\n                orderMakerAmount: order.makerAmount,\n                orderTakerAmount: order.takerAmount,\n                orderInfo: orderInfo\n            })\n        );\n        address signerOfHash = LibSignature.getSignerOfHash(orderInfo.orderHash, signature);\n        isSignatureValid =\n            (order.maker == signerOfHash) ||\n            isValidOrderSigner(order.maker, signerOfHash);\n    }\n\n    /// @dev Batch version of `getLimitOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getLimitOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The limit orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetLimitOrderRelevantStates(\n        LibNativeOrder.LimitOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        )\n    {\n        require(\n            orders.length == signatures.length,\n            \"NativeOrdersFeature/MISMATCHED_ARRAY_LENGTHS\"\n        );\n        orderInfos = new LibNativeOrder.OrderInfo[](orders.length);\n        actualFillableTakerTokenAmounts = new uint128[](orders.length);\n        isSignatureValids = new bool[](orders.length);\n        for (uint256 i = 0; i < orders.length; ++i) {\n            try\n                this.getLimitOrderRelevantState(orders[i], signatures[i])\n                    returns (\n                        LibNativeOrder.OrderInfo memory orderInfo,\n                        uint128 actualFillableTakerTokenAmount,\n                        bool isSignatureValid\n                    )\n            {\n                orderInfos[i] = orderInfo;\n                actualFillableTakerTokenAmounts[i] = actualFillableTakerTokenAmount;\n                isSignatureValids[i] = isSignatureValid;\n            }\n            catch {}\n        }\n    }\n\n    /// @dev Batch version of `getRfqOrderRelevantState()`, without reverting.\n    ///      Orders that would normally cause `getRfqOrderRelevantState()`\n    ///      to revert will have empty results.\n    /// @param orders The RFQ orders.\n    /// @param signatures The order signatures.\n    /// @return orderInfos Info about the orders.\n    /// @return actualFillableTakerTokenAmounts How much of each order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValids Whether each signature is valid for the order.\n    function batchGetRfqOrderRelevantStates(\n        LibNativeOrder.RfqOrder[] calldata orders,\n        LibSignature.Signature[] calldata signatures\n    )\n        external\n        view\n        returns (\n            LibNativeOrder.OrderInfo[] memory orderInfos,\n            uint128[] memory actualFillableTakerTokenAmounts,\n            bool[] memory isSignatureValids\n        )\n    {\n        require(\n            orders.length == signatures.length,\n            \"NativeOrdersFeature/MISMATCHED_ARRAY_LENGTHS\"\n        );\n        orderInfos = new LibNativeOrder.OrderInfo[](orders.length);\n        actualFillableTakerTokenAmounts = new uint128[](orders.length);\n        isSignatureValids = new bool[](orders.length);\n        for (uint256 i = 0; i < orders.length; ++i) {\n            try\n                this.getRfqOrderRelevantState(orders[i], signatures[i])\n                    returns (\n                        LibNativeOrder.OrderInfo memory orderInfo,\n                        uint128 actualFillableTakerTokenAmount,\n                        bool isSignatureValid\n                    )\n            {\n                orderInfos[i] = orderInfo;\n                actualFillableTakerTokenAmounts[i] = actualFillableTakerTokenAmount;\n                isSignatureValids[i] = isSignatureValid;\n            }\n            catch {}\n        }\n    }\n\n    /// @dev Populate `status` and `takerTokenFilledAmount` fields in\n    ///      `orderInfo`, which use the same code path for both limit and\n    ///      RFQ orders.\n    /// @param orderInfo `OrderInfo` with `orderHash` and `maker` filled.\n    /// @param takerAmount The order's taker token amount..\n    /// @param expiry The order's expiry.\n    /// @param salt The order's salt.\n    /// @param salt The minimum valid salt for the maker and pair combination.\n    function _populateCommonOrderInfoFields(\n        LibNativeOrder.OrderInfo memory orderInfo,\n        uint128 takerAmount,\n        uint64 expiry,\n        uint256 salt,\n        uint256 minValidSalt\n    )\n        private\n        view\n    {\n        LibNativeOrdersStorage.Storage storage stor =\n            LibNativeOrdersStorage.getStorage();\n\n        // Get the filled and direct cancel state.\n        {\n            // The high bit of the raw taker token filled amount will be set\n            // if the order was cancelled.\n            uint256 rawTakerTokenFilledAmount =\n                stor.orderHashToTakerTokenFilledAmount[orderInfo.orderHash];\n            orderInfo.takerTokenFilledAmount = uint128(rawTakerTokenFilledAmount);\n            if (orderInfo.takerTokenFilledAmount >= takerAmount) {\n                orderInfo.status = LibNativeOrder.OrderStatus.FILLED;\n                return;\n            }\n            if (rawTakerTokenFilledAmount & HIGH_BIT != 0) {\n                orderInfo.status = LibNativeOrder.OrderStatus.CANCELLED;\n                return;\n            }\n        }\n\n        // Check for expiration.\n        if (expiry <= uint64(block.timestamp)) {\n            orderInfo.status = LibNativeOrder.OrderStatus.EXPIRED;\n            return;\n        }\n\n        // Check if the order was cancelled by salt.\n        if (minValidSalt > salt) {\n            orderInfo.status = LibNativeOrder.OrderStatus.CANCELLED;\n            return;\n        }\n        orderInfo.status = LibNativeOrder.OrderStatus.FILLABLE;\n    }\n\n    /// @dev Calculate the actual fillable taker token amount of an order\n    ///      based on maker allowance and balances.\n    function _getActualFillableTakerTokenAmount(\n        GetActualFillableTakerTokenAmountParams memory params\n    )\n        private\n        view\n        returns (uint128 actualFillableTakerTokenAmount)\n    {\n        if (params.orderMakerAmount == 0 || params.orderTakerAmount == 0) {\n            // Empty order.\n            return 0;\n        }\n        if (params.orderInfo.status != LibNativeOrder.OrderStatus.FILLABLE) {\n            // Not fillable.\n            return 0;\n        }\n\n        // Get the fillable maker amount based on the order quantities and\n        // previously filled amount\n        uint256 fillableMakerTokenAmount = LibMathV06.getPartialAmountFloor(\n            uint256(\n                params.orderTakerAmount\n                - params.orderInfo.takerTokenFilledAmount\n            ),\n            uint256(params.orderTakerAmount),\n            uint256(params.orderMakerAmount)\n        );\n        // Clamp it to the amount of maker tokens we can spend on behalf of the\n        // maker.\n        fillableMakerTokenAmount = LibSafeMathV06.min256(\n            fillableMakerTokenAmount,\n            _getSpendableERC20BalanceOf(params.makerToken, params.maker)\n        );\n        // Convert to taker token amount.\n        return LibMathV06.getPartialAmountCeil(\n            fillableMakerTokenAmount,\n            uint256(params.orderMakerAmount),\n            uint256(params.orderTakerAmount)\n        ).safeDowncastToUint128();\n    }\n\n    /// @dev checks if a given address is registered to sign on behalf of a maker address\n    /// @param maker The maker address encoded in an order (can be a contract)\n    /// @param signer The address that is providing a signature\n    function isValidOrderSigner(\n        address maker,\n        address signer\n    )\n        public\n        view\n        returns (bool isValid)\n    {\n        // returns false if it the mapping doesn't exist\n        return LibNativeOrdersStorage.getStorage()\n            .orderSignerRegistry\n                [maker]\n                [signer];\n    }\n}\n",
        "../fixins/FixinEIP712.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\n/// @dev EIP712 helpers for features.\nabstract contract FixinEIP712 {\n\n    /// @dev The domain hash separator for the entire exchange proxy.\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\n\n    constructor(address zeroExAddress) internal {\n        // Compute `EIP712_DOMAIN_SEPARATOR`\n        {\n            uint256 chainId;\n            assembly { chainId := chainid() }\n            EIP712_DOMAIN_SEPARATOR = keccak256(\n                abi.encode(\n                    keccak256(\n                        \"EIP712Domain(\"\n                            \"string name,\"\n                            \"string version,\"\n                            \"uint256 chainId,\"\n                            \"address verifyingContract\"\n                        \")\"\n                    ),\n                    keccak256(\"ZeroEx\"),\n                    keccak256(\"1.0.0\"),\n                    chainId,\n                    zeroExAddress\n                )\n            );\n        }\n    }\n\n    function _getEIP712Hash(bytes32 structHash)\n        internal\n        view\n        returns (bytes32 eip712Hash)\n    {\n        return keccak256(abi.encodePacked(\n            hex\"1901\",\n            EIP712_DOMAIN_SEPARATOR,\n            structHash\n        ));\n    }\n}\n",
        "../fixins/FixinTokenSpender.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\n/// @dev Helpers for moving tokens around.\nabstract contract FixinTokenSpender {\n\n    // Mask of the lower 20 bytes of a bytes32.\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\n\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _transferERC20TokensFrom(\n        IERC20TokenV06 token,\n        address owner,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        require(address(token) != address(this), \"FixinTokenSpender/CANNOT_INVOKE_SELF\");\n\n        assembly {\n            let ptr := mload(0x40) // free memory pointer\n\n            // selector for transferFrom(address,address,uint256)\n            mstore(ptr, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(ptr, 0x04), and(owner, ADDRESS_MASK))\n            mstore(add(ptr, 0x24), and(to, ADDRESS_MASK))\n            mstore(add(ptr, 0x44), amount)\n\n            let success := call(\n                gas(),\n                and(token, ADDRESS_MASK),\n                0,\n                ptr,\n                0x64,\n                ptr,\n                32\n            )\n\n            let rdsize := returndatasize()\n\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\n            // but some don't. We accept 0-length return data as success, or at\n            // least 32 bytes that starts with a 32-byte boolean true.\n            success := and(\n                success,                             // call itself succeeded\n                or(\n                    iszero(rdsize),                  // no return data, or\n                    and(\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\n                        eq(mload(ptr), 1)            // starts with uint256(1)\n                    )\n                )\n            )\n\n            if iszero(success) {\n                returndatacopy(ptr, 0, rdsize)\n                revert(ptr, rdsize)\n            }\n        }\n    }\n\n    /// @dev Transfers ERC20 tokens from ourselves to `to`.\n    /// @param token The token to spend.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _transferERC20Tokens(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        require(address(token) != address(this), \"FixinTokenSpender/CANNOT_INVOKE_SELF\");\n\n        assembly {\n            let ptr := mload(0x40) // free memory pointer\n\n            // selector for transfer(address,uint256)\n            mstore(ptr, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(ptr, 0x04), and(to, ADDRESS_MASK))\n            mstore(add(ptr, 0x24), amount)\n\n            let success := call(\n                gas(),\n                and(token, ADDRESS_MASK),\n                0,\n                ptr,\n                0x44,\n                ptr,\n                32\n            )\n\n            let rdsize := returndatasize()\n\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\n            // but some don't. We accept 0-length return data as success, or at\n            // least 32 bytes that starts with a 32-byte boolean true.\n            success := and(\n                success,                             // call itself succeeded\n                or(\n                    iszero(rdsize),                  // no return data, or\n                    and(\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\n                        eq(mload(ptr), 1)            // starts with uint256(1)\n                    )\n                )\n            )\n\n            if iszero(success) {\n                returndatacopy(ptr, 0, rdsize)\n                revert(ptr, rdsize)\n            }\n        }\n    }\n\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\n    ///      pulled from `owner` by this address.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @return amount The amount of tokens that can be pulled.\n    function _getSpendableERC20BalanceOf(\n        IERC20TokenV06 token,\n        address owner\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        return LibSafeMathV06.min256(\n            token.allowance(owner, address(this)),\n            token.balanceOf(owner)\n        );\n    }\n}\n",
        "./native_orders/NativeOrdersProtocolFees.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../fixins/FixinProtocolFees.sol\";\nimport \"../../errors/LibNativeOrdersRichErrors.sol\";\nimport \"../../vendor/v3/IStaking.sol\";\n\n\n/// @dev Mixin for protocol fee utility functions.\nabstract contract NativeOrdersProtocolFees is\n    FixinProtocolFees\n{\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    constructor(\n        IEtherTokenV06 weth,\n        IStaking staking,\n        FeeCollectorController feeCollectorController,\n        uint32 protocolFeeMultiplier\n    )\n        internal\n        FixinProtocolFees(weth, staking, feeCollectorController, protocolFeeMultiplier)\n    {\n        // solhint-disable no-empty-blocks\n    }\n\n    /// @dev Transfers protocol fees from the `FeeCollector` pools into\n    ///      the staking contract.\n    /// @param poolIds Staking pool IDs\n    function transferProtocolFeesForPools(bytes32[] calldata poolIds)\n        external\n    {\n        for (uint256 i = 0; i < poolIds.length; ++i) {\n            _transferFeesForPool(poolIds[i]);\n        }\n    }\n\n    /// @dev Get the protocol fee multiplier. This should be multiplied by the\n    ///      gas price to arrive at the required protocol fee to fill a native order.\n    /// @return multiplier The protocol fee multiplier.\n    function getProtocolFeeMultiplier()\n        external\n        view\n        returns (uint32 multiplier)\n    {\n        return PROTOCOL_FEE_MULTIPLIER;\n    }\n}\n",
        "../fixins/FixinProtocolFees.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../external/FeeCollector.sol\";\nimport \"../external/FeeCollectorController.sol\";\nimport \"../external/LibFeeCollector.sol\";\nimport \"../vendor/v3/IStaking.sol\";\n\n\n/// @dev Helpers for collecting protocol fees.\nabstract contract FixinProtocolFees {\n\n    /// @dev The protocol fee multiplier.\n    uint32 public immutable PROTOCOL_FEE_MULTIPLIER;\n    /// @dev The `FeeCollectorController` contract.\n    FeeCollectorController private immutable FEE_COLLECTOR_CONTROLLER;\n    /// @dev Hash of the fee collector init code.\n    bytes32 private immutable FEE_COLLECTOR_INIT_CODE_HASH;\n    /// @dev The WETH token contract.\n    IEtherTokenV06 private immutable WETH;\n    /// @dev The staking contract.\n    IStaking private immutable STAKING;\n\n    constructor(\n        IEtherTokenV06 weth,\n        IStaking staking,\n        FeeCollectorController feeCollectorController,\n        uint32 protocolFeeMultiplier\n    )\n        internal\n    {\n        FEE_COLLECTOR_CONTROLLER = feeCollectorController;\n        FEE_COLLECTOR_INIT_CODE_HASH =\n            feeCollectorController.FEE_COLLECTOR_INIT_CODE_HASH();\n        WETH = weth;\n        STAKING = staking;\n        PROTOCOL_FEE_MULTIPLIER = protocolFeeMultiplier;\n    }\n\n    /// @dev   Collect the specified protocol fee in ETH.\n    ///        The fee is stored in a per-pool fee collector contract.\n    /// @param poolId The pool ID for which a fee is being collected.\n    /// @return ethProtocolFeePaid How much protocol fee was collected in ETH.\n    function _collectProtocolFee(bytes32 poolId)\n        internal\n        returns (uint256 ethProtocolFeePaid)\n    {\n        uint256 protocolFeePaid = _getSingleProtocolFee();\n        if (protocolFeePaid == 0) {\n            // Nothing to do.\n            return 0;\n        }\n        FeeCollector feeCollector = _getFeeCollector(poolId);\n        (bool success,) = address(feeCollector).call{value: protocolFeePaid}(\"\");\n        require(success, \"FixinProtocolFees/ETHER_TRANSFER_FALIED\");\n        return protocolFeePaid;\n    }\n\n    /// @dev Transfer fees for a given pool to the staking contract.\n    /// @param poolId Identifies the pool whose fees are being paid.\n    function _transferFeesForPool(bytes32 poolId)\n        internal\n    {\n        // This will create a FeeCollector contract (if necessary) and wrap\n        // fees for the pool ID.\n        FeeCollector feeCollector =\n            FEE_COLLECTOR_CONTROLLER.prepareFeeCollectorToPayFees(poolId);\n        // All fees in the fee collector should be in WETH now.\n        uint256 bal = WETH.balanceOf(address(feeCollector));\n        if (bal > 1) {\n            // Leave 1 wei behind to avoid high SSTORE cost of zero-->non-zero.\n            STAKING.payProtocolFee(\n                address(feeCollector),\n                address(feeCollector),\n                bal - 1);\n        }\n    }\n\n    /// @dev Compute the CREATE2 address for a fee collector.\n    /// @param poolId The fee collector's pool ID.\n    function _getFeeCollector(bytes32 poolId)\n        internal\n        view\n        returns (FeeCollector)\n    {\n        return FeeCollector(LibFeeCollector.getFeeCollectorAddress(\n            address(FEE_COLLECTOR_CONTROLLER),\n            FEE_COLLECTOR_INIT_CODE_HASH,\n            poolId\n        ));\n    }\n\n    /// @dev Get the cost of a single protocol fee.\n    /// @return protocolFeeAmount The protocol fee amount, in ETH/WETH.\n    function _getSingleProtocolFee()\n        internal\n        view\n        returns (uint256 protocolFeeAmount)\n    {\n        return uint256(PROTOCOL_FEE_MULTIPLIER) * tx.gasprice;\n    }\n}\n",
        "../external/FeeCollector.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/AuthorizableV06.sol\";\nimport \"../vendor/v3/IStaking.sol\";\n\n/// @dev The collector contract for protocol fees\ncontract FeeCollector is AuthorizableV06 {\n    /// @dev Allow ether transfers to the collector.\n    receive() external payable { }\n\n    constructor() public {\n        _addAuthorizedAddress(msg.sender);\n    }\n\n    /// @dev   Approve the staking contract and join a pool. Only an authority\n    ///        can call this.\n    /// @param weth The WETH contract.\n    /// @param staking The staking contract.\n    /// @param poolId The pool ID this contract is collecting fees for.\n    function initialize(\n        IEtherTokenV06 weth,\n        IStaking staking,\n        bytes32 poolId\n    )\n        external\n        onlyAuthorized\n    {\n        weth.approve(address(staking), type(uint256).max);\n        staking.joinStakingPoolAsMaker(poolId);\n    }\n\n    /// @dev Convert all held ether to WETH. Only an authority can call this.\n    /// @param weth The WETH contract.\n    function convertToWeth(\n        IEtherTokenV06 weth\n    )\n        external\n        onlyAuthorized\n    {\n        if (address(this).balance > 0) {\n            weth.deposit{value: address(this).balance}();\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/AuthorizableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./interfaces/IAuthorizableV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibAuthorizableRichErrorsV06.sol\";\nimport \"./OwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract AuthorizableV06 is\n    OwnableV06,\n    IAuthorizableV06\n{\n    /// @dev Only authorized addresses can invoke functions with this modifier.\n    modifier onlyAuthorized {\n        _assertSenderIsAuthorized();\n        _;\n    }\n\n    // @dev Whether an address is authorized to call privileged functions.\n    // @param 0 Address to query.\n    // @return 0 Whether the address is authorized.\n    mapping (address => bool) public override authorized;\n    // @dev Whether an address is authorized to call privileged functions.\n    // @param 0 Index of authorized address.\n    // @return 0 Authorized address.\n    address[] public override authorities;\n\n    /// @dev Initializes the `owner` address.\n    constructor()\n        public\n        OwnableV06()\n    {}\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        _addAuthorizedAddress(target);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external\n        override\n        onlyOwner\n    {\n        if (!authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\n        }\n        for (uint256 i = 0; i < authorities.length; i++) {\n            if (authorities[i] == target) {\n                _removeAuthorizedAddressAtIndex(target, i);\n                break;\n            }\n        }\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external\n        override\n        onlyOwner\n    {\n        _removeAuthorizedAddressAtIndex(target, index);\n    }\n\n    /// @dev Gets all authorized addresses.\n    /// @return Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        override\n        view\n        returns (address[] memory)\n    {\n        return authorities;\n    }\n\n    /// @dev Reverts if msg.sender is not authorized.\n    function _assertSenderIsAuthorized()\n        internal\n        view\n    {\n        if (!authorized[msg.sender]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.SenderNotAuthorizedError(msg.sender));\n        }\n    }\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function _addAuthorizedAddress(address target)\n        internal\n    {\n        // Ensure that the target is not the zero address.\n        if (target == address(0)) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.ZeroCantBeAuthorizedError());\n        }\n\n        // Ensure that the target is not already authorized.\n        if (authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetAlreadyAuthorizedError(target));\n        }\n\n        authorized[target] = true;\n        authorities.push(target);\n        emit AuthorizedAddressAdded(target, msg.sender);\n    }\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function _removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        internal\n    {\n        if (!authorized[target]) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.TargetNotAuthorizedError(target));\n        }\n        if (index >= authorities.length) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.IndexOutOfBoundsError(\n                index,\n                authorities.length\n            ));\n        }\n        if (authorities[index] != target) {\n            LibRichErrorsV06.rrevert(LibAuthorizableRichErrorsV06.AuthorizedAddressMismatchError(\n                authorities[index],\n                target\n            ));\n        }\n\n        delete authorized[target];\n        authorities[index] = authorities[authorities.length - 1];\n        authorities.pop();\n        emit AuthorizedAddressRemoved(target, msg.sender);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/interfaces/IAuthorizableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IOwnableV06.sol\";\n\n\ninterface IAuthorizableV06 is\n    IOwnableV06\n{\n    // Event logged when a new address is authorized.\n    event AuthorizedAddressAdded(\n        address indexed target,\n        address indexed caller\n    );\n\n    // Event logged when a currently authorized address is unauthorized.\n    event AuthorizedAddressRemoved(\n        address indexed target,\n        address indexed caller\n    );\n\n    /// @dev Authorizes an address.\n    /// @param target Address to authorize.\n    function addAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        external;\n\n    /// @dev Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    /// @param index Index of target in authorities array.\n    function removeAuthorizedAddressAtIndex(\n        address target,\n        uint256 index\n    )\n        external;\n\n    /// @dev Gets all authorized addresses.\n    /// @return authorizedAddresses Array of authorized addresses.\n    function getAuthorizedAddresses()\n        external\n        view\n        returns (address[] memory authorizedAddresses);\n\n    /// @dev Whether an adderss is authorized to call privileged functions.\n    /// @param addr Address to query.\n    /// @return isAuthorized Whether the address is authorized.\n    function authorized(address addr) external view returns (bool isAuthorized);\n\n    /// @dev All addresseses authorized to call privileged functions.\n    /// @param idx Index of authorized address.\n    /// @return addr Authorized address.\n    function authorities(uint256 idx) external view returns (address addr);\n\n}\n",
        "@0x/contracts-utils/contracts/src/v06/IOwnableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibAuthorizableRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibAuthorizableRichErrorsV06 {\n\n    // bytes4(keccak256(\"AuthorizedAddressMismatchError(address,address)\"))\n    bytes4 internal constant AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR =\n        0x140a84db;\n\n    // bytes4(keccak256(\"IndexOutOfBoundsError(uint256,uint256)\"))\n    bytes4 internal constant INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR =\n        0xe9f83771;\n\n    // bytes4(keccak256(\"SenderNotAuthorizedError(address)\"))\n    bytes4 internal constant SENDER_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xb65a25b9;\n\n    // bytes4(keccak256(\"TargetAlreadyAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR =\n        0xde16f1a0;\n\n    // bytes4(keccak256(\"TargetNotAuthorizedError(address)\"))\n    bytes4 internal constant TARGET_NOT_AUTHORIZED_ERROR_SELECTOR =\n        0xeb5108a2;\n\n    // bytes4(keccak256(\"ZeroCantBeAuthorizedError()\"))\n    bytes internal constant ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES =\n        hex\"57654fe4\";\n\n    // solhint-disable func-name-mixedcase\n    function AuthorizedAddressMismatchError(\n        address authorized,\n        address target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            AUTHORIZED_ADDRESS_MISMATCH_ERROR_SELECTOR,\n            authorized,\n            target\n        );\n    }\n\n    function IndexOutOfBoundsError(\n        uint256 index,\n        uint256 length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INDEX_OUT_OF_BOUNDS_ERROR_SELECTOR,\n            index,\n            length\n        );\n    }\n\n    function SenderNotAuthorizedError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SENDER_NOT_AUTHORIZED_ERROR_SELECTOR,\n            sender\n        );\n    }\n\n    function TargetAlreadyAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_ALREADY_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function TargetNotAuthorizedError(address target)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TARGET_NOT_AUTHORIZED_ERROR_SELECTOR,\n            target\n        );\n    }\n\n    function ZeroCantBeAuthorizedError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ZERO_CANT_BE_AUTHORIZED_ERROR_BYTES;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/OwnableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./interfaces/IOwnableV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibOwnableRichErrorsV06.sol\";\n\n\ncontract OwnableV06 is\n    IOwnableV06\n{\n    /// @dev The owner of this contract.\n    /// @return 0 The owner address.\n    address public override owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        _assertSenderIsOwner();\n        _;\n    }\n\n    /// @dev Change the owner of this contract.\n    /// @param newOwner New owner address.\n    function transferOwnership(address newOwner)\n        public\n        override\n        onlyOwner\n    {\n        if (newOwner == address(0)) {\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.TransferOwnerToZeroError());\n        } else {\n            owner = newOwner;\n            emit OwnershipTransferred(msg.sender, newOwner);\n        }\n    }\n\n    function _assertSenderIsOwner()\n        internal\n        view\n    {\n        if (msg.sender != owner) {\n            LibRichErrorsV06.rrevert(LibOwnableRichErrorsV06.OnlyOwnerError(\n                msg.sender,\n                owner\n            ));\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibOwnableRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrorsV06 {\n\n    // bytes4(keccak256(\"OnlyOwnerError(address,address)\"))\n    bytes4 internal constant ONLY_OWNER_ERROR_SELECTOR =\n        0x1de45ad1;\n\n    // bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n    bytes internal constant TRANSFER_OWNER_TO_ZERO_ERROR_BYTES =\n        hex\"e69edc3e\";\n\n    // solhint-disable func-name-mixedcase\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ONLY_OWNER_ERROR_SELECTOR,\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return TRANSFER_OWNER_TO_ZERO_ERROR_BYTES;\n    }\n}\n",
        "../external/FeeCollectorController.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../vendor/v3/IStaking.sol\";\nimport \"./FeeCollector.sol\";\nimport \"./LibFeeCollector.sol\";\n\n\n/// @dev A contract that manages `FeeCollector` contracts.\ncontract FeeCollectorController {\n\n    /// @dev Hash of the fee collector init code.\n    bytes32 public immutable FEE_COLLECTOR_INIT_CODE_HASH;\n    /// @dev The WETH contract.\n    IEtherTokenV06 private immutable WETH;\n    /// @dev The staking contract.\n    IStaking private immutable STAKING;\n\n    constructor(\n        IEtherTokenV06 weth,\n        IStaking staking\n    )\n        public\n    {\n        FEE_COLLECTOR_INIT_CODE_HASH = keccak256(type(FeeCollector).creationCode);\n        WETH = weth;\n        STAKING = staking;\n    }\n\n    /// @dev Deploy (if needed) a `FeeCollector` contract for `poolId`\n    ///      and wrap its ETH into WETH. Anyone may call this.\n    /// @param poolId The pool ID associated with the staking pool.\n    /// @return feeCollector The `FeeCollector` contract instance.\n    function prepareFeeCollectorToPayFees(bytes32 poolId)\n        external\n        returns (FeeCollector feeCollector)\n    {\n        feeCollector = getFeeCollector(poolId);\n        uint256 codeSize;\n        assembly {\n            codeSize := extcodesize(feeCollector)\n        }\n\n        if (codeSize == 0) {\n            // Create and initialize the contract if necessary.\n            new FeeCollector{salt: bytes32(poolId)}();\n            feeCollector.initialize(WETH, STAKING, poolId);\n        }\n\n        if (address(feeCollector).balance > 1) {\n            feeCollector.convertToWeth(WETH);\n        }\n\n        return feeCollector;\n    }\n\n    /// @dev Get the `FeeCollector` contract for a given pool ID. The contract\n    ///      will not actually exist until `prepareFeeCollectorToPayFees()`\n    ///      has been called once.\n    /// @param poolId The pool ID associated with the staking pool.\n    /// @return feeCollector The `FeeCollector` contract instance.\n    function getFeeCollector(bytes32 poolId)\n        public\n        view\n        returns (FeeCollector feeCollector)\n    {\n        return FeeCollector(LibFeeCollector.getFeeCollectorAddress(\n            address(this),\n            FEE_COLLECTOR_INIT_CODE_HASH,\n            poolId\n        ));\n    }\n}\n",
        "../external/LibFeeCollector.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Helpers for computing `FeeCollector` contract addresses.\nlibrary LibFeeCollector {\n\n    /// @dev Compute the CREATE2 address for a fee collector.\n    /// @param controller The address of the `FeeCollectorController` contract.\n    /// @param initCodeHash The init code hash of the `FeeCollector` contract.\n    /// @param poolId The fee collector's pool ID.\n    function getFeeCollectorAddress(address controller, bytes32 initCodeHash, bytes32 poolId)\n        internal\n        pure\n        returns (address payable feeCollectorAddress)\n    {\n        // Compute the CREATE2 address for the fee collector.\n        return address(uint256(keccak256(abi.encodePacked(\n            byte(0xff),\n            controller,\n            poolId, // pool ID is salt\n            initCodeHash\n        ))));\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/home/runner/work/protocol/protocol/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/home/runner/work/protocol/protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap",
                        "evm.methodIdentifiers"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
