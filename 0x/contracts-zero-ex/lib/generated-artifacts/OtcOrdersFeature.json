{
    "schemaVersion": "2.0.0",
    "contractName": "OtcOrdersFeature",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "zeroExAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IEtherTokenV06",
                        "name": "weth",
                        "type": "address"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "bytes32",
                        "name": "orderHash",
                        "type": "bytes32"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "maker",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "taker",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint128",
                        "name": "makerTokenFilledAmount",
                        "type": "uint128"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint128",
                        "name": "takerTokenFilledAmount",
                        "type": "uint128"
                    }
                ],
                "name": "OtcOrderFilled",
                "type": "event"
            },
            {
                "inputs": [],
                "name": "EIP712_DOMAIN_SEPARATOR",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "FEATURE_NAME",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "FEATURE_VERSION",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expiryAndNonce",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.OtcOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature",
                        "name": "makerSignature",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint128",
                        "name": "takerTokenFillAmount",
                        "type": "uint128"
                    },
                    {
                        "internalType": "address",
                        "name": "taker",
                        "type": "address"
                    },
                    {
                        "internalType": "bool",
                        "name": "useSelfBalance",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "recipient",
                        "type": "address"
                    }
                ],
                "name": "_fillOtcOrder",
                "outputs": [
                    {
                        "internalType": "uint128",
                        "name": "takerTokenFilledAmount",
                        "type": "uint128"
                    },
                    {
                        "internalType": "uint128",
                        "name": "makerTokenFilledAmount",
                        "type": "uint128"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expiryAndNonce",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.OtcOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature[]",
                        "name": "makerSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature[]",
                        "name": "takerSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "bool[]",
                        "name": "unwrapWeth",
                        "type": "bool[]"
                    }
                ],
                "name": "batchFillTakerSignedOtcOrders",
                "outputs": [
                    {
                        "internalType": "bool[]",
                        "name": "successes",
                        "type": "bool[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expiryAndNonce",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.OtcOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature",
                        "name": "makerSignature",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint128",
                        "name": "takerTokenFillAmount",
                        "type": "uint128"
                    }
                ],
                "name": "fillOtcOrder",
                "outputs": [
                    {
                        "internalType": "uint128",
                        "name": "takerTokenFilledAmount",
                        "type": "uint128"
                    },
                    {
                        "internalType": "uint128",
                        "name": "makerTokenFilledAmount",
                        "type": "uint128"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expiryAndNonce",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.OtcOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature",
                        "name": "makerSignature",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint128",
                        "name": "takerTokenFillAmount",
                        "type": "uint128"
                    }
                ],
                "name": "fillOtcOrderForEth",
                "outputs": [
                    {
                        "internalType": "uint128",
                        "name": "takerTokenFilledAmount",
                        "type": "uint128"
                    },
                    {
                        "internalType": "uint128",
                        "name": "makerTokenFilledAmount",
                        "type": "uint128"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expiryAndNonce",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.OtcOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature",
                        "name": "makerSignature",
                        "type": "tuple"
                    }
                ],
                "name": "fillOtcOrderWithEth",
                "outputs": [
                    {
                        "internalType": "uint128",
                        "name": "takerTokenFilledAmount",
                        "type": "uint128"
                    },
                    {
                        "internalType": "uint128",
                        "name": "makerTokenFilledAmount",
                        "type": "uint128"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expiryAndNonce",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.OtcOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature",
                        "name": "makerSignature",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature",
                        "name": "takerSignature",
                        "type": "tuple"
                    }
                ],
                "name": "fillTakerSignedOtcOrder",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expiryAndNonce",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.OtcOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature",
                        "name": "makerSignature",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum LibSignature.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct LibSignature.Signature",
                        "name": "takerSignature",
                        "type": "tuple"
                    }
                ],
                "name": "fillTakerSignedOtcOrderForEth",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expiryAndNonce",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.OtcOrder",
                        "name": "order",
                        "type": "tuple"
                    }
                ],
                "name": "getOtcOrderHash",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "orderHash",
                        "type": "bytes32"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "txOrigin",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expiryAndNonce",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.OtcOrder",
                        "name": "order",
                        "type": "tuple"
                    }
                ],
                "name": "getOtcOrderInfo",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "orderHash",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "enum LibNativeOrder.OrderStatus",
                                "name": "status",
                                "type": "uint8"
                            }
                        ],
                        "internalType": "struct LibNativeOrder.OtcOrderInfo",
                        "name": "orderInfo",
                        "type": "tuple"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "txOrigin",
                        "type": "address"
                    },
                    {
                        "internalType": "uint64",
                        "name": "nonceBucket",
                        "type": "uint64"
                    }
                ],
                "name": "lastOtcTxOriginNonce",
                "outputs": [
                    {
                        "internalType": "uint128",
                        "name": "lastNonce",
                        "type": "uint128"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "migrate",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "success",
                        "type": "bytes4"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "details": "Feature for interacting with OTC orders.",
            "kind": "dev",
            "methods": {
                "_fillOtcOrder((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32),uint128,address,bool,address)": {
                    "details": "Fill an OTC order for up to `takerTokenFillAmount` taker tokens.      Internal variant.",
                    "params": {
                        "makerSignature": "The order signature from the maker.",
                        "order": "The OTC order.",
                        "recipient": "The recipient of the bought maker tokens.",
                        "taker": "The address to fill the order in the context of.",
                        "takerTokenFillAmount": "Maximum taker token amount to fill this        order with.",
                        "useSelfBalance": "Whether to use the Exchange Proxy's balance        of input tokens."
                    },
                    "returns": {
                        "makerTokenFilledAmount": "How much maker token was filled.",
                        "takerTokenFilledAmount": "How much taker token was filled."
                    }
                },
                "batchFillTakerSignedOtcOrders((address,address,uint128,uint128,address,address,address,uint256)[],(uint8,uint8,bytes32,bytes32)[],(uint8,uint8,bytes32,bytes32)[],bool[])": {
                    "details": "Fills multiple taker-signed OTC orders.",
                    "params": {
                        "makerSignatures": "Array of maker signatures for each order.",
                        "orders": "Array of OTC orders.",
                        "takerSignatures": "Array of taker signatures for each order.",
                        "unwrapWeth": "Array of booleans representing whether or not         to unwrap bought WETH into ETH for each order. Should be set         to false if the maker token is not WETH."
                    },
                    "returns": {
                        "successes": "Array of booleans representing whether or not         each order in `orders` was filled successfully."
                    }
                },
                "fillOtcOrder((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32),uint128)": {
                    "details": "Fill an OTC order for up to `takerTokenFillAmount` taker tokens.",
                    "params": {
                        "makerSignature": "The order signature from the maker.",
                        "order": "The OTC order.",
                        "takerTokenFillAmount": "Maximum taker token amount to fill this        order with."
                    },
                    "returns": {
                        "makerTokenFilledAmount": "How much maker token was filled.",
                        "takerTokenFilledAmount": "How much taker token was filled."
                    }
                },
                "fillOtcOrderForEth((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32),uint128)": {
                    "details": "Fill an OTC order for up to `takerTokenFillAmount` taker tokens.      Unwraps bought WETH into ETH. before sending it to       the taker.",
                    "params": {
                        "makerSignature": "The order signature from the maker.",
                        "order": "The OTC order.",
                        "takerTokenFillAmount": "Maximum taker token amount to fill this        order with."
                    },
                    "returns": {
                        "makerTokenFilledAmount": "How much maker token was filled.",
                        "takerTokenFilledAmount": "How much taker token was filled."
                    }
                },
                "fillOtcOrderWithEth((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32))": {
                    "details": "Fill an OTC order whose taker token is WETH for up      to `msg.value`.",
                    "params": {
                        "makerSignature": "The order signature from the maker.",
                        "order": "The OTC order."
                    },
                    "returns": {
                        "makerTokenFilledAmount": "How much maker token was filled.",
                        "takerTokenFilledAmount": "How much taker token was filled."
                    }
                },
                "fillTakerSignedOtcOrder((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32),(uint8,uint8,bytes32,bytes32))": {
                    "details": "Fully fill an OTC order. \"Meta-transaction\" variant,      requires order to be signed by both maker and taker.",
                    "params": {
                        "makerSignature": "The order signature from the maker.",
                        "order": "The OTC order.",
                        "takerSignature": "The order signature from the taker."
                    }
                },
                "fillTakerSignedOtcOrderForEth((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32),(uint8,uint8,bytes32,bytes32))": {
                    "details": "Fully fill an OTC order. \"Meta-transaction\" variant,      requires order to be signed by both maker and taker.      Unwraps bought WETH into ETH. before sending it to       the taker.",
                    "params": {
                        "makerSignature": "The order signature from the maker.",
                        "order": "The OTC order.",
                        "takerSignature": "The order signature from the taker."
                    }
                },
                "getOtcOrderHash((address,address,uint128,uint128,address,address,address,uint256))": {
                    "details": "Get the canonical hash of an OTC order.",
                    "params": {
                        "order": "The OTC order."
                    },
                    "returns": {
                        "orderHash": "The order hash."
                    }
                },
                "getOtcOrderInfo((address,address,uint128,uint128,address,address,address,uint256))": {
                    "details": "Get the order info for an OTC order.",
                    "params": {
                        "order": "The OTC order."
                    },
                    "returns": {
                        "orderInfo": "Info about the order."
                    }
                },
                "lastOtcTxOriginNonce(address,uint64)": {
                    "details": "Get the last nonce used for a particular      tx.origin address and nonce bucket.",
                    "params": {
                        "nonceBucket": "The nonce bucket index.",
                        "txOrigin": "The address."
                    },
                    "returns": {
                        "lastNonce": "The last nonce value used."
                    }
                },
                "migrate()": {
                    "details": "Initialize and register this feature.      Should be delegatecalled by `Migrate.migrate()`.",
                    "returns": {
                        "success": "`LibMigrate.SUCCESS` on success."
                    }
                }
            },
            "stateVariables": {
                "ETH_TOKEN_ADDRESS": {
                    "details": "ETH pseudo-token address."
                },
                "FEATURE_NAME": {
                    "details": "Name of this feature."
                },
                "FEATURE_VERSION": {
                    "details": "Version of this feature."
                },
                "WETH": {
                    "details": "The WETH token contract."
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x61010060405262000014600160008062000101565b60c0523480156200002457600080fd5b5060405162002e6038038062002e60833981016040819052620000479162000133565b3060601b60805260405182904690620000cd907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f907f9e5dae0addaf20578aeb5d70341d092b53b4e14480ac5726438fd436df7ba427907f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c908590879060200162000171565b60408051808303601f19018152919052805160209091012060a052505060601b6001600160601b03191660e05250620001b6565b6bffffffff0000000000000000604084901b1667ffffffff00000000602084901b161763ffffffff8216179392505050565b6000806040838503121562000146578182fd5b825162000153816200019d565b602084015190925062000166816200019d565b809150509250929050565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b6001600160a01b0381168114620001b357600080fd5b50565b60805160601c60a05160c05160e05160601c612c416200021f6000398061045152806104a9528061060a528061069d528061076952806108755280610bfb5280610cef5250806102d2525080610dcb528061183052508061102052806119705250612c416000f3fe6080604052600436106100dd5760003560e01c80638c807c431161007f578063dab400f311610059578063dab400f31461024e578063dac748d414610263578063e4ba843914610283578063e52d1764146102a3576100dd565b80638c807c43146101df5780638fd3ab801461020c578063a578efaf1461022e576100dd565b806359ebfb45116100bb57806359ebfb451461014f5780636ae4b4f71461017c578063706394d51461019e578063724d3953146101bf576100dd565b8063031b905c146100e25780634f9481101461010d57806353476b891461012f575b600080fd5b3480156100ee57600080fd5b506100f76102d0565b604051610104919061264b565b60405180910390f35b34801561011957600080fd5b5061012d61012836600461242a565b6102f4565b005b34801561013b57600080fd5b506100f761014a3660046123d8565b610399565b34801561015b57600080fd5b5061016f61016a366004612285565b6103b4565b6040516101049190612af2565b34801561018857600080fd5b50610191610413565b60405161010491906127c7565b6101b16101ac3660046123f4565b61044c565b604051610104929190612b0f565b3480156101cb57600080fd5b5061012d6101da36600461242a565b610767565b3480156101eb57600080fd5b506101ff6101fa3660046123d8565b61094e565b6040516101049190612a0f565b34801561021857600080fd5b50610221610a35565b604051610104919061270c565b34801561023a57600080fd5b506101b1610249366004612472565b610bf6565b34801561025a57600080fd5b506100f7610dc9565b34801561026f57600080fd5b506101b161027e366004612472565b610ded565b34801561028f57600080fd5b506101b161029e3660046124bd565b610e64565b3480156102af57600080fd5b506102c36102be3660046122c9565b610f13565b6040516101049190612605565b7f000000000000000000000000000000000000000000000000000000000000000081565b6102fc612052565b6103058461094e565b9050600061031782600001518461119d565b9050610325858386846112ee565b61033585866060015183846114d1565b50507fac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f8260000151866080015183886000015189602001518a604001518b6060015160405161038a9796959493929190612680565b60405180910390a15050505050565b60006103ac6103a783611717565b61182c565b90505b919050565b6000806103bf61187e565b73ffffffffffffffffffffffffffffffffffffffff851660009081526020918252604080822067ffffffffffffffff8716835290925220546fffffffffffffffffffffffffffffffff169150505b92915050565b6040518060400160405280600981526020017f4f74634f7264657273000000000000000000000000000000000000000000000081525081565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff16141561052d577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561050f57600080fd5b505af1158015610523573d6000803e3d6000fd5b505050505061059d565b602084015173ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461059d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610594906129b2565b60405180910390fd5b6105a5612052565b6105ae8561094e565b90506105bc858286336112ee565b6105d0856105c93461188b565b30336114d1565b9093509150346fffffffffffffffffffffffffffffffff84161015610711576000836fffffffffffffffffffffffffffffffff16340390507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16866020015173ffffffffffffffffffffffffffffffffffffffff161415610705576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d906106d290849060040161264b565b600060405180830381600087803b1580156106ec57600080fd5b505af1158015610700573d6000803e3d6000fd5b505050505b61070f33826118b7565b505b80516080860151865160208801516040517fac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f946107579490939092339289908b90612680565b60405180910390a1509250929050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff16146107f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059490612818565b6107f8612052565b6108018461094e565b9050600061081382600001518461119d565b9050610821858386846112ee565b61083185866060015183306114d1565b505060408086015190517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691632e1a7d4d916108a99190600401612af2565b600060405180830381600087803b1580156108c357600080fd5b505af11580156108d7573d6000803e3d6000fd5b505050506108fb8186604001516fffffffffffffffffffffffffffffffff166118b7565b7fac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f8260000151866080015183886000015189602001518a604001518b6060015160405161038a9796959493929190612680565b610956612052565b61095f82610399565b8152600061096b61187e565b60e084015160c08086015173ffffffffffffffffffffffffffffffffffffffff16600090815260208481526040808320608086901c67ffffffffffffffff811685529252909120549394509082901c929091906fffffffffffffffffffffffffffffffff90811690821681106109fd576020860160005b908160048111156109ef57fe5b8152505050505050506103af565b4267ffffffffffffffff168467ffffffffffffffff1611610a23576020860160046109e2565b50506001602085015250919392505050565b6000610a607fdac748d40000000000000000000000000000000000000000000000000000000061193a565b610a897fa578efaf0000000000000000000000000000000000000000000000000000000061193a565b610ab27f706394d50000000000000000000000000000000000000000000000000000000061193a565b610adb7f724d39530000000000000000000000000000000000000000000000000000000061193a565b610b047f4f9481100000000000000000000000000000000000000000000000000000000061193a565b610b2d7fe52d17640000000000000000000000000000000000000000000000000000000061193a565b610b567fe4ba84390000000000000000000000000000000000000000000000000000000061193a565b610b7f7f8c807c430000000000000000000000000000000000000000000000000000000061193a565b610ba87f53476b890000000000000000000000000000000000000000000000000000000061193a565b610bd17f59ebfb450000000000000000000000000000000000000000000000000000000061193a565b507f2c64c5ef0000000000000000000000000000000000000000000000000000000090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff1614610c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610594906128f8565b610c8a612052565b610c938661094e565b9050610ca1868287336112ee565b610cad868533306114d1565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152919450925073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610d24908590600401612af2565b600060405180830381600087803b158015610d3e57600080fd5b505af1158015610d52573d6000803e3d6000fd5b50505050610d7233836fffffffffffffffffffffffffffffffff166118b7565b80516080870151875160208901516040517fac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f94610db89490939092339289908b90612680565b60405180910390a150935093915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080610df8612052565b610e018661094e565b9050610e0f868287336112ee565b610e1b868533336114d1565b82516080890151895160208b01516040519598509396507fac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f94610db89433929189908b90612680565b600080333014610e7f57610e7f610e7a336119cd565b611a85565b610e87612052565b610e908961094e565b9050610e9e89828a896112ee565b610eb6898887610eae5788610eb0565b305b876114d1565b825160808c01518c5160208e01516040519598509396507fac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f94610eff948c929189908b90612680565b60405180910390a150965096945050505050565b606083518551148015610f27575082518551145b8015610f34575081518551145b610f6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059490612875565b845167ffffffffffffffff81118015610f8257600080fd5b50604051908082528060200260200182016040528015610fac578160200160208202803683370190505b50905060005b85518114611194576000838281518110610fc857fe5b6020026020010151610ffa577f4f9481100000000000000000000000000000000000000000000000000000000061101c565b7f724d3953000000000000000000000000000000000000000000000000000000005b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168188848151811061106257fe5b602002602001015188858151811061107657fe5b602002602001015188868151811061108a57fe5b60200260200101516040516024016110a493929190612a34565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161112d919061258f565b600060405180830381855af49150503d8060008114611168576040519150601f19603f3d011682016040523d82523d6000602084013e61116d565b606091505b505083838151811061117b57fe5b9115156020928302919091019091015250600101610fb2565b50949350505050565b60006111a98383611a8d565b6002825160038111156111b857fe5b141561122057600183836020015184604001518560600151604051600081526020016040526040516111ed94939291906126ee565b6020604051602081039080840390855afa15801561120f573d6000803e3d6000fd5b5050506020604051035190506112c5565b60038251600381111561122f57fe5b14156112c55760007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005283601c52603c60002090506001818460200151856040015186606001516040516000815260200160405260405161129594939291906126ee565b6020604051602081039080840390855afa1580156112b7573d6000803e3d6000fd5b505050602060405103519150505b73ffffffffffffffffffffffffffffffffffffffff811661040d5761040d610e7a600585611b41565b60018360200151600481111561130057fe5b1461132557611325610e7a84600001518560200151600481111561132057fe5b611bfc565b60a084015173ffffffffffffffffffffffffffffffffffffffff161580159061137e57508073ffffffffffffffffffffffffffffffffffffffff168460a0015173ffffffffffffffffffffffffffffffffffffffff1614155b1561139957611399610e7a8460000151838760a00151611c32565b60006113a3611cf0565b60c086015190915073ffffffffffffffffffffffffffffffffffffffff163214801590611407575060c085015173ffffffffffffffffffffffffffffffffffffffff166000908152600382016020908152604080832032845290915290205460ff16155b1561142257611422610e7a8560000151328860c00151611cfd565b600061143285600001518561119d565b9050856080015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156114ae5750608086015173ffffffffffffffffffffffffffffffffffffffff908116600090815260048401602090815260408083209385168352929052205460ff16155b156114c9576114c9610e7a8660000151838960800151611d35565b505050505050565b60e08401516000908190608081901c90806114ea61187e565b60c08a015173ffffffffffffffffffffffffffffffffffffffff1660009081526020918252604080822067ffffffffffffffff969096168252949091529290922080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff93841617905550606087015181169086161415611588575050606084015160408501516115e4565b611596858760600151611d6d565b91506115e1826fffffffffffffffffffffffffffffffff1687606001516fffffffffffffffffffffffffffffffff1688604001516fffffffffffffffffffffffffffffffff16611da9565b90505b73ffffffffffffffffffffffffffffffffffffffff84163014156116c257602086015173ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561169857608086015160405173ffffffffffffffffffffffffffffffffffffffff909116906fffffffffffffffffffffffffffffffff841680156108fc02916000818181858888f19350505050158015611692573d6000803e3d6000fd5b506116bd565b6116bd86602001518760800151846fffffffffffffffffffffffffffffffff16611dc7565b6116e8565b6116e88660200151858860800151856fffffffffffffffffffffffffffffffff16611ea1565b61170e8660000151876080015185846fffffffffffffffffffffffffffffffff16611ea1565b94509492505050565b60006040517f2f754524de756ae72459efbe1ec88c19a745639821de528ac3fb88f9e65e35c88152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff166080820152608083015173ffffffffffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e08301516101008201526101208120915050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000826040516020016118619291906125ab565b604051602081830303815290604052805190602001209050919050565b60008061040d6008611fa0565b60006fffffffffffffffffffffffffffffffff8211156118b3576118b3610e7a600384611fbb565b5090565b600060608373ffffffffffffffffffffffffffffffffffffffff16836040516118df906125e1565b60006040518083038185875af1925050503d806000811461191c576040519150601f19603f3d011682016040523d82523d6000602084013e611921565b606091505b5091509150816119345761193481611a85565b50505050565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb906119989084907f000000000000000000000000000000000000000000000000000000000000000090600401612739565b600060405180830381600087803b1580156119b257600080fd5b505af11580156119c6573d6000803e3d6000fd5b5050505050565b60607ff0ec779b0bcda6d84abf99ee2c67647d1100ebbb553a9c2d1c2ba1579592832c82604051602401611a0191906125e4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050919050565b805160208201fd5b60408101517ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141111580611ae4575060608101517f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a111155b15611af757611af7610e7a600584611b41565b600081516003811115611b0657fe5b1415611b1a57611b1a610e7a600384611b41565b600181516003811115611b2957fe5b1415611b3d57611b3d610e7a600084611b41565b5050565b60607ff18f11f3027e735c758137924b262d4d3aff0037dcd785aca3c699fa05d960bd8383604051602401611b779291906127b9565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b60607f47ab394e41470191eaf9fa542e84ac483a12665fbd616eb8d1c022ced6c940008383604051602401611b779291906126dd565b60607f5d3300180a4547b3e27137be832d3ebf56f1ba5ebb30dd580999c61f77fa6396848484604051602401611c6a93929190612654565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b60008061040d6007611fa0565b60607fc0972f3cc4234ca2091de7e7bc7081494bd29ac280167d66f0d44168973b1634848484604051602401611c6a93929190612654565b60607ff13e65d925201525f3d71a731833b19bb26e44cfbd97caf72a366b73866f7124848484604051602401611c6a93929190612654565b6000816fffffffffffffffffffffffffffffffff16836fffffffffffffffffffffffffffffffff1610611da05781611da2565b825b9392505050565b6000611dbf83611db98685611fd8565b90612009565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff8316301415611e17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059490612955565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152816024820152602081604483600073ffffffffffffffffffffffffffffffffffffffff89165af13d600183511460208210151681151782169150816114c957806000843e8083fd5b73ffffffffffffffffffffffffffffffffffffffff8416301415611ef1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059490612955565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015273ffffffffffffffffffffffffffffffffffffffff83166024820152816044820152602081606483600073ffffffffffffffffffffffffffffffffffffffff8a165af13d60018351146020821015168115178216915081611f9757806000843e8083fd5b50505050505050565b60006080826008811115611fb057fe5b600101901b92915050565b606063c996af7b60e01b8383604051602401611b779291906127a2565b600082611fe75750600061040d565b82820282848281611ff457fe5b0414611da257611da2610e7a60018686612033565b60008161201f5761201f610e7a60038585612033565b600082848161202a57fe5b04949350505050565b606063e946c1bb60e01b848484604051602401611c6a93929190612781565b604080518082019091526000808252602082015290565b803561040d81612bcb565b600082601f830112612084578081fd5b813561209761209282612b59565b612b32565b8181529150602080830190848101818402860182018710156120b857600080fd5b6000805b858110156120e557823580151581146120d3578283fd5b855293830193918301916001016120bc565b50505050505092915050565b600082601f830112612101578081fd5b813561210f61209282612b59565b818152915060208083019084810160808085028701830188101561213257600080fd5b60005b858110156120e5576121478984612202565b85529383019391810191600101612135565b600061010080838503121561216c578182fd5b61217581612b32565b915050813561218381612bcb565b8152602082013561219381612bcb565b60208201526121a58360408401612265565b60408201526121b78360608401612265565b60608201526121c98360808401612069565b60808201526121db8360a08401612069565b60a08201526121ed8360c08401612069565b60c082015260e082013560e082015292915050565b600060808284031215612213578081fd5b61221d6080612b32565b905081356004811061222e57600080fd5b8152602082013560ff8116811461224457600080fd5b80602083015250604082013560408201526060820135606082015292915050565b80356fffffffffffffffffffffffffffffffff8116811461040d57600080fd5b60008060408385031215612297578182fd5b82356122a281612bcb565b9150602083013567ffffffffffffffff811681146122be578182fd5b809150509250929050565b600080600080608085870312156122de578182fd5b843567ffffffffffffffff808211156122f5578384fd5b818701915087601f830112612308578384fd5b813561231661209282612b59565b80828252602080830192508086016101008d838288028a0101111561233957898afd5b8997505b858810156123655761234f8e83612159565b855260019790970196938201939081019061233d565b509199508a013594505050508082111561237d578384fd5b612389888389016120f1565b9450604087013591508082111561239e578384fd5b6123aa888389016120f1565b935060608701359150808211156123bf578283fd5b506123cc87828801612074565b91505092959194509250565b600061010082840312156123ea578081fd5b611da28383612159565b6000806101808385031215612407578182fd5b6124118484612159565b9150612421846101008501612202565b90509250929050565b6000806000610200848603121561243f578283fd5b6124498585612159565b9250612459856101008601612202565b9150612469856101808601612202565b90509250925092565b60008060006101a08486031215612487578283fd5b6124918585612159565b92506124a1856101008601612202565b91506101808401356124b281612bed565b809150509250925092565b60008060008060008061020087890312156124d6578384fd5b6124e08888612159565b95506124f0886101008901612202565b945061018087013561250181612bed565b93506101a087013561251281612bcb565b92506101c08701358015158114612527578283fd5b91506101e087013561253881612bcb565b809150509295509295509295565b73ffffffffffffffffffffffffffffffffffffffff169052565b805161256b81612bbe565b825260208181015160ff169083015260408082015190830152606090810151910152565b600082516125a1818460208701612b92565b9190910192915050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b90565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6020808252825182820181905260009190848201906040850190845b8181101561263f578351151583529284019291840191600101612621565b50909695505050505050565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b96875273ffffffffffffffffffffffffffffffffffffffff95861660208801529385166040870152918416606086015290921660808401526fffffffffffffffffffffffffffffffff91821660a08401521660c082015260e00190565b91825260ff16602082015260400190565b93845260ff9290921660208401526040830152606082015260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b6060810161278e85612bbe565b938152602081019290925260409091015290565b604081016127af84612bbe565b9281526020015290565b60408101600684106127af57fe5b60006020825282518060208401526127e6816040850160208701612b92565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252603e908201527f4f74634f7264657273466561747572653a3a66696c6c54616b65725369676e6560408201527f644f74634f726465722f4d414b45525f544f4b454e5f4e4f545f574554480000606082015260800190565b60208082526048908201527f4f74634f7264657273466561747572653a3a626174636846696c6c54616b657260408201527f5369676e65644f74634f72646572732f4d49534d4154434845445f415252415960608201527f5f4c454e47544853000000000000000000000000000000000000000000000000608082015260a00190565b60208082526039908201527f4f74634f7264657273466561747572653a3a66696c6c4f74634f72646572466f60408201527f724574682f4d414b45525f544f4b454e5f4e4f545f5745544800000000000000606082015260800190565b60208082526024908201527f466978696e546f6b656e5370656e6465722f43414e4e4f545f494e564f4b455f60408201527f53454c4600000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526039908201527f4f74634f7264657273466561747572653a3a66696c6c4f74634f72646572576960408201527f74684574682f494e56414c49445f54414b45525f544f4b454e00000000000000606082015260800190565b815181526020820151604082019060058110612a2757fe5b8060208401525092915050565b8351610200820190612a4590612b79565b825273ffffffffffffffffffffffffffffffffffffffff602086015116602083015260408501516fffffffffffffffffffffffffffffffff808216604085015280606088015116606085015250506080850151612aa56080840182612546565b5060a0850151612ab860a0840182612546565b5060c0850151612acb60c0840182612546565b5060e085015160e0830152612ae4610100830185612560565b611dbf610180830184612560565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b60405181810167ffffffffffffffff81118282101715612b5157600080fd5b604052919050565b600067ffffffffffffffff821115612b6f578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff1690565b60005b83811015612bad578181015183820152602001612b95565b838111156119345750506000910152565b60048110612bc857fe5b50565b73ffffffffffffffffffffffffffffffffffffffff81168114612bc857600080fd5b6fffffffffffffffffffffffffffffffff81168114612bc857600080fdfea2646970667358221220e3a6ebf3b03a77fb264b9c0933b12fa777790430c4e301225825301af5c4912964736f6c634300060c0033",
                "opcodes": "PUSH2 0x100 PUSH1 0x40 MSTORE PUSH3 0x14 PUSH1 0x1 PUSH1 0x0 DUP1 PUSH3 0x101 JUMP JUMPDEST PUSH1 0xC0 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2E60 CODESIZE SUB DUP1 PUSH3 0x2E60 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x47 SWAP2 PUSH3 0x133 JUMP JUMPDEST ADDRESS PUSH1 0x60 SHL PUSH1 0x80 MSTORE PUSH1 0x40 MLOAD DUP3 SWAP1 CHAINID SWAP1 PUSH3 0xCD SWAP1 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F SWAP1 PUSH32 0x9E5DAE0ADDAF20578AEB5D70341D092B53B4E14480AC5726438FD436DF7BA427 SWAP1 PUSH32 0x6C015BD22B4C69690933C1058878EBDFEF31F9AAAE40BBE86D8A09FE1B2972C SWAP1 DUP6 SWAP1 DUP8 SWAP1 PUSH1 0x20 ADD PUSH3 0x171 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0xA0 MSTORE POP POP PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0xE0 MSTORE POP PUSH3 0x1B6 JUMP JUMPDEST PUSH12 0xFFFFFFFF0000000000000000 PUSH1 0x40 DUP5 SWAP1 SHL AND PUSH8 0xFFFFFFFF00000000 PUSH1 0x20 DUP5 SWAP1 SHL AND OR PUSH4 0xFFFFFFFF DUP3 AND OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x146 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH3 0x153 DUP2 PUSH3 0x19D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x166 DUP2 PUSH3 0x19D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH1 0x60 SHR PUSH2 0x2C41 PUSH3 0x21F PUSH1 0x0 CODECOPY DUP1 PUSH2 0x451 MSTORE DUP1 PUSH2 0x4A9 MSTORE DUP1 PUSH2 0x60A MSTORE DUP1 PUSH2 0x69D MSTORE DUP1 PUSH2 0x769 MSTORE DUP1 PUSH2 0x875 MSTORE DUP1 PUSH2 0xBFB MSTORE DUP1 PUSH2 0xCEF MSTORE POP DUP1 PUSH2 0x2D2 MSTORE POP DUP1 PUSH2 0xDCB MSTORE DUP1 PUSH2 0x1830 MSTORE POP DUP1 PUSH2 0x1020 MSTORE DUP1 PUSH2 0x1970 MSTORE POP PUSH2 0x2C41 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDD JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8C807C43 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xDAB400F3 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xDAB400F3 EQ PUSH2 0x24E JUMPI DUP1 PUSH4 0xDAC748D4 EQ PUSH2 0x263 JUMPI DUP1 PUSH4 0xE4BA8439 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0xE52D1764 EQ PUSH2 0x2A3 JUMPI PUSH2 0xDD JUMP JUMPDEST DUP1 PUSH4 0x8C807C43 EQ PUSH2 0x1DF JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0x20C JUMPI DUP1 PUSH4 0xA578EFAF EQ PUSH2 0x22E JUMPI PUSH2 0xDD JUMP JUMPDEST DUP1 PUSH4 0x59EBFB45 GT PUSH2 0xBB JUMPI DUP1 PUSH4 0x59EBFB45 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x706394D5 EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0x724D3953 EQ PUSH2 0x1BF JUMPI PUSH2 0xDD JUMP JUMPDEST DUP1 PUSH4 0x31B905C EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0x4F948110 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x53476B89 EQ PUSH2 0x12F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x2D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x264B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12D PUSH2 0x128 CALLDATASIZE PUSH1 0x4 PUSH2 0x242A JUMP JUMPDEST PUSH2 0x2F4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x23D8 JUMP JUMPDEST PUSH2 0x399 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16F PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0x2285 JUMP JUMPDEST PUSH2 0x3B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x2AF2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x191 PUSH2 0x413 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x27C7 JUMP JUMPDEST PUSH2 0x1B1 PUSH2 0x1AC CALLDATASIZE PUSH1 0x4 PUSH2 0x23F4 JUMP JUMPDEST PUSH2 0x44C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP3 SWAP2 SWAP1 PUSH2 0x2B0F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12D PUSH2 0x1DA CALLDATASIZE PUSH1 0x4 PUSH2 0x242A JUMP JUMPDEST PUSH2 0x767 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FF PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0x23D8 JUMP JUMPDEST PUSH2 0x94E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x2A0F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x218 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x221 PUSH2 0xA35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x270C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B1 PUSH2 0x249 CALLDATASIZE PUSH1 0x4 PUSH2 0x2472 JUMP JUMPDEST PUSH2 0xBF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0xDC9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B1 PUSH2 0x27E CALLDATASIZE PUSH1 0x4 PUSH2 0x2472 JUMP JUMPDEST PUSH2 0xDED JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B1 PUSH2 0x29E CALLDATASIZE PUSH1 0x4 PUSH2 0x24BD JUMP JUMPDEST PUSH2 0xE64 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH2 0x2BE CALLDATASIZE PUSH1 0x4 PUSH2 0x22C9 JUMP JUMPDEST PUSH2 0xF13 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x2605 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2FC PUSH2 0x2052 JUMP JUMPDEST PUSH2 0x305 DUP5 PUSH2 0x94E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x317 DUP3 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0x119D JUMP JUMPDEST SWAP1 POP PUSH2 0x325 DUP6 DUP4 DUP7 DUP5 PUSH2 0x12EE JUMP JUMPDEST PUSH2 0x335 DUP6 DUP7 PUSH1 0x60 ADD MLOAD DUP4 DUP5 PUSH2 0x14D1 JUMP JUMPDEST POP POP PUSH32 0xAC75F773E3A92F1A02B12134D65E1F47F8A14EABE4EAF1E24624918E6A8B269F DUP3 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP4 DUP9 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x40 ADD MLOAD DUP12 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x38A SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2680 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AC PUSH2 0x3A7 DUP4 PUSH2 0x1717 JUMP JUMPDEST PUSH2 0x182C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3BF PUSH2 0x187E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH8 0xFFFFFFFFFFFFFFFF DUP8 AND DUP4 MSTORE SWAP1 SWAP3 MSTORE KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4F74634F72646572730000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x52D JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 CALLVALUE PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x50F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x523 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x59D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ PUSH2 0x59D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x594 SWAP1 PUSH2 0x29B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5A5 PUSH2 0x2052 JUMP JUMPDEST PUSH2 0x5AE DUP6 PUSH2 0x94E JUMP JUMPDEST SWAP1 POP PUSH2 0x5BC DUP6 DUP3 DUP7 CALLER PUSH2 0x12EE JUMP JUMPDEST PUSH2 0x5D0 DUP6 PUSH2 0x5C9 CALLVALUE PUSH2 0x188B JUMP JUMPDEST ADDRESS CALLER PUSH2 0x14D1 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP CALLVALUE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND LT ISZERO PUSH2 0x711 JUMPI PUSH1 0x0 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLVALUE SUB SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x705 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x6D2 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x264B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x700 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH2 0x70F CALLER DUP3 PUSH2 0x18B7 JUMP JUMPDEST POP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP7 ADD MLOAD DUP7 MLOAD PUSH1 0x20 DUP9 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xAC75F773E3A92F1A02B12134D65E1F47F8A14EABE4EAF1E24624918E6A8B269F SWAP5 PUSH2 0x757 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 CALLER SWAP3 DUP10 SWAP1 DUP12 SWAP1 PUSH2 0x2680 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x7F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x594 SWAP1 PUSH2 0x2818 JUMP JUMPDEST PUSH2 0x7F8 PUSH2 0x2052 JUMP JUMPDEST PUSH2 0x801 DUP5 PUSH2 0x94E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x813 DUP3 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0x119D JUMP JUMPDEST SWAP1 POP PUSH2 0x821 DUP6 DUP4 DUP7 DUP5 PUSH2 0x12EE JUMP JUMPDEST PUSH2 0x831 DUP6 DUP7 PUSH1 0x60 ADD MLOAD DUP4 ADDRESS PUSH2 0x14D1 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 DUP7 ADD MLOAD SWAP1 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP2 PUSH4 0x2E1A7D4D SWAP2 PUSH2 0x8A9 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x2AF2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x8FB DUP2 DUP7 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x18B7 JUMP JUMPDEST PUSH32 0xAC75F773E3A92F1A02B12134D65E1F47F8A14EABE4EAF1E24624918E6A8B269F DUP3 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP4 DUP9 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x40 ADD MLOAD DUP12 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x38A SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2680 JUMP JUMPDEST PUSH2 0x956 PUSH2 0x2052 JUMP JUMPDEST PUSH2 0x95F DUP3 PUSH2 0x399 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH2 0x96B PUSH2 0x187E JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MLOAD PUSH1 0xC0 DUP1 DUP7 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x80 DUP7 SWAP1 SHR PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP6 MSTORE SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP4 SWAP5 POP SWAP1 DUP3 SWAP1 SHR SWAP3 SWAP1 SWAP2 SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP3 AND DUP2 LT PUSH2 0x9FD JUMPI PUSH1 0x20 DUP7 ADD PUSH1 0x0 JUMPDEST SWAP1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x9EF JUMPI INVALID JUMPDEST DUP2 MSTORE POP POP POP POP POP POP POP PUSH2 0x3AF JUMP JUMPDEST TIMESTAMP PUSH8 0xFFFFFFFFFFFFFFFF AND DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0xA23 JUMPI PUSH1 0x20 DUP7 ADD PUSH1 0x4 PUSH2 0x9E2 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x20 DUP6 ADD MSTORE POP SWAP2 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA60 PUSH32 0xDAC748D400000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xA89 PUSH32 0xA578EFAF00000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xAB2 PUSH32 0x706394D500000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xADB PUSH32 0x724D395300000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xB04 PUSH32 0x4F94811000000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xB2D PUSH32 0xE52D176400000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xB56 PUSH32 0xE4BA843900000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xB7F PUSH32 0x8C807C4300000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xBA8 PUSH32 0x53476B8900000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xBD1 PUSH32 0x59EBFB4500000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC82 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x594 SWAP1 PUSH2 0x28F8 JUMP JUMPDEST PUSH2 0xC8A PUSH2 0x2052 JUMP JUMPDEST PUSH2 0xC93 DUP7 PUSH2 0x94E JUMP JUMPDEST SWAP1 POP PUSH2 0xCA1 DUP7 DUP3 DUP8 CALLER PUSH2 0x12EE JUMP JUMPDEST PUSH2 0xCAD DUP7 DUP6 CALLER ADDRESS PUSH2 0x14D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP5 POP SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xD24 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2AF2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD52 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xD72 CALLER DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x18B7 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP8 ADD MLOAD DUP8 MLOAD PUSH1 0x20 DUP10 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xAC75F773E3A92F1A02B12134D65E1F47F8A14EABE4EAF1E24624918E6A8B269F SWAP5 PUSH2 0xDB8 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 CALLER SWAP3 DUP10 SWAP1 DUP12 SWAP1 PUSH2 0x2680 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDF8 PUSH2 0x2052 JUMP JUMPDEST PUSH2 0xE01 DUP7 PUSH2 0x94E JUMP JUMPDEST SWAP1 POP PUSH2 0xE0F DUP7 DUP3 DUP8 CALLER PUSH2 0x12EE JUMP JUMPDEST PUSH2 0xE1B DUP7 DUP6 CALLER CALLER PUSH2 0x14D1 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x80 DUP10 ADD MLOAD DUP10 MLOAD PUSH1 0x20 DUP12 ADD MLOAD PUSH1 0x40 MLOAD SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH32 0xAC75F773E3A92F1A02B12134D65E1F47F8A14EABE4EAF1E24624918E6A8B269F SWAP5 PUSH2 0xDB8 SWAP5 CALLER SWAP3 SWAP2 DUP10 SWAP1 DUP12 SWAP1 PUSH2 0x2680 JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER ADDRESS EQ PUSH2 0xE7F JUMPI PUSH2 0xE7F PUSH2 0xE7A CALLER PUSH2 0x19CD JUMP JUMPDEST PUSH2 0x1A85 JUMP JUMPDEST PUSH2 0xE87 PUSH2 0x2052 JUMP JUMPDEST PUSH2 0xE90 DUP10 PUSH2 0x94E JUMP JUMPDEST SWAP1 POP PUSH2 0xE9E DUP10 DUP3 DUP11 DUP10 PUSH2 0x12EE JUMP JUMPDEST PUSH2 0xEB6 DUP10 DUP9 DUP8 PUSH2 0xEAE JUMPI DUP9 PUSH2 0xEB0 JUMP JUMPDEST ADDRESS JUMPDEST DUP8 PUSH2 0x14D1 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x80 DUP13 ADD MLOAD DUP13 MLOAD PUSH1 0x20 DUP15 ADD MLOAD PUSH1 0x40 MLOAD SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH32 0xAC75F773E3A92F1A02B12134D65E1F47F8A14EABE4EAF1E24624918E6A8B269F SWAP5 PUSH2 0xEFF SWAP5 DUP13 SWAP3 SWAP2 DUP10 SWAP1 DUP12 SWAP1 PUSH2 0x2680 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD DUP6 MLOAD EQ DUP1 ISZERO PUSH2 0xF27 JUMPI POP DUP3 MLOAD DUP6 MLOAD EQ JUMPDEST DUP1 ISZERO PUSH2 0xF34 JUMPI POP DUP2 MLOAD DUP6 MLOAD EQ JUMPDEST PUSH2 0xF6A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x594 SWAP1 PUSH2 0x2875 JUMP JUMPDEST DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xF82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xFAC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 EQ PUSH2 0x1194 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xFC8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xFFA JUMPI PUSH32 0x4F94811000000000000000000000000000000000000000000000000000000000 PUSH2 0x101C JUMP JUMPDEST PUSH32 0x724D395300000000000000000000000000000000000000000000000000000000 JUMPDEST SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1062 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1076 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x108A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x10A4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A34 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x112D SWAP2 SWAP1 PUSH2 0x258F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1168 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x116D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x117B JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0xFB2 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A9 DUP4 DUP4 PUSH2 0x1A8D JUMP JUMPDEST PUSH1 0x2 DUP3 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x11B8 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1220 JUMPI PUSH1 0x1 DUP4 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x11ED SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26EE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x120F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH2 0x12C5 JUMP JUMPDEST PUSH1 0x3 DUP3 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x122F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x12C5 JUMPI PUSH1 0x0 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 MSTORE DUP4 PUSH1 0x1C MSTORE PUSH1 0x3C PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x1 DUP2 DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1295 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26EE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP2 POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x40D JUMPI PUSH2 0x40D PUSH2 0xE7A PUSH1 0x5 DUP6 PUSH2 0x1B41 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1300 JUMPI INVALID JUMPDEST EQ PUSH2 0x1325 JUMPI PUSH2 0x1325 PUSH2 0xE7A DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1320 JUMPI INVALID JUMPDEST PUSH2 0x1BFC JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x137E JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1399 JUMPI PUSH2 0x1399 PUSH2 0xE7A DUP5 PUSH1 0x0 ADD MLOAD DUP4 DUP8 PUSH1 0xA0 ADD MLOAD PUSH2 0x1C32 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13A3 PUSH2 0x1CF0 JUMP JUMPDEST PUSH1 0xC0 DUP7 ADD MLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ORIGIN EQ DUP1 ISZERO SWAP1 PUSH2 0x1407 JUMPI POP PUSH1 0xC0 DUP6 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 ORIGIN DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0x1422 JUMPI PUSH2 0x1422 PUSH2 0xE7A DUP6 PUSH1 0x0 ADD MLOAD ORIGIN DUP9 PUSH1 0xC0 ADD MLOAD PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1432 DUP6 PUSH1 0x0 ADD MLOAD DUP6 PUSH2 0x119D JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x80 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x14AE JUMPI POP PUSH1 0x80 DUP7 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 DUP5 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0x14C9 JUMPI PUSH2 0x14C9 PUSH2 0xE7A DUP7 PUSH1 0x0 ADD MLOAD DUP4 DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0x1D35 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x80 DUP2 SWAP1 SHR SWAP1 DUP1 PUSH2 0x14EA PUSH2 0x187E JUMP JUMPDEST PUSH1 0xC0 DUP11 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH8 0xFFFFFFFFFFFFFFFF SWAP7 SWAP1 SWAP7 AND DUP3 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND OR SWAP1 SSTORE POP PUSH1 0x60 DUP8 ADD MLOAD DUP2 AND SWAP1 DUP7 AND EQ ISZERO PUSH2 0x1588 JUMPI POP POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x15E4 JUMP JUMPDEST PUSH2 0x1596 DUP6 DUP8 PUSH1 0x60 ADD MLOAD PUSH2 0x1D6D JUMP JUMPDEST SWAP2 POP PUSH2 0x15E1 DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DA9 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ADDRESS EQ ISZERO PUSH2 0x16C2 JUMPI PUSH1 0x20 DUP7 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ ISZERO PUSH2 0x1698 JUMPI PUSH1 0x80 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1692 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x16BD JUMP JUMPDEST PUSH2 0x16BD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD DUP5 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DC7 JUMP JUMPDEST PUSH2 0x16E8 JUMP JUMPDEST PUSH2 0x16E8 DUP7 PUSH1 0x20 ADD MLOAD DUP6 DUP9 PUSH1 0x80 ADD MLOAD DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EA1 JUMP JUMPDEST PUSH2 0x170E DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD DUP6 DUP5 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EA1 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x2F754524DE756AE72459EFBE1EC88C19A745639821DE528AC3FB88F9E65E35C8 DUP2 MSTORE DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x120 DUP2 KECCAK256 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1861 SWAP3 SWAP2 SWAP1 PUSH2 0x25AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x40D PUSH1 0x8 PUSH2 0x1FA0 JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x18B3 JUMPI PUSH2 0x18B3 PUSH2 0xE7A PUSH1 0x3 DUP5 PUSH2 0x1FBB JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x18DF SWAP1 PUSH2 0x25E1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x191C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1921 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1934 JUMPI PUSH2 0x1934 DUP2 PUSH2 0x1A85 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0x1998 SWAP1 DUP5 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x2739 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x19C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xF0EC779B0BCDA6D84ABF99EE2C67647D1100EBBB553A9C2D1C2BA1579592832C DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1A01 SWAP2 SWAP1 PUSH2 0x25E4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 GT ISZERO DUP1 PUSH2 0x1AE4 JUMPI POP PUSH1 0x60 DUP2 ADD MLOAD PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A1 GT ISZERO JUMPDEST ISZERO PUSH2 0x1AF7 JUMPI PUSH2 0x1AF7 PUSH2 0xE7A PUSH1 0x5 DUP5 PUSH2 0x1B41 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B06 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1B1A JUMPI PUSH2 0x1B1A PUSH2 0xE7A PUSH1 0x3 DUP5 PUSH2 0x1B41 JUMP JUMPDEST PUSH1 0x1 DUP2 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B29 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1B3D JUMPI PUSH2 0x1B3D PUSH2 0xE7A PUSH1 0x0 DUP5 PUSH2 0x1B41 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xF18F11F3027E735C758137924B262D4D3AFF0037DCD785ACA3C699FA05D960BD DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1B77 SWAP3 SWAP2 SWAP1 PUSH2 0x27B9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x47AB394E41470191EAF9FA542E84AC483A12665FBD616EB8D1C022CED6C94000 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1B77 SWAP3 SWAP2 SWAP1 PUSH2 0x26DD JUMP JUMPDEST PUSH1 0x60 PUSH32 0x5D3300180A4547B3E27137BE832D3EBF56F1BA5EBB30DD580999C61F77FA6396 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1C6A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2654 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x40D PUSH1 0x7 PUSH2 0x1FA0 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xC0972F3CC4234CA2091DE7E7BC7081494BD29AC280167D66F0D44168973B1634 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1C6A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2654 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xF13E65D925201525F3D71A731833B19BB26E44CFBD97CAF72A366B73866F7124 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1C6A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2654 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x1DA0 JUMPI DUP2 PUSH2 0x1DA2 JUMP JUMPDEST DUP3 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DBF DUP4 PUSH2 0x1DB9 DUP7 DUP6 PUSH2 0x1FD8 JUMP JUMPDEST SWAP1 PUSH2 0x2009 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ADDRESS EQ ISZERO PUSH2 0x1E17 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x594 SWAP1 PUSH2 0x2955 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE DUP2 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND GAS CALL RETURNDATASIZE PUSH1 0x1 DUP4 MLOAD EQ PUSH1 0x20 DUP3 LT ISZERO AND DUP2 ISZERO OR DUP3 AND SWAP2 POP DUP2 PUSH2 0x14C9 JUMPI DUP1 PUSH1 0x0 DUP5 RETURNDATACOPY DUP1 DUP4 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ADDRESS EQ ISZERO PUSH2 0x1EF1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x594 SWAP1 PUSH2 0x2955 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE DUP2 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x64 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND GAS CALL RETURNDATASIZE PUSH1 0x1 DUP4 MLOAD EQ PUSH1 0x20 DUP3 LT ISZERO AND DUP2 ISZERO OR DUP3 AND SWAP2 POP DUP2 PUSH2 0x1F97 JUMPI DUP1 PUSH1 0x0 DUP5 RETURNDATACOPY DUP1 DUP4 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1FB0 JUMPI INVALID JUMPDEST PUSH1 0x1 ADD SWAP1 SHL SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xC996AF7B PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1B77 SWAP3 SWAP2 SWAP1 PUSH2 0x27A2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1FE7 JUMPI POP PUSH1 0x0 PUSH2 0x40D JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1FF4 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1DA2 JUMPI PUSH2 0x1DA2 PUSH2 0xE7A PUSH1 0x1 DUP7 DUP7 PUSH2 0x2033 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x201F JUMPI PUSH2 0x201F PUSH2 0xE7A PUSH1 0x3 DUP6 DUP6 PUSH2 0x2033 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x202A JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1C6A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2781 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x40D DUP2 PUSH2 0x2BCB JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2084 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2097 PUSH2 0x2092 DUP3 PUSH2 0x2B59 JUMP JUMPDEST PUSH2 0x2B32 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x20B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x20E5 JUMPI DUP3 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x20D3 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x20BC JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2101 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x210F PUSH2 0x2092 DUP3 PUSH2 0x2B59 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x80 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x2132 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x20E5 JUMPI PUSH2 0x2147 DUP10 DUP5 PUSH2 0x2202 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2135 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x216C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2175 DUP2 PUSH2 0x2B32 JUMP JUMPDEST SWAP2 POP POP DUP2 CALLDATALOAD PUSH2 0x2183 DUP2 PUSH2 0x2BCB JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x2193 DUP2 PUSH2 0x2BCB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x21A5 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x2265 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x21B7 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x2265 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x21C9 DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x2069 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x21DB DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x2069 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x21ED DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x2069 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2213 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x221D PUSH1 0x80 PUSH2 0x2B32 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x222E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x40D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2297 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x22A2 DUP2 PUSH2 0x2BCB JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x22BE JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x22DE JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x22F5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2308 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2316 PUSH2 0x2092 DUP3 PUSH2 0x2B59 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x100 DUP14 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0x2339 JUMPI DUP10 DUP11 REVERT JUMPDEST DUP10 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0x2365 JUMPI PUSH2 0x234F DUP15 DUP4 PUSH2 0x2159 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP8 SWAP1 SWAP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH2 0x233D JUMP JUMPDEST POP SWAP2 SWAP10 POP DUP11 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x237D JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x2389 DUP9 DUP4 DUP10 ADD PUSH2 0x20F1 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x239E JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x23AA DUP9 DUP4 DUP10 ADD PUSH2 0x20F1 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x23BF JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x23CC DUP8 DUP3 DUP9 ADD PUSH2 0x2074 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23EA JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1DA2 DUP4 DUP4 PUSH2 0x2159 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x180 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2407 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2411 DUP5 DUP5 PUSH2 0x2159 JUMP JUMPDEST SWAP2 POP PUSH2 0x2421 DUP5 PUSH2 0x100 DUP6 ADD PUSH2 0x2202 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x200 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x243F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x2449 DUP6 DUP6 PUSH2 0x2159 JUMP JUMPDEST SWAP3 POP PUSH2 0x2459 DUP6 PUSH2 0x100 DUP7 ADD PUSH2 0x2202 JUMP JUMPDEST SWAP2 POP PUSH2 0x2469 DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x2202 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1A0 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2487 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x2491 DUP6 DUP6 PUSH2 0x2159 JUMP JUMPDEST SWAP3 POP PUSH2 0x24A1 DUP6 PUSH2 0x100 DUP7 ADD PUSH2 0x2202 JUMP JUMPDEST SWAP2 POP PUSH2 0x180 DUP5 ADD CALLDATALOAD PUSH2 0x24B2 DUP2 PUSH2 0x2BED JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x200 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x24D6 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x24E0 DUP9 DUP9 PUSH2 0x2159 JUMP JUMPDEST SWAP6 POP PUSH2 0x24F0 DUP9 PUSH2 0x100 DUP10 ADD PUSH2 0x2202 JUMP JUMPDEST SWAP5 POP PUSH2 0x180 DUP8 ADD CALLDATALOAD PUSH2 0x2501 DUP2 PUSH2 0x2BED JUMP JUMPDEST SWAP4 POP PUSH2 0x1A0 DUP8 ADD CALLDATALOAD PUSH2 0x2512 DUP2 PUSH2 0x2BCB JUMP JUMPDEST SWAP3 POP PUSH2 0x1C0 DUP8 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2527 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP2 POP PUSH2 0x1E0 DUP8 ADD CALLDATALOAD PUSH2 0x2538 DUP2 PUSH2 0x2BCB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH2 0x256B DUP2 PUSH2 0x2BBE JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x25A1 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2B92 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x263F JUMPI DUP4 MLOAD ISZERO ISZERO DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2621 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP7 DUP8 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x20 DUP9 ADD MSTORE SWAP4 DUP6 AND PUSH1 0x40 DUP8 ADD MSTORE SWAP2 DUP5 AND PUSH1 0x60 DUP7 ADD MSTORE SWAP1 SWAP3 AND PUSH1 0x80 DUP5 ADD MSTORE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0xA0 DUP5 ADD MSTORE AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0xFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x278E DUP6 PUSH2 0x2BBE JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x27AF DUP5 PUSH2 0x2BBE JUMP JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x20 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH1 0x6 DUP5 LT PUSH2 0x27AF JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x27E6 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B92 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3E SWAP1 DUP3 ADD MSTORE PUSH32 0x4F74634F7264657273466561747572653A3A66696C6C54616B65725369676E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x644F74634F726465722F4D414B45525F544F4B454E5F4E4F545F574554480000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x48 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F74634F7264657273466561747572653A3A626174636846696C6C54616B6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5369676E65644F74634F72646572732F4D49534D4154434845445F4152524159 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x5F4C454E47544853000000000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x39 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F74634F7264657273466561747572653A3A66696C6C4F74634F72646572466F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x724574682F4D414B45525F544F4B454E5F4E4F545F5745544800000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x466978696E546F6B656E5370656E6465722F43414E4E4F545F494E564F4B455F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x53454C4600000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x39 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F74634F7264657273466561747572653A3A66696C6C4F74634F726465725769 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x74684574682F494E56414C49445F54414B45525F544F4B454E00000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD SWAP1 PUSH1 0x5 DUP2 LT PUSH2 0x2A27 JUMPI INVALID JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 MLOAD PUSH2 0x200 DUP3 ADD SWAP1 PUSH2 0x2A45 SWAP1 PUSH2 0x2B79 JUMP JUMPDEST DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP7 ADD MLOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x40 DUP6 ADD MSTORE DUP1 PUSH1 0x60 DUP9 ADD MLOAD AND PUSH1 0x60 DUP6 ADD MSTORE POP POP PUSH1 0x80 DUP6 ADD MLOAD PUSH2 0x2AA5 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x2546 JUMP JUMPDEST POP PUSH1 0xA0 DUP6 ADD MLOAD PUSH2 0x2AB8 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x2546 JUMP JUMPDEST POP PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x2ACB PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x2546 JUMP JUMPDEST POP PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x2AE4 PUSH2 0x100 DUP4 ADD DUP6 PUSH2 0x2560 JUMP JUMPDEST PUSH2 0x1DBF PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0x2560 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2B51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2B6F JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2BAD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2B95 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1934 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x2BC8 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2BC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2BC8 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 0xA6 0xEB RETURN 0xB0 GASPRICE PUSH24 0xFB264B9C0933B12FA777790430C4E301225825301AF5C491 0x29 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "1374:20820:4:-:0;;;1768:23;1783:1;1786;;1768:14;:23::i;:::-;1716:75;;2011:138;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1920:4:11;1894:31;;;;1286:487:12;;2102:13:4;;1209:9:12;;1286:487;;1318:292;;1632:19;;1673:18;;1209:9;;2102:13:4;;1286:487:12;;;:::i;:::-;;;;;;;-1:-1:-1;;1286:487:12;;;;;;1259:528;;1286:487;1259:528;;;;1233:554;;-1:-1:-1;;2131:11:4::1;::::0;-1:-1:-1;;;;;;2131:11:4;::::1;::::0;-1:-1:-1;1374:20820:4;;2672:235:11;2834:20;2852:2;2834:20;;;;2859;2877:2;2859:20;;;;2833:47;2883:17;;;2833:67;2672:235;;;;;:::o;333:445:-1:-;;;488:2;476:9;467:7;463:23;459:32;456:2;;;-1:-1;;494:12;456:2;89:6;83:13;101:33;128:5;101:33;:::i;:::-;657:2;730:22;;247:13;546:74;;-1:-1;265:56;247:13;265:56;:::i;:::-;665:97;;;;450:328;;;;;:::o;1145:668::-;976:37;;;1549:2;1534:18;;976:37;;;;1632:2;1617:18;;976:37;;;;1715:2;1700:18;;976:37;-1:-1;;;;;2180:54;1798:3;1783:19;;856:37;1384:3;1369:19;;1355:458::o;2325:117::-;-1:-1;;;;;2180:54;;2384:35;;2374:2;;2433:1;;2423:12;2374:2;2368:74;:::o;:::-;1374:20820:4;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "480": [
                        {
                            "length": 32,
                            "start": 722
                        }
                    ],
                    "487": [
                        {
                            "length": 32,
                            "start": 1105
                        },
                        {
                            "length": 32,
                            "start": 1193
                        },
                        {
                            "length": 32,
                            "start": 1546
                        },
                        {
                            "length": 32,
                            "start": 1693
                        },
                        {
                            "length": 32,
                            "start": 1897
                        },
                        {
                            "length": 32,
                            "start": 2165
                        },
                        {
                            "length": 32,
                            "start": 3067
                        },
                        {
                            "length": 32,
                            "start": 3311
                        }
                    ],
                    "2314": [
                        {
                            "length": 32,
                            "start": 4128
                        },
                        {
                            "length": 32,
                            "start": 6512
                        }
                    ],
                    "2444": [
                        {
                            "length": 32,
                            "start": 3531
                        },
                        {
                            "length": 32,
                            "start": 6192
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x6080604052600436106100dd5760003560e01c80638c807c431161007f578063dab400f311610059578063dab400f31461024e578063dac748d414610263578063e4ba843914610283578063e52d1764146102a3576100dd565b80638c807c43146101df5780638fd3ab801461020c578063a578efaf1461022e576100dd565b806359ebfb45116100bb57806359ebfb451461014f5780636ae4b4f71461017c578063706394d51461019e578063724d3953146101bf576100dd565b8063031b905c146100e25780634f9481101461010d57806353476b891461012f575b600080fd5b3480156100ee57600080fd5b506100f76102d0565b604051610104919061264b565b60405180910390f35b34801561011957600080fd5b5061012d61012836600461242a565b6102f4565b005b34801561013b57600080fd5b506100f761014a3660046123d8565b610399565b34801561015b57600080fd5b5061016f61016a366004612285565b6103b4565b6040516101049190612af2565b34801561018857600080fd5b50610191610413565b60405161010491906127c7565b6101b16101ac3660046123f4565b61044c565b604051610104929190612b0f565b3480156101cb57600080fd5b5061012d6101da36600461242a565b610767565b3480156101eb57600080fd5b506101ff6101fa3660046123d8565b61094e565b6040516101049190612a0f565b34801561021857600080fd5b50610221610a35565b604051610104919061270c565b34801561023a57600080fd5b506101b1610249366004612472565b610bf6565b34801561025a57600080fd5b506100f7610dc9565b34801561026f57600080fd5b506101b161027e366004612472565b610ded565b34801561028f57600080fd5b506101b161029e3660046124bd565b610e64565b3480156102af57600080fd5b506102c36102be3660046122c9565b610f13565b6040516101049190612605565b7f000000000000000000000000000000000000000000000000000000000000000081565b6102fc612052565b6103058461094e565b9050600061031782600001518461119d565b9050610325858386846112ee565b61033585866060015183846114d1565b50507fac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f8260000151866080015183886000015189602001518a604001518b6060015160405161038a9796959493929190612680565b60405180910390a15050505050565b60006103ac6103a783611717565b61182c565b90505b919050565b6000806103bf61187e565b73ffffffffffffffffffffffffffffffffffffffff851660009081526020918252604080822067ffffffffffffffff8716835290925220546fffffffffffffffffffffffffffffffff169150505b92915050565b6040518060400160405280600981526020017f4f74634f7264657273000000000000000000000000000000000000000000000081525081565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff16141561052d577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561050f57600080fd5b505af1158015610523573d6000803e3d6000fd5b505050505061059d565b602084015173ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461059d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610594906129b2565b60405180910390fd5b6105a5612052565b6105ae8561094e565b90506105bc858286336112ee565b6105d0856105c93461188b565b30336114d1565b9093509150346fffffffffffffffffffffffffffffffff84161015610711576000836fffffffffffffffffffffffffffffffff16340390507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16866020015173ffffffffffffffffffffffffffffffffffffffff161415610705576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d906106d290849060040161264b565b600060405180830381600087803b1580156106ec57600080fd5b505af1158015610700573d6000803e3d6000fd5b505050505b61070f33826118b7565b505b80516080860151865160208801516040517fac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f946107579490939092339289908b90612680565b60405180910390a1509250929050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff16146107f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059490612818565b6107f8612052565b6108018461094e565b9050600061081382600001518461119d565b9050610821858386846112ee565b61083185866060015183306114d1565b505060408086015190517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691632e1a7d4d916108a99190600401612af2565b600060405180830381600087803b1580156108c357600080fd5b505af11580156108d7573d6000803e3d6000fd5b505050506108fb8186604001516fffffffffffffffffffffffffffffffff166118b7565b7fac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f8260000151866080015183886000015189602001518a604001518b6060015160405161038a9796959493929190612680565b610956612052565b61095f82610399565b8152600061096b61187e565b60e084015160c08086015173ffffffffffffffffffffffffffffffffffffffff16600090815260208481526040808320608086901c67ffffffffffffffff811685529252909120549394509082901c929091906fffffffffffffffffffffffffffffffff90811690821681106109fd576020860160005b908160048111156109ef57fe5b8152505050505050506103af565b4267ffffffffffffffff168467ffffffffffffffff1611610a23576020860160046109e2565b50506001602085015250919392505050565b6000610a607fdac748d40000000000000000000000000000000000000000000000000000000061193a565b610a897fa578efaf0000000000000000000000000000000000000000000000000000000061193a565b610ab27f706394d50000000000000000000000000000000000000000000000000000000061193a565b610adb7f724d39530000000000000000000000000000000000000000000000000000000061193a565b610b047f4f9481100000000000000000000000000000000000000000000000000000000061193a565b610b2d7fe52d17640000000000000000000000000000000000000000000000000000000061193a565b610b567fe4ba84390000000000000000000000000000000000000000000000000000000061193a565b610b7f7f8c807c430000000000000000000000000000000000000000000000000000000061193a565b610ba87f53476b890000000000000000000000000000000000000000000000000000000061193a565b610bd17f59ebfb450000000000000000000000000000000000000000000000000000000061193a565b507f2c64c5ef0000000000000000000000000000000000000000000000000000000090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff1614610c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610594906128f8565b610c8a612052565b610c938661094e565b9050610ca1868287336112ee565b610cad868533306114d1565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152919450925073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d90610d24908590600401612af2565b600060405180830381600087803b158015610d3e57600080fd5b505af1158015610d52573d6000803e3d6000fd5b50505050610d7233836fffffffffffffffffffffffffffffffff166118b7565b80516080870151875160208901516040517fac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f94610db89490939092339289908b90612680565b60405180910390a150935093915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080610df8612052565b610e018661094e565b9050610e0f868287336112ee565b610e1b868533336114d1565b82516080890151895160208b01516040519598509396507fac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f94610db89433929189908b90612680565b600080333014610e7f57610e7f610e7a336119cd565b611a85565b610e87612052565b610e908961094e565b9050610e9e89828a896112ee565b610eb6898887610eae5788610eb0565b305b876114d1565b825160808c01518c5160208e01516040519598509396507fac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f94610eff948c929189908b90612680565b60405180910390a150965096945050505050565b606083518551148015610f27575082518551145b8015610f34575081518551145b610f6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059490612875565b845167ffffffffffffffff81118015610f8257600080fd5b50604051908082528060200260200182016040528015610fac578160200160208202803683370190505b50905060005b85518114611194576000838281518110610fc857fe5b6020026020010151610ffa577f4f9481100000000000000000000000000000000000000000000000000000000061101c565b7f724d3953000000000000000000000000000000000000000000000000000000005b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168188848151811061106257fe5b602002602001015188858151811061107657fe5b602002602001015188868151811061108a57fe5b60200260200101516040516024016110a493929190612a34565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161112d919061258f565b600060405180830381855af49150503d8060008114611168576040519150601f19603f3d011682016040523d82523d6000602084013e61116d565b606091505b505083838151811061117b57fe5b9115156020928302919091019091015250600101610fb2565b50949350505050565b60006111a98383611a8d565b6002825160038111156111b857fe5b141561122057600183836020015184604001518560600151604051600081526020016040526040516111ed94939291906126ee565b6020604051602081039080840390855afa15801561120f573d6000803e3d6000fd5b5050506020604051035190506112c5565b60038251600381111561122f57fe5b14156112c55760007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005283601c52603c60002090506001818460200151856040015186606001516040516000815260200160405260405161129594939291906126ee565b6020604051602081039080840390855afa1580156112b7573d6000803e3d6000fd5b505050602060405103519150505b73ffffffffffffffffffffffffffffffffffffffff811661040d5761040d610e7a600585611b41565b60018360200151600481111561130057fe5b1461132557611325610e7a84600001518560200151600481111561132057fe5b611bfc565b60a084015173ffffffffffffffffffffffffffffffffffffffff161580159061137e57508073ffffffffffffffffffffffffffffffffffffffff168460a0015173ffffffffffffffffffffffffffffffffffffffff1614155b1561139957611399610e7a8460000151838760a00151611c32565b60006113a3611cf0565b60c086015190915073ffffffffffffffffffffffffffffffffffffffff163214801590611407575060c085015173ffffffffffffffffffffffffffffffffffffffff166000908152600382016020908152604080832032845290915290205460ff16155b1561142257611422610e7a8560000151328860c00151611cfd565b600061143285600001518561119d565b9050856080015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156114ae5750608086015173ffffffffffffffffffffffffffffffffffffffff908116600090815260048401602090815260408083209385168352929052205460ff16155b156114c9576114c9610e7a8660000151838960800151611d35565b505050505050565b60e08401516000908190608081901c90806114ea61187e565b60c08a015173ffffffffffffffffffffffffffffffffffffffff1660009081526020918252604080822067ffffffffffffffff969096168252949091529290922080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff93841617905550606087015181169086161415611588575050606084015160408501516115e4565b611596858760600151611d6d565b91506115e1826fffffffffffffffffffffffffffffffff1687606001516fffffffffffffffffffffffffffffffff1688604001516fffffffffffffffffffffffffffffffff16611da9565b90505b73ffffffffffffffffffffffffffffffffffffffff84163014156116c257602086015173ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561169857608086015160405173ffffffffffffffffffffffffffffffffffffffff909116906fffffffffffffffffffffffffffffffff841680156108fc02916000818181858888f19350505050158015611692573d6000803e3d6000fd5b506116bd565b6116bd86602001518760800151846fffffffffffffffffffffffffffffffff16611dc7565b6116e8565b6116e88660200151858860800151856fffffffffffffffffffffffffffffffff16611ea1565b61170e8660000151876080015185846fffffffffffffffffffffffffffffffff16611ea1565b94509492505050565b60006040517f2f754524de756ae72459efbe1ec88c19a745639821de528ac3fb88f9e65e35c88152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff166080820152608083015173ffffffffffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e08301516101008201526101208120915050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000826040516020016118619291906125ab565b604051602081830303815290604052805190602001209050919050565b60008061040d6008611fa0565b60006fffffffffffffffffffffffffffffffff8211156118b3576118b3610e7a600384611fbb565b5090565b600060608373ffffffffffffffffffffffffffffffffffffffff16836040516118df906125e1565b60006040518083038185875af1925050503d806000811461191c576040519150601f19603f3d011682016040523d82523d6000602084013e611921565b606091505b5091509150816119345761193481611a85565b50505050565b6040517f6eb224cb0000000000000000000000000000000000000000000000000000000081523090636eb224cb906119989084907f000000000000000000000000000000000000000000000000000000000000000090600401612739565b600060405180830381600087803b1580156119b257600080fd5b505af11580156119c6573d6000803e3d6000fd5b5050505050565b60607ff0ec779b0bcda6d84abf99ee2c67647d1100ebbb553a9c2d1c2ba1579592832c82604051602401611a0191906125e4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050919050565b805160208201fd5b60408101517ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141111580611ae4575060608101517f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a111155b15611af757611af7610e7a600584611b41565b600081516003811115611b0657fe5b1415611b1a57611b1a610e7a600384611b41565b600181516003811115611b2957fe5b1415611b3d57611b3d610e7a600084611b41565b5050565b60607ff18f11f3027e735c758137924b262d4d3aff0037dcd785aca3c699fa05d960bd8383604051602401611b779291906127b9565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905092915050565b60607f47ab394e41470191eaf9fa542e84ac483a12665fbd616eb8d1c022ced6c940008383604051602401611b779291906126dd565b60607f5d3300180a4547b3e27137be832d3ebf56f1ba5ebb30dd580999c61f77fa6396848484604051602401611c6a93929190612654565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b60008061040d6007611fa0565b60607fc0972f3cc4234ca2091de7e7bc7081494bd29ac280167d66f0d44168973b1634848484604051602401611c6a93929190612654565b60607ff13e65d925201525f3d71a731833b19bb26e44cfbd97caf72a366b73866f7124848484604051602401611c6a93929190612654565b6000816fffffffffffffffffffffffffffffffff16836fffffffffffffffffffffffffffffffff1610611da05781611da2565b825b9392505050565b6000611dbf83611db98685611fd8565b90612009565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff8316301415611e17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059490612955565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152816024820152602081604483600073ffffffffffffffffffffffffffffffffffffffff89165af13d600183511460208210151681151782169150816114c957806000843e8083fd5b73ffffffffffffffffffffffffffffffffffffffff8416301415611ef1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059490612955565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015273ffffffffffffffffffffffffffffffffffffffff83166024820152816044820152602081606483600073ffffffffffffffffffffffffffffffffffffffff8a165af13d60018351146020821015168115178216915081611f9757806000843e8083fd5b50505050505050565b60006080826008811115611fb057fe5b600101901b92915050565b606063c996af7b60e01b8383604051602401611b779291906127a2565b600082611fe75750600061040d565b82820282848281611ff457fe5b0414611da257611da2610e7a60018686612033565b60008161201f5761201f610e7a60038585612033565b600082848161202a57fe5b04949350505050565b606063e946c1bb60e01b848484604051602401611c6a93929190612781565b604080518082019091526000808252602082015290565b803561040d81612bcb565b600082601f830112612084578081fd5b813561209761209282612b59565b612b32565b8181529150602080830190848101818402860182018710156120b857600080fd5b6000805b858110156120e557823580151581146120d3578283fd5b855293830193918301916001016120bc565b50505050505092915050565b600082601f830112612101578081fd5b813561210f61209282612b59565b818152915060208083019084810160808085028701830188101561213257600080fd5b60005b858110156120e5576121478984612202565b85529383019391810191600101612135565b600061010080838503121561216c578182fd5b61217581612b32565b915050813561218381612bcb565b8152602082013561219381612bcb565b60208201526121a58360408401612265565b60408201526121b78360608401612265565b60608201526121c98360808401612069565b60808201526121db8360a08401612069565b60a08201526121ed8360c08401612069565b60c082015260e082013560e082015292915050565b600060808284031215612213578081fd5b61221d6080612b32565b905081356004811061222e57600080fd5b8152602082013560ff8116811461224457600080fd5b80602083015250604082013560408201526060820135606082015292915050565b80356fffffffffffffffffffffffffffffffff8116811461040d57600080fd5b60008060408385031215612297578182fd5b82356122a281612bcb565b9150602083013567ffffffffffffffff811681146122be578182fd5b809150509250929050565b600080600080608085870312156122de578182fd5b843567ffffffffffffffff808211156122f5578384fd5b818701915087601f830112612308578384fd5b813561231661209282612b59565b80828252602080830192508086016101008d838288028a0101111561233957898afd5b8997505b858810156123655761234f8e83612159565b855260019790970196938201939081019061233d565b509199508a013594505050508082111561237d578384fd5b612389888389016120f1565b9450604087013591508082111561239e578384fd5b6123aa888389016120f1565b935060608701359150808211156123bf578283fd5b506123cc87828801612074565b91505092959194509250565b600061010082840312156123ea578081fd5b611da28383612159565b6000806101808385031215612407578182fd5b6124118484612159565b9150612421846101008501612202565b90509250929050565b6000806000610200848603121561243f578283fd5b6124498585612159565b9250612459856101008601612202565b9150612469856101808601612202565b90509250925092565b60008060006101a08486031215612487578283fd5b6124918585612159565b92506124a1856101008601612202565b91506101808401356124b281612bed565b809150509250925092565b60008060008060008061020087890312156124d6578384fd5b6124e08888612159565b95506124f0886101008901612202565b945061018087013561250181612bed565b93506101a087013561251281612bcb565b92506101c08701358015158114612527578283fd5b91506101e087013561253881612bcb565b809150509295509295509295565b73ffffffffffffffffffffffffffffffffffffffff169052565b805161256b81612bbe565b825260208181015160ff169083015260408082015190830152606090810151910152565b600082516125a1818460208701612b92565b9190910192915050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b90565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6020808252825182820181905260009190848201906040850190845b8181101561263f578351151583529284019291840191600101612621565b50909695505050505050565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b96875273ffffffffffffffffffffffffffffffffffffffff95861660208801529385166040870152918416606086015290921660808401526fffffffffffffffffffffffffffffffff91821660a08401521660c082015260e00190565b91825260ff16602082015260400190565b93845260ff9290921660208401526040830152606082015260800190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000092909216825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b6060810161278e85612bbe565b938152602081019290925260409091015290565b604081016127af84612bbe565b9281526020015290565b60408101600684106127af57fe5b60006020825282518060208401526127e6816040850160208701612b92565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6020808252603e908201527f4f74634f7264657273466561747572653a3a66696c6c54616b65725369676e6560408201527f644f74634f726465722f4d414b45525f544f4b454e5f4e4f545f574554480000606082015260800190565b60208082526048908201527f4f74634f7264657273466561747572653a3a626174636846696c6c54616b657260408201527f5369676e65644f74634f72646572732f4d49534d4154434845445f415252415960608201527f5f4c454e47544853000000000000000000000000000000000000000000000000608082015260a00190565b60208082526039908201527f4f74634f7264657273466561747572653a3a66696c6c4f74634f72646572466f60408201527f724574682f4d414b45525f544f4b454e5f4e4f545f5745544800000000000000606082015260800190565b60208082526024908201527f466978696e546f6b656e5370656e6465722f43414e4e4f545f494e564f4b455f60408201527f53454c4600000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526039908201527f4f74634f7264657273466561747572653a3a66696c6c4f74634f72646572576960408201527f74684574682f494e56414c49445f54414b45525f544f4b454e00000000000000606082015260800190565b815181526020820151604082019060058110612a2757fe5b8060208401525092915050565b8351610200820190612a4590612b79565b825273ffffffffffffffffffffffffffffffffffffffff602086015116602083015260408501516fffffffffffffffffffffffffffffffff808216604085015280606088015116606085015250506080850151612aa56080840182612546565b5060a0850151612ab860a0840182612546565b5060c0850151612acb60c0840182612546565b5060e085015160e0830152612ae4610100830185612560565b611dbf610180830184612560565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b60405181810167ffffffffffffffff81118282101715612b5157600080fd5b604052919050565b600067ffffffffffffffff821115612b6f578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff1690565b60005b83811015612bad578181015183820152602001612b95565b838111156119345750506000910152565b60048110612bc857fe5b50565b73ffffffffffffffffffffffffffffffffffffffff81168114612bc857600080fd5b6fffffffffffffffffffffffffffffffff81168114612bc857600080fdfea2646970667358221220e3a6ebf3b03a77fb264b9c0933b12fa777790430c4e301225825301af5c4912964736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDD JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8C807C43 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xDAB400F3 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xDAB400F3 EQ PUSH2 0x24E JUMPI DUP1 PUSH4 0xDAC748D4 EQ PUSH2 0x263 JUMPI DUP1 PUSH4 0xE4BA8439 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0xE52D1764 EQ PUSH2 0x2A3 JUMPI PUSH2 0xDD JUMP JUMPDEST DUP1 PUSH4 0x8C807C43 EQ PUSH2 0x1DF JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0x20C JUMPI DUP1 PUSH4 0xA578EFAF EQ PUSH2 0x22E JUMPI PUSH2 0xDD JUMP JUMPDEST DUP1 PUSH4 0x59EBFB45 GT PUSH2 0xBB JUMPI DUP1 PUSH4 0x59EBFB45 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0x6AE4B4F7 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x706394D5 EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0x724D3953 EQ PUSH2 0x1BF JUMPI PUSH2 0xDD JUMP JUMPDEST DUP1 PUSH4 0x31B905C EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0x4F948110 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x53476B89 EQ PUSH2 0x12F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x2D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x264B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12D PUSH2 0x128 CALLDATASIZE PUSH1 0x4 PUSH2 0x242A JUMP JUMPDEST PUSH2 0x2F4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x23D8 JUMP JUMPDEST PUSH2 0x399 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16F PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0x2285 JUMP JUMPDEST PUSH2 0x3B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x2AF2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x191 PUSH2 0x413 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x27C7 JUMP JUMPDEST PUSH2 0x1B1 PUSH2 0x1AC CALLDATASIZE PUSH1 0x4 PUSH2 0x23F4 JUMP JUMPDEST PUSH2 0x44C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP3 SWAP2 SWAP1 PUSH2 0x2B0F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12D PUSH2 0x1DA CALLDATASIZE PUSH1 0x4 PUSH2 0x242A JUMP JUMPDEST PUSH2 0x767 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FF PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0x23D8 JUMP JUMPDEST PUSH2 0x94E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x2A0F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x218 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x221 PUSH2 0xA35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x270C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B1 PUSH2 0x249 CALLDATASIZE PUSH1 0x4 PUSH2 0x2472 JUMP JUMPDEST PUSH2 0xBF6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7 PUSH2 0xDC9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B1 PUSH2 0x27E CALLDATASIZE PUSH1 0x4 PUSH2 0x2472 JUMP JUMPDEST PUSH2 0xDED JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B1 PUSH2 0x29E CALLDATASIZE PUSH1 0x4 PUSH2 0x24BD JUMP JUMPDEST PUSH2 0xE64 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C3 PUSH2 0x2BE CALLDATASIZE PUSH1 0x4 PUSH2 0x22C9 JUMP JUMPDEST PUSH2 0xF13 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x2605 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2FC PUSH2 0x2052 JUMP JUMPDEST PUSH2 0x305 DUP5 PUSH2 0x94E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x317 DUP3 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0x119D JUMP JUMPDEST SWAP1 POP PUSH2 0x325 DUP6 DUP4 DUP7 DUP5 PUSH2 0x12EE JUMP JUMPDEST PUSH2 0x335 DUP6 DUP7 PUSH1 0x60 ADD MLOAD DUP4 DUP5 PUSH2 0x14D1 JUMP JUMPDEST POP POP PUSH32 0xAC75F773E3A92F1A02B12134D65E1F47F8A14EABE4EAF1E24624918E6A8B269F DUP3 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP4 DUP9 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x40 ADD MLOAD DUP12 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x38A SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2680 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AC PUSH2 0x3A7 DUP4 PUSH2 0x1717 JUMP JUMPDEST PUSH2 0x182C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3BF PUSH2 0x187E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH8 0xFFFFFFFFFFFFFFFF DUP8 AND DUP4 MSTORE SWAP1 SWAP3 MSTORE KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4F74634F72646572730000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x52D JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 CALLVALUE PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x50F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x523 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x59D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ PUSH2 0x59D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x594 SWAP1 PUSH2 0x29B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5A5 PUSH2 0x2052 JUMP JUMPDEST PUSH2 0x5AE DUP6 PUSH2 0x94E JUMP JUMPDEST SWAP1 POP PUSH2 0x5BC DUP6 DUP3 DUP7 CALLER PUSH2 0x12EE JUMP JUMPDEST PUSH2 0x5D0 DUP6 PUSH2 0x5C9 CALLVALUE PUSH2 0x188B JUMP JUMPDEST ADDRESS CALLER PUSH2 0x14D1 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP CALLVALUE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND LT ISZERO PUSH2 0x711 JUMPI PUSH1 0x0 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLVALUE SUB SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x705 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x6D2 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x264B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x700 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH2 0x70F CALLER DUP3 PUSH2 0x18B7 JUMP JUMPDEST POP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP7 ADD MLOAD DUP7 MLOAD PUSH1 0x20 DUP9 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xAC75F773E3A92F1A02B12134D65E1F47F8A14EABE4EAF1E24624918E6A8B269F SWAP5 PUSH2 0x757 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 CALLER SWAP3 DUP10 SWAP1 DUP12 SWAP1 PUSH2 0x2680 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x7F0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x594 SWAP1 PUSH2 0x2818 JUMP JUMPDEST PUSH2 0x7F8 PUSH2 0x2052 JUMP JUMPDEST PUSH2 0x801 DUP5 PUSH2 0x94E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x813 DUP3 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0x119D JUMP JUMPDEST SWAP1 POP PUSH2 0x821 DUP6 DUP4 DUP7 DUP5 PUSH2 0x12EE JUMP JUMPDEST PUSH2 0x831 DUP6 DUP7 PUSH1 0x60 ADD MLOAD DUP4 ADDRESS PUSH2 0x14D1 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 DUP7 ADD MLOAD SWAP1 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP2 PUSH4 0x2E1A7D4D SWAP2 PUSH2 0x8A9 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x2AF2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x8FB DUP2 DUP7 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x18B7 JUMP JUMPDEST PUSH32 0xAC75F773E3A92F1A02B12134D65E1F47F8A14EABE4EAF1E24624918E6A8B269F DUP3 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x80 ADD MLOAD DUP4 DUP9 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x40 ADD MLOAD DUP12 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x38A SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2680 JUMP JUMPDEST PUSH2 0x956 PUSH2 0x2052 JUMP JUMPDEST PUSH2 0x95F DUP3 PUSH2 0x399 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH2 0x96B PUSH2 0x187E JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MLOAD PUSH1 0xC0 DUP1 DUP7 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x80 DUP7 SWAP1 SHR PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP6 MSTORE SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP4 SWAP5 POP SWAP1 DUP3 SWAP1 SHR SWAP3 SWAP1 SWAP2 SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP3 AND DUP2 LT PUSH2 0x9FD JUMPI PUSH1 0x20 DUP7 ADD PUSH1 0x0 JUMPDEST SWAP1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x9EF JUMPI INVALID JUMPDEST DUP2 MSTORE POP POP POP POP POP POP POP PUSH2 0x3AF JUMP JUMPDEST TIMESTAMP PUSH8 0xFFFFFFFFFFFFFFFF AND DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND GT PUSH2 0xA23 JUMPI PUSH1 0x20 DUP7 ADD PUSH1 0x4 PUSH2 0x9E2 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x20 DUP6 ADD MSTORE POP SWAP2 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA60 PUSH32 0xDAC748D400000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xA89 PUSH32 0xA578EFAF00000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xAB2 PUSH32 0x706394D500000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xADB PUSH32 0x724D395300000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xB04 PUSH32 0x4F94811000000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xB2D PUSH32 0xE52D176400000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xB56 PUSH32 0xE4BA843900000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xB7F PUSH32 0x8C807C4300000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xBA8 PUSH32 0x53476B8900000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST PUSH2 0xBD1 PUSH32 0x59EBFB4500000000000000000000000000000000000000000000000000000000 PUSH2 0x193A JUMP JUMPDEST POP PUSH32 0x2C64C5EF00000000000000000000000000000000000000000000000000000000 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC82 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x594 SWAP1 PUSH2 0x28F8 JUMP JUMPDEST PUSH2 0xC8A PUSH2 0x2052 JUMP JUMPDEST PUSH2 0xC93 DUP7 PUSH2 0x94E JUMP JUMPDEST SWAP1 POP PUSH2 0xCA1 DUP7 DUP3 DUP8 CALLER PUSH2 0x12EE JUMP JUMPDEST PUSH2 0xCAD DUP7 DUP6 CALLER ADDRESS PUSH2 0x14D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP5 POP SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xD24 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2AF2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD52 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xD72 CALLER DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x18B7 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x80 DUP8 ADD MLOAD DUP8 MLOAD PUSH1 0x20 DUP10 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xAC75F773E3A92F1A02B12134D65E1F47F8A14EABE4EAF1E24624918E6A8B269F SWAP5 PUSH2 0xDB8 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 CALLER SWAP3 DUP10 SWAP1 DUP12 SWAP1 PUSH2 0x2680 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDF8 PUSH2 0x2052 JUMP JUMPDEST PUSH2 0xE01 DUP7 PUSH2 0x94E JUMP JUMPDEST SWAP1 POP PUSH2 0xE0F DUP7 DUP3 DUP8 CALLER PUSH2 0x12EE JUMP JUMPDEST PUSH2 0xE1B DUP7 DUP6 CALLER CALLER PUSH2 0x14D1 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x80 DUP10 ADD MLOAD DUP10 MLOAD PUSH1 0x20 DUP12 ADD MLOAD PUSH1 0x40 MLOAD SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH32 0xAC75F773E3A92F1A02B12134D65E1F47F8A14EABE4EAF1E24624918E6A8B269F SWAP5 PUSH2 0xDB8 SWAP5 CALLER SWAP3 SWAP2 DUP10 SWAP1 DUP12 SWAP1 PUSH2 0x2680 JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER ADDRESS EQ PUSH2 0xE7F JUMPI PUSH2 0xE7F PUSH2 0xE7A CALLER PUSH2 0x19CD JUMP JUMPDEST PUSH2 0x1A85 JUMP JUMPDEST PUSH2 0xE87 PUSH2 0x2052 JUMP JUMPDEST PUSH2 0xE90 DUP10 PUSH2 0x94E JUMP JUMPDEST SWAP1 POP PUSH2 0xE9E DUP10 DUP3 DUP11 DUP10 PUSH2 0x12EE JUMP JUMPDEST PUSH2 0xEB6 DUP10 DUP9 DUP8 PUSH2 0xEAE JUMPI DUP9 PUSH2 0xEB0 JUMP JUMPDEST ADDRESS JUMPDEST DUP8 PUSH2 0x14D1 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x80 DUP13 ADD MLOAD DUP13 MLOAD PUSH1 0x20 DUP15 ADD MLOAD PUSH1 0x40 MLOAD SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH32 0xAC75F773E3A92F1A02B12134D65E1F47F8A14EABE4EAF1E24624918E6A8B269F SWAP5 PUSH2 0xEFF SWAP5 DUP13 SWAP3 SWAP2 DUP10 SWAP1 DUP12 SWAP1 PUSH2 0x2680 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD DUP6 MLOAD EQ DUP1 ISZERO PUSH2 0xF27 JUMPI POP DUP3 MLOAD DUP6 MLOAD EQ JUMPDEST DUP1 ISZERO PUSH2 0xF34 JUMPI POP DUP2 MLOAD DUP6 MLOAD EQ JUMPDEST PUSH2 0xF6A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x594 SWAP1 PUSH2 0x2875 JUMP JUMPDEST DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xF82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xFAC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 EQ PUSH2 0x1194 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xFC8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xFFA JUMPI PUSH32 0x4F94811000000000000000000000000000000000000000000000000000000000 PUSH2 0x101C JUMP JUMPDEST PUSH32 0x724D395300000000000000000000000000000000000000000000000000000000 JUMPDEST SWAP1 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1062 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1076 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x108A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x10A4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A34 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x112D SWAP2 SWAP1 PUSH2 0x258F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1168 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x116D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x117B JUMPI INVALID JUMPDEST SWAP2 ISZERO ISZERO PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0xFB2 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A9 DUP4 DUP4 PUSH2 0x1A8D JUMP JUMPDEST PUSH1 0x2 DUP3 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x11B8 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1220 JUMPI PUSH1 0x1 DUP4 DUP4 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD DUP6 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x11ED SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26EE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x120F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH2 0x12C5 JUMP JUMPDEST PUSH1 0x3 DUP3 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x122F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x12C5 JUMPI PUSH1 0x0 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x0 MSTORE DUP4 PUSH1 0x1C MSTORE PUSH1 0x3C PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x1 DUP2 DUP5 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1295 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26EE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP2 POP POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x40D JUMPI PUSH2 0x40D PUSH2 0xE7A PUSH1 0x5 DUP6 PUSH2 0x1B41 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1300 JUMPI INVALID JUMPDEST EQ PUSH2 0x1325 JUMPI PUSH2 0x1325 PUSH2 0xE7A DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1320 JUMPI INVALID JUMPDEST PUSH2 0x1BFC JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x137E JUMPI POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0xA0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1399 JUMPI PUSH2 0x1399 PUSH2 0xE7A DUP5 PUSH1 0x0 ADD MLOAD DUP4 DUP8 PUSH1 0xA0 ADD MLOAD PUSH2 0x1C32 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13A3 PUSH2 0x1CF0 JUMP JUMPDEST PUSH1 0xC0 DUP7 ADD MLOAD SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ORIGIN EQ DUP1 ISZERO SWAP1 PUSH2 0x1407 JUMPI POP PUSH1 0xC0 DUP6 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 ORIGIN DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0x1422 JUMPI PUSH2 0x1422 PUSH2 0xE7A DUP6 PUSH1 0x0 ADD MLOAD ORIGIN DUP9 PUSH1 0xC0 ADD MLOAD PUSH2 0x1CFD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1432 DUP6 PUSH1 0x0 ADD MLOAD DUP6 PUSH2 0x119D JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x80 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x14AE JUMPI POP PUSH1 0x80 DUP7 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 DUP5 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0x14C9 JUMPI PUSH2 0x14C9 PUSH2 0xE7A DUP7 PUSH1 0x0 ADD MLOAD DUP4 DUP10 PUSH1 0x80 ADD MLOAD PUSH2 0x1D35 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xE0 DUP5 ADD MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x80 DUP2 SWAP1 SHR SWAP1 DUP1 PUSH2 0x14EA PUSH2 0x187E JUMP JUMPDEST PUSH1 0xC0 DUP11 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH8 0xFFFFFFFFFFFFFFFF SWAP7 SWAP1 SWAP7 AND DUP3 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP3 SWAP1 SWAP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND OR SWAP1 SSTORE POP PUSH1 0x60 DUP8 ADD MLOAD DUP2 AND SWAP1 DUP7 AND EQ ISZERO PUSH2 0x1588 JUMPI POP POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x15E4 JUMP JUMPDEST PUSH2 0x1596 DUP6 DUP8 PUSH1 0x60 ADD MLOAD PUSH2 0x1D6D JUMP JUMPDEST SWAP2 POP PUSH2 0x15E1 DUP3 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DA9 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ADDRESS EQ ISZERO PUSH2 0x16C2 JUMPI PUSH1 0x20 DUP7 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ ISZERO PUSH2 0x1698 JUMPI PUSH1 0x80 DUP7 ADD MLOAD PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1692 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x16BD JUMP JUMPDEST PUSH2 0x16BD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD DUP5 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DC7 JUMP JUMPDEST PUSH2 0x16E8 JUMP JUMPDEST PUSH2 0x16E8 DUP7 PUSH1 0x20 ADD MLOAD DUP6 DUP9 PUSH1 0x80 ADD MLOAD DUP6 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EA1 JUMP JUMPDEST PUSH2 0x170E DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD DUP6 DUP5 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1EA1 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x2F754524DE756AE72459EFBE1EC88C19A745639821DE528AC3FB88F9E65E35C8 DUP2 MSTORE DUP3 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x120 DUP2 KECCAK256 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1861 SWAP3 SWAP2 SWAP1 PUSH2 0x25AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x40D PUSH1 0x8 PUSH2 0x1FA0 JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x18B3 JUMPI PUSH2 0x18B3 PUSH2 0xE7A PUSH1 0x3 DUP5 PUSH2 0x1FBB JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x18DF SWAP1 PUSH2 0x25E1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x191C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1921 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x1934 JUMPI PUSH2 0x1934 DUP2 PUSH2 0x1A85 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6EB224CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x6EB224CB SWAP1 PUSH2 0x1998 SWAP1 DUP5 SWAP1 PUSH32 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x2739 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x19C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xF0EC779B0BCDA6D84ABF99EE2C67647D1100EBBB553A9C2D1C2BA1579592832C DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1A01 SWAP2 SWAP1 PUSH2 0x25E4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 GT ISZERO DUP1 PUSH2 0x1AE4 JUMPI POP PUSH1 0x60 DUP2 ADD MLOAD PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A1 GT ISZERO JUMPDEST ISZERO PUSH2 0x1AF7 JUMPI PUSH2 0x1AF7 PUSH2 0xE7A PUSH1 0x5 DUP5 PUSH2 0x1B41 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B06 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1B1A JUMPI PUSH2 0x1B1A PUSH2 0xE7A PUSH1 0x3 DUP5 PUSH2 0x1B41 JUMP JUMPDEST PUSH1 0x1 DUP2 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1B29 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x1B3D JUMPI PUSH2 0x1B3D PUSH2 0xE7A PUSH1 0x0 DUP5 PUSH2 0x1B41 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0xF18F11F3027E735C758137924B262D4D3AFF0037DCD785ACA3C699FA05D960BD DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1B77 SWAP3 SWAP2 SWAP1 PUSH2 0x27B9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH32 0x47AB394E41470191EAF9FA542E84AC483A12665FBD616EB8D1C022CED6C94000 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1B77 SWAP3 SWAP2 SWAP1 PUSH2 0x26DD JUMP JUMPDEST PUSH1 0x60 PUSH32 0x5D3300180A4547B3E27137BE832D3EBF56F1BA5EBB30DD580999C61F77FA6396 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1C6A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2654 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x40D PUSH1 0x7 PUSH2 0x1FA0 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xC0972F3CC4234CA2091DE7E7BC7081494BD29AC280167D66F0D44168973B1634 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1C6A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2654 JUMP JUMPDEST PUSH1 0x60 PUSH32 0xF13E65D925201525F3D71A731833B19BB26E44CFBD97CAF72A366B73866F7124 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1C6A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2654 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT PUSH2 0x1DA0 JUMPI DUP2 PUSH2 0x1DA2 JUMP JUMPDEST DUP3 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DBF DUP4 PUSH2 0x1DB9 DUP7 DUP6 PUSH2 0x1FD8 JUMP JUMPDEST SWAP1 PUSH2 0x2009 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ADDRESS EQ ISZERO PUSH2 0x1E17 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x594 SWAP1 PUSH2 0x2955 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE DUP2 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND GAS CALL RETURNDATASIZE PUSH1 0x1 DUP4 MLOAD EQ PUSH1 0x20 DUP3 LT ISZERO AND DUP2 ISZERO OR DUP3 AND SWAP2 POP DUP2 PUSH2 0x14C9 JUMPI DUP1 PUSH1 0x0 DUP5 RETURNDATACOPY DUP1 DUP4 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ADDRESS EQ ISZERO PUSH2 0x1EF1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x594 SWAP1 PUSH2 0x2955 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE DUP2 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x64 DUP4 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND GAS CALL RETURNDATASIZE PUSH1 0x1 DUP4 MLOAD EQ PUSH1 0x20 DUP3 LT ISZERO AND DUP2 ISZERO OR DUP3 AND SWAP2 POP DUP2 PUSH2 0x1F97 JUMPI DUP1 PUSH1 0x0 DUP5 RETURNDATACOPY DUP1 DUP4 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 PUSH1 0x8 DUP2 GT ISZERO PUSH2 0x1FB0 JUMPI INVALID JUMPDEST PUSH1 0x1 ADD SWAP1 SHL SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xC996AF7B PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1B77 SWAP3 SWAP2 SWAP1 PUSH2 0x27A2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1FE7 JUMPI POP PUSH1 0x0 PUSH2 0x40D JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1FF4 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1DA2 JUMPI PUSH2 0x1DA2 PUSH2 0xE7A PUSH1 0x1 DUP7 DUP7 PUSH2 0x2033 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x201F JUMPI PUSH2 0x201F PUSH2 0xE7A PUSH1 0x3 DUP6 DUP6 PUSH2 0x2033 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x202A JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1C6A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2781 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x40D DUP2 PUSH2 0x2BCB JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2084 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2097 PUSH2 0x2092 DUP3 PUSH2 0x2B59 JUMP JUMPDEST PUSH2 0x2B32 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x20B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x20E5 JUMPI DUP3 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x20D3 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x20BC JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2101 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x210F PUSH2 0x2092 DUP3 PUSH2 0x2B59 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x80 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x2132 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x20E5 JUMPI PUSH2 0x2147 DUP10 DUP5 PUSH2 0x2202 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2135 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x216C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2175 DUP2 PUSH2 0x2B32 JUMP JUMPDEST SWAP2 POP POP DUP2 CALLDATALOAD PUSH2 0x2183 DUP2 PUSH2 0x2BCB JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x2193 DUP2 PUSH2 0x2BCB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x21A5 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x2265 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x21B7 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x2265 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x21C9 DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x2069 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x21DB DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x2069 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x21ED DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x2069 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2213 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x221D PUSH1 0x80 PUSH2 0x2B32 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x222E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x40D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2297 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x22A2 DUP2 PUSH2 0x2BCB JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x22BE JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x22DE JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x22F5 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2308 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2316 PUSH2 0x2092 DUP3 PUSH2 0x2B59 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x100 DUP14 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0x2339 JUMPI DUP10 DUP11 REVERT JUMPDEST DUP10 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0x2365 JUMPI PUSH2 0x234F DUP15 DUP4 PUSH2 0x2159 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP8 SWAP1 SWAP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH2 0x233D JUMP JUMPDEST POP SWAP2 SWAP10 POP DUP11 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x237D JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x2389 DUP9 DUP4 DUP10 ADD PUSH2 0x20F1 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x239E JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x23AA DUP9 DUP4 DUP10 ADD PUSH2 0x20F1 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x23BF JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x23CC DUP8 DUP3 DUP9 ADD PUSH2 0x2074 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23EA JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1DA2 DUP4 DUP4 PUSH2 0x2159 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x180 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2407 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2411 DUP5 DUP5 PUSH2 0x2159 JUMP JUMPDEST SWAP2 POP PUSH2 0x2421 DUP5 PUSH2 0x100 DUP6 ADD PUSH2 0x2202 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x200 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x243F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x2449 DUP6 DUP6 PUSH2 0x2159 JUMP JUMPDEST SWAP3 POP PUSH2 0x2459 DUP6 PUSH2 0x100 DUP7 ADD PUSH2 0x2202 JUMP JUMPDEST SWAP2 POP PUSH2 0x2469 DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x2202 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x1A0 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2487 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x2491 DUP6 DUP6 PUSH2 0x2159 JUMP JUMPDEST SWAP3 POP PUSH2 0x24A1 DUP6 PUSH2 0x100 DUP7 ADD PUSH2 0x2202 JUMP JUMPDEST SWAP2 POP PUSH2 0x180 DUP5 ADD CALLDATALOAD PUSH2 0x24B2 DUP2 PUSH2 0x2BED JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x200 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x24D6 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x24E0 DUP9 DUP9 PUSH2 0x2159 JUMP JUMPDEST SWAP6 POP PUSH2 0x24F0 DUP9 PUSH2 0x100 DUP10 ADD PUSH2 0x2202 JUMP JUMPDEST SWAP5 POP PUSH2 0x180 DUP8 ADD CALLDATALOAD PUSH2 0x2501 DUP2 PUSH2 0x2BED JUMP JUMPDEST SWAP4 POP PUSH2 0x1A0 DUP8 ADD CALLDATALOAD PUSH2 0x2512 DUP2 PUSH2 0x2BCB JUMP JUMPDEST SWAP3 POP PUSH2 0x1C0 DUP8 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2527 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP2 POP PUSH2 0x1E0 DUP8 ADD CALLDATALOAD PUSH2 0x2538 DUP2 PUSH2 0x2BCB JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH2 0x256B DUP2 PUSH2 0x2BBE JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x25A1 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2B92 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x263F JUMPI DUP4 MLOAD ISZERO ISZERO DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2621 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP7 DUP8 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x20 DUP9 ADD MSTORE SWAP4 DUP6 AND PUSH1 0x40 DUP8 ADD MSTORE SWAP2 DUP5 AND PUSH1 0x60 DUP7 ADD MSTORE SWAP1 SWAP3 AND PUSH1 0x80 DUP5 ADD MSTORE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0xA0 DUP5 ADD MSTORE AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0xFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x278E DUP6 PUSH2 0x2BBE JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x27AF DUP5 PUSH2 0x2BBE JUMP JUMPDEST SWAP3 DUP2 MSTORE PUSH1 0x20 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH1 0x6 DUP5 LT PUSH2 0x27AF JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x27E6 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B92 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3E SWAP1 DUP3 ADD MSTORE PUSH32 0x4F74634F7264657273466561747572653A3A66696C6C54616B65725369676E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x644F74634F726465722F4D414B45525F544F4B454E5F4E4F545F574554480000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x48 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F74634F7264657273466561747572653A3A626174636846696C6C54616B6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5369676E65644F74634F72646572732F4D49534D4154434845445F4152524159 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x5F4C454E47544853000000000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x39 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F74634F7264657273466561747572653A3A66696C6C4F74634F72646572466F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x724574682F4D414B45525F544F4B454E5F4E4F545F5745544800000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x466978696E546F6B656E5370656E6465722F43414E4E4F545F494E564F4B455F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x53454C4600000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x39 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F74634F7264657273466561747572653A3A66696C6C4F74634F726465725769 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x74684574682F494E56414C49445F54414B45525F544F4B454E00000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD SWAP1 PUSH1 0x5 DUP2 LT PUSH2 0x2A27 JUMPI INVALID JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 MLOAD PUSH2 0x200 DUP3 ADD SWAP1 PUSH2 0x2A45 SWAP1 PUSH2 0x2B79 JUMP JUMPDEST DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x20 DUP7 ADD MLOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x40 DUP6 ADD MSTORE DUP1 PUSH1 0x60 DUP9 ADD MLOAD AND PUSH1 0x60 DUP6 ADD MSTORE POP POP PUSH1 0x80 DUP6 ADD MLOAD PUSH2 0x2AA5 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x2546 JUMP JUMPDEST POP PUSH1 0xA0 DUP6 ADD MLOAD PUSH2 0x2AB8 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x2546 JUMP JUMPDEST POP PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x2ACB PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x2546 JUMP JUMPDEST POP PUSH1 0xE0 DUP6 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x2AE4 PUSH2 0x100 DUP4 ADD DUP6 PUSH2 0x2560 JUMP JUMPDEST PUSH2 0x1DBF PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0x2560 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2B51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2B6F JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2BAD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2B95 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1934 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x2BC8 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2BC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2BC8 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 0xA6 0xEB RETURN 0xB0 GASPRICE PUSH24 0xFB264B9C0933B12FA777790430C4E301225825301AF5C491 0x29 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "1374:20820:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1716:75;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8581:922;;;;;;;;;;-1:-1:-1;8581:922:4;;;;;:::i;:::-;;:::i;:::-;;21026:253;;;;;;;;;;-1:-1:-1;21026:253:4;;;;;:::i;:::-;;:::i;21529:342::-;;;;;;;;;;-1:-1:-1;21529:342:4;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1614:58::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;6670:1605::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;9898:1225::-;;;;;;;;;;-1:-1:-1;9898:1225:4;;;;;:::i;:::-;;:::i;19739:1150::-;;;;;;;;;;-1:-1:-1;19739:1150:4;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2325:816::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;5056:1269::-;;;;;;;;;;-1:-1:-1;5056:1269:4;;;;;:::i;:::-;;:::i;990:48:12:-;;;;;;;;;;;;;:::i;3574:960:4:-;;;;;;;;;;-1:-1:-1;3574:960:4;;;;;:::i;:::-;;:::i;13606:1074::-;;;;;;;;;;-1:-1:-1;13606:1074:4;;;;;:::i;:::-;;:::i;11713:1186::-;;;;;;;;;;-1:-1:-1;11713:1186:4;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1716:75::-;;;:::o;8581:922::-;8820:44;;:::i;:::-;8867:22;8883:5;8867:15;:22::i;:::-;8820:69;;8899:13;8915:65;8944:9;:19;;;8965:14;8915:28;:65::i;:::-;8899:81;;8999:117;9030:5;9050:9;9073:14;9101:5;8999:17;:117::i;:::-;9126:113;9155:5;9174;:17;;;9205:5;9224;9126:15;:113::i;:::-;;;9255:241;9283:9;:19;;;9316:5;:11;;;9341:5;9368;:16;;;9407:5;:16;;;9438:5;:17;;;9469:5;:17;;;9255:241;;;;;;;;;;;;:::i;:::-;;;;;;;;8581:922;;;;;:::o;21026:253::-;21151:17;21191:81;21219:43;21256:5;21219:36;:43::i;:::-;21191:14;:81::i;:::-;21184:88;;21026:253;;;;:::o;21529:342::-;21659:17;21692:40;21747:32;:30;:32::i;:::-;21796:42;;;:19;:42;;;;;;;;;;;:68;;;;;;;;;;;;;-1:-1:-1;;21529:342:4;;;;;:::o;1614:58::-;;;;;;;;;;;;;;;;;;;:::o;6670:1605::-;6870:30;6902;6972:4;6952:24;;:5;:16;;;:24;;;6948:304;;;7016:4;:12;;;7036:9;7016:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6948:304;;;7112:16;;;;7104:46;;1881:42;7104:46;7079:162;;;;;;;;;;;;:::i;:::-;;;;;;;;;7262:44;;:::i;:::-;7309:22;7325:5;7309:15;:22::i;:::-;7262:69;;7341:122;7372:5;7392:9;7415:14;7443:10;7341:17;:122::i;:::-;7526:142;7555:5;7574:33;:9;:31;:33::i;:::-;7629:4;7648:10;7526:15;:142::i;:::-;7474:194;;-1:-1:-1;7474:194:4;-1:-1:-1;7707:9:4;7682:34;;;;7678:319;;;7732:20;7775:22;7767:31;;7755:9;:43;7732:66;;7836:4;7816:24;;:5;:16;;;:24;;;7812:90;;;7860:27;;;;;:13;:4;:13;;;;:27;;7874:12;;7860:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7812:90;7948:38;7961:10;7973:12;7948;:38::i;:::-;7678:319;;8040:19;;8073:11;;;;8130:16;;8169;;;;8012:256;;;;;;8040:19;;8073:11;;8098:10;;8200:22;;8236;;8012:256;:::i;:::-;;;;;;;;6670:1605;;;;;;:::o;9898:1225::-;10184:4;10164:24;;:5;:16;;;:24;;;10143:133;;;;;;;;;;;;:::i;:::-;10286:44;;:::i;:::-;10333:22;10349:5;10333:15;:22::i;:::-;10286:69;;10365:13;10381:65;10410:9;:19;;;10431:14;10381:28;:65::i;:::-;10365:81;;10465:117;10496:5;10516:9;10539:14;10567:5;10465:17;:117::i;:::-;10592:121;10621:5;10640;:17;;;10671:5;10698:4;10592:15;:121::i;:::-;-1:-1:-1;;10760:17:4;;;;;10746:32;;;;;:13;:4;:13;;;;:32;;10760:17;10746:32;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10821:38;10834:5;10841;:17;;;10821:38;;:12;:38::i;:::-;10875:241;10903:9;:19;;;10936:5;:11;;;10961:5;10988;:16;;;11027:5;:16;;;11058:5;:17;;;11089:5;:17;;;10875:241;;;;;;;;;;;;:::i;19739:1150::-;19864:44;;:::i;:::-;19977:22;19993:5;19977:15;:22::i;:::-;19955:44;;:19;20065:32;:30;:32::i;:::-;20173:20;;;;20197:3;20419:14;;;;20386:48;;20150:13;20386:48;;;;;;;;;;;20263:3;20239:27;;;20386:74;;;;;;;;;;;:48;;-1:-1:-1;20173:27:4;;;;;20239;;20173:20;20386:74;;;;;20474:18;;-1:-1:-1;;20470:132:4;;20508:16;;;20527:34;20508:53;;;;;;;;;;;;;;;20575:16;;;;;;;20470:132;20666:15;20649:33;;:6;:33;;;20645:147;;20698:16;;;20717:34;20698:53;;20645:147;-1:-1:-1;;20821:35:4;20802:16;;;:54;-1:-1:-1;20802:16:4;;19739:1150;-1:-1:-1;;;19739:1150:4:o;2325:816::-;2378:14;2408:52;2433:26;2408:24;:52::i;:::-;2470:58;2495:32;2470:24;:58::i;:::-;2538:59;2563:33;2538:24;:59::i;:::-;2607:69;2632:43;2607:24;:69::i;:::-;2686:63;2711:37;2686:24;:63::i;:::-;2759:69;2784:43;2759:24;:69::i;:::-;2838:53;2863:27;2838:24;:53::i;:::-;2901:55;2926:29;2901:24;:55::i;:::-;2966;2991:29;2966:24;:55::i;:::-;3031:60;3056:34;3031:24;:60::i;:::-;-1:-1:-1;3108:26:4;2325:816;:::o;5056:1269::-;5277:30;5309;5396:4;5376:24;;:5;:16;;;:24;;;5355:128;;;;;;;;;;;;:::i;:::-;5493:44;;:::i;:::-;5540:22;5556:5;5540:15;:22::i;:::-;5493:69;;5572:122;5603:5;5623:9;5646:14;5674:10;5572:17;:122::i;:::-;5755:130;5784:5;5803:20;5838:10;5870:4;5755:15;:130::i;:::-;5918:37;;;;;5704:181;;-1:-1:-1;5704:181:4;-1:-1:-1;5918:13:4;:4;:13;;;;:37;;5704:181;;5918:37;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5998:48;6011:10;6023:22;5998:48;;:12;:48::i;:::-;6090:19;;6123:11;;;;6180:16;;6219;;;;6062:256;;;;;;6090:19;;6123:11;;6148:10;;6250:22;;6286;;6062:256;:::i;:::-;;;;;;;;5056:1269;;;;;;;:::o;990:48:12:-;;;:::o;3574:960:4:-;3789:30;3821;3867:44;;:::i;:::-;3914:22;3930:5;3914:15;:22::i;:::-;3867:69;;3946:122;3977:5;3997:9;4020:14;4048:10;3946:17;:122::i;:::-;4129:126;4158:5;4177:20;4211:10;4235;4129:15;:126::i;:::-;4299:19;;4332:11;;;;4389:16;;4428;;;;4271:256;;4078:177;;-1:-1:-1;4078:177:4;;-1:-1:-1;4271:256:4;;;;4357:10;;4389:16;4078:177;;;;4271:256;:::i;13606:1074::-;13918:30;;1272:10:11;1294:4;1272:27;1268:123;;1315:65;:55;1359:10;1315:43;:55::i;:::-;:63;:65::i;:::-;13996:44:4::1;;:::i;:::-;14043:22;14059:5;14043:15;:22::i;:::-;13996:69;;14075:117;14106:5;14126:9;14149:14;14177:5;14075:17;:117::i;:::-;14253:153;14282:5;14301:20;14335:14;:38;;14368:5;14335:38;;;14360:4;14335:38;14387:9;14253:15;:153::i;:::-;14450:19:::0;;14483:11:::1;::::0;::::1;::::0;14535:16;;14574::::1;::::0;::::1;::::0;14422:251:::1;::::0;14202:204;;-1:-1:-1;14202:204:4;;-1:-1:-1;14422:251:4::1;::::0;::::1;::::0;14508:5;;14535:16;14202:204;;;;14422:251:::1;:::i;:::-;;;;;;;;1400:1:11;13606:1074:4::0;;;;;;;;;:::o;11713:1186::-;12004:23;12081:15;:22;12064:6;:13;:39;:95;;;;;12137:15;:22;12120:6;:13;:39;12064:95;:145;;;;;12192:10;:17;12175:6;:13;:34;12064:145;12043:264;;;;;;;;;;;;:::i;:::-;12340:6;:13;12329:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12329:25:4;;12317:37;;12369:9;12364:529;12389:6;:13;12384:1;:18;12364:529;;12423:17;12443:10;12454:1;12443:13;;;;;;;;;;;;;;:132;;12538:37;12443:132;;;12476:43;12443:132;12423:152;;12639:15;:28;;12729:10;12761:6;12768:1;12761:9;;;;;;;;;;;;;;12792:15;12808:1;12792:18;;;;;;;;;;;;;;12832:15;12848:1;12832:18;;;;;;;;;;;;;;12685:183;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12639:243;;;;12685:183;12639:243;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12620:262;12621:9;12631:1;12621:12;;;;;;;;12620:262;;;12621:12;;;;;;;;;;;12620:262;-1:-1:-1;12404:3:4;;12364:529;;;;11713:1186;;;;;;:::o;2295:1567:10:-;2431:17;2545:49;2578:4;2584:9;2545:32;:49::i;:::-;2636:20;2609:23;;:47;;;;;;;;;2605:929;;;2719:132;2746:4;2768:9;:11;;;2797:9;:11;;;2826:9;:11;;;2719:132;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2707:144;;2605:929;;;2899:21;2872:23;;:48;;;;;;;;;2868:666;;;3092:19;3199:20;3196:1;3189:31;3270:4;3266:2;3259:16;3342:2;3339:1;3329:16;3314:31;;3384:139;3411:11;3440:9;:11;;;3469:9;:11;;;3498:9;:11;;;3384:139;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3372:151;;2868:666;;3624:23;;;3620:236;;3663:182;:172;3728:71;3817:4;3663:47;:172::i;14981:1786:4:-;15287:35;15267:9;:16;;;:55;;;;;;;;;15263:235;;15338:149;:139;15403:9;:19;;;15446:9;:16;;;15440:23;;;;;;;;15338:47;:139::i;:149::-;15560:11;;;;:25;;;;;;:49;;;15604:5;15589:20;;:5;:11;;;:20;;;;15560:49;15556:247;;;15625:167;:157;15697:9;:19;;;15734:5;15757;:11;;;15625:54;:157::i;:167::-;15813:43;15871:35;:33;:35::i;:::-;15980:14;;;;15813:93;;-1:-1:-1;15980:27:4;;15998:9;15980:27;;;;:90;;-1:-1:-1;16044:14:4;;;;16024:35;;;;;;:19;;;:35;;;;;;;;16060:9;16024:46;;;;;;;;;;16023:47;15980:90;15963:318;;;16095:175;:165;16168:9;:19;;;16205:9;16232:5;:14;;;16095:55;:165::i;:175::-;16347:19;16369:65;16398:9;:19;;;16419:14;16369:28;:65::i;:::-;16347:87;;16476:5;:11;;;16461:26;;:11;:26;;;;:93;;;;-1:-1:-1;16529:11:4;;;;16504:37;;;;;;;;:24;;;:37;;;;;;;;:50;;;;;;;;;;;;16503:51;16461:93;16444:317;;;16579:171;:161;16649:9;:19;;;16686:11;16715:5;:11;;;16579:52;:161::i;:171::-;14981:1786;;;;;;:::o;17245:2354::-;17598:20;;;;17443:30;;;;17622:3;17598:27;;;;:20;17751:32;:30;:32::i;:::-;17816:14;;;;17751:80;;:47;:80;;;;;;;;;;;:93;;;;;;;;;;;;;;;:101;;;;;;;;;;;-1:-1:-1;17901:17:4;;;;17877:41;;;;;;17873:791;;;-1:-1:-1;;17959:17:4;;;;18015;;;;17873:791;;;18161:108;18200:20;18238:5;:17;;;18161:21;:108::i;:::-;18136:133;;18469:183;18527:22;18519:31;;18576:5;:17;;;18568:26;;18620:5;:17;;;18612:26;;18469:32;:183::i;:::-;18436:217;;17873:791;18678:22;;;18695:4;18678:22;18674:721;;;18728:16;;;;18720:46;;1881:42;18720:46;18716:435;;;18840:11;;;;18832:53;;:29;;;;;:53;;;;;;;;;;;;;:29;:53;;;;;;;;;;;;;;;;;;;;;18716:435;;;18967:153;19009:5;:16;;;19047:5;:11;;;19080:22;18967:153;;:20;:153::i;:::-;18674:721;;;19220:164;19262:5;:16;;;19296:5;19319;:11;;;19348:22;19220:164;;:24;:164::i;:::-;19444:148;19482:5;:16;;;19512:5;:11;;;19537:9;19560:22;19444:148;;:24;:148::i;:::-;17245:2354;;;;;;;:::o;8797:1496:9:-;8898:18;9316:4;9310:11;9346:19;9341:3;9334:32;9459:5;9453:12;9439;9435:31;9428:4;9423:3;9419:14;9412:55;9571:4;9564:5;9560:16;9554:23;9540:12;9536:42;9529:4;9524:3;9520:14;9513:66;9685:4;9678:5;9674:16;9668:23;9653:13;9649:43;9642:4;9637:3;9633:14;9626:67;9799:4;9792:5;9788:16;9782:23;9767:13;9763:43;9756:4;9751:3;9747:14;9740:67;9906:4;9899:5;9895:16;9889:23;9875:12;9871:42;9864:4;9859:3;9855:14;9848:66;10013:4;10006:5;10002:16;9996:23;9982:12;9978:42;9971:4;9966:3;9962:14;9955:66;10123:4;10116:5;10112:16;10106:23;10092:12;10088:42;10081:4;10076:3;10072:14;10065:66;10222:4;10215:5;10211:16;10205:23;10197:5;10192:3;10188:15;10181:48;10271:5;10266:3;10256:21;10242:35;;;9285:1002;;;:::o;1810:260:12:-;1901:18;2005:23;2042:10;1952:110;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1942:121;;;;;;1935:128;;1810:260;;;:::o;1042:470:16:-;1087:20;1119:19;1141:79;1180:30;1141:25;:79::i;4618:401:21:-;4707:7;4738:17;4734:21;;4730:256;;;4771:204;4796:178;4859:82;4959:1;4796:45;:178::i;4771:204::-;-1:-1:-1;5010:1:21;4618:401::o;21877:315:4:-;22002:12;22016:23;22055:9;:14;;22077:6;22055:33;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22001:87;;;;22132:7;22127:59;;22155:20;:10;:18;:20::i;:::-;21877:315;;;;:::o;2201:168:11:-;2283:79;;;;;2322:4;;2283:52;;:79;;2336:8;;2346:15;;2283:79;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2201:168;:::o;724:257:0:-;820:12;898:45;958:6;855:119;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;724:257:0;;;:::o;1531:170:23:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;4028:1255:10;4251:11;;;;1321:66;-1:-1:-1;4243:47:10;;:110;;-1:-1:-1;4314:11:10;;;;1584:31;-1:-1:-1;4306:47:10;4243:110;4239:331;;;4377:182;:172;4442:71;4531:4;4377:47;:172::i;:182::-;4648:21;4621:23;;:48;;;;;;;;;4617:250;;;4685:171;:161;4750:60;4828:4;4685:47;:161::i;:171::-;4935:21;4908:23;;:48;;;;;;;;;4904:257;;;4972:178;:168;5037:67;5122:4;4972:47;:168::i;:178::-;4028:1255;;:::o;1380:337:3:-;1533:12;1611:52;1678:4;1696;1568:142;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1380:337:3;;;;:::o;1492:331:1:-;1630:12;1708:49;1772:9;1795:11;1665:151;;;;;;;;;:::i;2946:397::-;3115:12;3193:66;3274:9;3297:5;3316:10;3150:186;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2946:397:1;;;;;:::o;2067:473:15:-;2112:20;2144:19;2166:82;2205:33;2166:25;:82::i;1075:411:1:-;1251:12;1329:67;1411:9;1434:8;1456:13;1286:193;;;;;;;;;;:::i;1829:385::-;1992:12;2070:64;2149:9;2172:6;2192:5;2027:180;;;;;;;;;;:::i;4477:135:21:-;4562:7;4596:1;4592:5;;:1;:5;;;:13;;4604:1;4592:13;;;4600:1;4592:13;4585:20;4477:135;-1:-1:-1;;;4477:135:21:o;3247:300:20:-;3411:21;3464:46;3498:11;3464:25;:9;3482:6;3464:17;:25::i;:::-;:33;;:46::i;:::-;3448:62;3247:300;-1:-1:-1;;;;3247:300:20:o;3238:1617:13:-;3387:31;;;3413:4;3387:31;;3379:80;;;;;;;;;;;;:::i;:::-;3510:4;3504:11;3618:66;3613:3;3606:79;3729:12;3725:2;3721:21;3714:4;3709:3;3705:14;3698:45;3779:6;3772:4;3767:3;3763:14;3756:30;3985:2;3964:3;3942:4;3921:3;3902:1;3871:12;3864:5;3860:24;3837:5;3815:186;4029:16;4615:1;4609:3;4603:10;4600:17;4544:2;4536:6;4533:14;4526:22;4497:179;4429:6;4422:14;4398:296;4320:7;4299:409;4288:420;;4732:7;4722:2;;4782:6;4779:1;4774:3;4759:30;4818:6;4813:3;4806:19;1310:1717;1486:31;;;1512:4;1486:31;;1478:80;;;;;;;;;;;;:::i;:::-;1609:4;1603:11;1729:66;1724:3;1717:79;1843:12;1836:5;1832:24;1825:4;1820:3;1816:14;1809:48;1901:12;1897:2;1893:21;1886:4;1881:3;1877:14;1870:45;1951:6;1944:4;1939:3;1935:14;1928:30;2157:2;2136:3;2114:4;2093:3;2074:1;2043:12;2036:5;2032:24;2009:5;1987:186;2201:16;2787:1;2781:3;2775:10;2772:17;2716:2;2708:6;2705:14;2698:22;2669:179;2601:6;2594:14;2570:296;2492:7;2471:409;2460:420;;2904:7;2894:2;;2954:6;2951:1;2946:3;2931:30;2990:6;2985:3;2978:19;2894:2;;;;1578:1443;;;;:::o;1625:335:17:-;1717:12;922:3;1918:9;1910:18;;;;;;;;1931:1;1910:22;1909:44;;;1625:335;-1:-1:-1;;1625:335:17:o;1729:297:24:-;1869:12;966:10;1940:31;;1985:9;2008:1;1904:115;;;;;;;;;:::i;764:457:21:-;850:7;877:6;873:45;;-1:-1:-1;906:1:21;899:8;;873:45;939:5;;;943:1;939;:5;:1;958:5;;;;;:10;954:243;;984:202;1009:176;1069:64;1151:1;1170;1009:42;:176::i;1227:392::-;1313:7;1340:6;1336:232;;1362:195;1387:169;1447:57;1522:1;1541;1387:42;:169::i;1362:195::-;1577:9;1593:1;1589;:5;;;;;;;1227:392;-1:-1:-1;;;;1227:392:21:o;1401:322:24:-;1554:12;818:10;1625:28;;1667:9;1690:1;1705;1589:127;;;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;97:33;72:20;97:33;:::i;157:698::-;;271:3;264:4;256:6;252:17;248:27;238:2;;-1:-1;;279:12;238:2;326:6;313:20;348:77;363:61;417:6;363:61;:::i;:::-;348:77;:::i;:::-;453:21;;;339:86;-1:-1;497:4;510:14;;;;485:17;;;599;;;590:27;;;;587:36;-1:-1;584:2;;;636:1;;626:12;584:2;661:1;;646:203;671:6;668:1;665:13;646:203;;;2614:6;2601:20;39908:5;35369:13;35362:21;39886:5;39883:32;39873:2;;661:1;;39919:12;39873:2;739:47;;800:14;;;;828;;;;693:1;686:9;646:203;;;650:14;;;;;;231:624;;;;:::o;1741:788::-;;1885:3;1878:4;1870:6;1866:17;1862:27;1852:2;;-1:-1;;1893:12;1852:2;1940:6;1927:20;1962:107;1977:91;2061:6;1977:91;:::i;1962:107::-;2097:21;;;1953:116;-1:-1;2141:4;2154:14;;;;2129:17;;;2255:4;2243:17;;;2234:27;;;;2231:36;-1:-1;2228:2;;;2280:1;;2270:12;2228:2;2305:1;2290:233;2315:6;2312:1;2309:13;2290:233;;;2395:64;2455:3;2443:10;2395:64;:::i;:::-;2383:77;;2474:14;;;;2502;;;;2337:1;2330:9;2290:233;;3198:1428;;3313:6;;3301:9;3296:3;3292:19;3288:32;3285:2;;;-1:-1;;3323:12;3285:2;3351:22;3313:6;3351:22;:::i;:::-;3342:31;;;2908:6;2895:20;2920:56;2970:5;2920:56;:::i;:::-;3436:98;;3601:2;3678:22;;72:20;97:33;72:20;97:33;:::i;:::-;3601:2;3616:16;;3609:98;3808:49;3853:3;3775:2;3829:22;;3808:49;:::i;:::-;3775:2;3794:5;3790:16;3783:75;3959:49;4004:3;3926:2;3984:9;3980:22;3959:49;:::i;:::-;3926:2;3945:5;3941:16;3934:75;4105:49;4150:3;4071;4130:9;4126:22;4105:49;:::i;:::-;4071:3;4091:5;4087:16;4080:75;4251:49;4296:3;4217;4276:9;4272:22;4251:49;:::i;:::-;4217:3;4237:5;4233:16;4226:75;4400:49;4445:3;4366;4425:9;4421:22;4400:49;:::i;:::-;4366:3;4386:5;4382:16;4375:75;4521:3;4580:9;4576:22;5653:20;4521:3;4541:5;4537:16;4530:75;3279:1347;;;;:::o;4669:773::-;;4785:4;4773:9;4768:3;4764:19;4760:30;4757:2;;;-1:-1;;4793:12;4757:2;4821:20;4785:4;4821:20;:::i;:::-;4812:29;;3086:6;3073:20;40326:1;40319:5;40316:12;40306:2;;40342:1;;40332:12;40306:2;4907:93;;5058:2;5110:22;;5923:20;37032:4;37021:16;;40785:33;;40775:2;;40832:1;;40822:12;40775:2;5091:47;5058:2;5077:5;5073:16;5066:73;;5197:2;5255:9;5251:22;2735:20;5197:2;5216:5;5212:16;5205:75;5338:2;5396:9;5392:22;2735:20;5338:2;5357:5;5353:16;5346:75;4751:691;;;;:::o;5449:130::-;5516:20;;36604:34;36593:46;;40417:35;;40407:2;;40466:1;;40456:12;5991:364;;;6111:2;6099:9;6090:7;6086:23;6082:32;6079:2;;;-1:-1;;6117:12;6079:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;6169:63;-1:-1;6269:2;6307:22;;5789:20;36930:18;36919:30;;40664:34;;40654:2;;-1:-1;;40702:12;40654:2;6277:62;;;;6073:282;;;;;:::o;6362:1315::-;;;;;6694:3;6682:9;6673:7;6669:23;6665:33;6662:2;;;-1:-1;;6701:12;6662:2;6759:17;6746:31;6797:18;;6789:6;6786:30;6783:2;;;-1:-1;;6819:12;6783:2;6936:6;6925:9;6921:22;;;1047:3;1040:4;1032:6;1028:17;1024:27;1014:2;;-1:-1;;1055:12;1014:2;1102:6;1089:20;1124:106;1139:90;1222:6;1139:90;:::i;1124:106::-;1236:16;1272:6;1265:5;1258:21;1302:4;;1319:3;1315:14;1308:21;;1302:4;1294:6;1290:17;1416:6;1426:3;1302:4;1416:6;1408;1404:19;1294:6;1395:29;;1392:38;1389:2;;;-1:-1;;1433:12;1389:2;-1:-1;1459:10;;1453:234;1478:6;1475:1;1472:13;1453:234;;;1558:63;1617:3;1605:10;1558:63;:::i;:::-;1546:76;;1500:1;1493:9;;;;;1636:14;;;;1664:16;;;;1453:234;;;-1:-1;6839:114;;-1:-1;7003:18;;6990:32;;-1:-1;;;;7031:30;;;7028:2;;;-1:-1;;7064:12;7028:2;7094:105;7191:7;7182:6;7171:9;7167:22;7094:105;:::i;:::-;7084:115;;7264:2;7253:9;7249:18;7236:32;7222:46;;6797:18;7280:6;7277:30;7274:2;;;-1:-1;;7310:12;7274:2;7340:105;7437:7;7428:6;7417:9;7413:22;7340:105;:::i;:::-;7330:115;;7510:2;7499:9;7495:18;7482:32;7468:46;;6797:18;7526:6;7523:30;7520:2;;;-1:-1;;7556:12;7520:2;;7586:75;7653:7;7644:6;7633:9;7629:22;7586:75;:::i;:::-;7576:85;;;6656:1021;;;;;;;:::o;7684:294::-;;7814:3;7802:9;7793:7;7789:23;7785:33;7782:2;;;-1:-1;;7821:12;7782:2;7883:79;7954:7;7930:22;7883:79;:::i;7985:474::-;;;8159:3;8147:9;8138:7;8134:23;8130:33;8127:2;;;-1:-1;;8166:12;8127:2;8228:79;8299:7;8275:22;8228:79;:::i;:::-;8218:89;;8363:80;8435:7;8344:3;8415:9;8411:22;8363:80;:::i;:::-;8353:90;;8121:338;;;;;:::o;8466:654::-;;;;8684:3;8672:9;8663:7;8659:23;8655:33;8652:2;;;-1:-1;;8691:12;8652:2;8753:79;8824:7;8800:22;8753:79;:::i;:::-;8743:89;;8888:80;8960:7;8869:3;8940:9;8936:22;8888:80;:::i;:::-;8878:90;;9024:80;9096:7;9005:3;9076:9;9072:22;9024:80;:::i;:::-;9014:90;;8646:474;;;;;:::o;9127:600::-;;;;9318:3;9306:9;9297:7;9293:23;9289:33;9286:2;;;-1:-1;;9325:12;9286:2;9387:79;9458:7;9434:22;9387:79;:::i;:::-;9377:89;;9522:80;9594:7;9503:3;9574:9;9570:22;9522:80;:::i;:::-;9512:90;;9639:3;9683:9;9679:22;5516:20;5541:33;5568:5;5541:33;:::i;:::-;9648:63;;;;9280:447;;;;;:::o;9734:972::-;;;;;;;9973:3;9961:9;9952:7;9948:23;9944:33;9941:2;;;-1:-1;;9980:12;9941:2;10042:79;10113:7;10089:22;10042:79;:::i;:::-;10032:89;;10177:80;10249:7;10158:3;10229:9;10225:22;10177:80;:::i;:::-;10167:90;;10294:3;10338:9;10334:22;5516:20;5541:33;5568:5;5541:33;:::i;:::-;10303:63;-1:-1;10403:3;10443:22;;72:20;97:33;72:20;97:33;:::i;:::-;10412:63;-1:-1;10512:3;10549:22;;2601:20;35369:13;;35362:21;39883:32;;39873:2;;-1:-1;;39919:12;39873:2;10521:60;-1:-1;10618:3;10658:22;;72:20;97:33;72:20;97:33;:::i;:::-;10627:63;;;;9935:771;;;;;;;;:::o;11032:103::-;36724:42;36713:54;11093:37;;11087:48::o;19294:800::-;19522:16;19516:23;35834:53;35881:5;35834:53;:::i;:::-;13672:66;;19700:4;19689:16;;;19683:23;37032:4;37021:16;19756:14;;;20751:35;19847:4;19836:16;;;19830:23;19907:14;;;12123:37;19998:4;19987:16;;;19981:23;20058:14;;12123:37;19414:680::o;20912:271::-;;12728:5;34132:12;12839:52;12884:6;12879:3;12872:4;12865:5;12861:16;12839:52;:::i;:::-;12903:16;;;;;21046:137;-1:-1;;21046:137::o;21190:659::-;15003:66;14983:87;;14968:1;15089:11;;12123:37;;;;21701:12;;;12123:37;21812:12;;;21435:414::o;21856:379::-;22220:10;22044:191::o;22242:222::-;36724:42;36713:54;;;;11093:37;;22369:2;22354:18;;22340:124::o;22471:358::-;22642:2;22656:47;;;34132:12;;22627:18;;;34658:19;;;22471:358;;22642:2;33989:14;;;;34698;;;;22471:358;11680:251;11705:6;11702:1;11699:13;11680:251;;;11766:13;;35369;35362:21;12016:34;;34516:14;;;;10855;;;;11727:1;11720:9;11680:251;;;-1:-1;22709:110;;22613:216;-1:-1;;;;;;22613:216::o;22836:222::-;12123:37;;;22963:2;22948:18;;22934:124::o;23065:444::-;12123:37;;;36724:42;36713:54;;;23412:2;23397:18;;11093:37;36713:54;23495:2;23480:18;;11093:37;23248:2;23233:18;;23219:290::o;23516:908::-;12123:37;;;36724:42;36713:54;;;23984:2;23969:18;;11093:37;36713:54;;;24075:2;24060:18;;10962:58;36713:54;;;24158:2;24143:18;;11093:37;36713:54;;;24241:3;24226:19;;11093:37;36604:34;36593:46;;;24325:3;24310:19;;20162:37;36593:46;24409:3;24394:19;;20162:37;23819:3;23804:19;;23790:634::o;25330:325::-;12123:37;;;37032:4;37021:16;25641:2;25626:18;;20751:35;25481:2;25466:18;;25452:203::o;25662:548::-;12123:37;;;37032:4;37021:16;;;;26030:2;26015:18;;20751:35;26113:2;26098:18;;12123:37;26196:2;26181:18;;12123:37;25869:3;25854:19;;25840:370::o;26217:218::-;35546:66;35535:78;;;;12520:36;;26342:2;26327:18;;26313:122::o;26442:329::-;35546:66;35535:78;;;;12520:36;;36724:42;36713:54;26757:2;26742:18;;11093:37;26595:2;26580:18;;26566:205::o;26778:480::-;26979:2;26964:18;;35834:53;35881:5;35834:53;:::i;:::-;13189:68;;;27161:2;27146:18;;12123:37;;;;27244:2;27229:18;;;12123:37;26950:308;:::o;27265:375::-;27441:2;27426:18;;35834:53;35881:5;35834:53;:::i;:::-;13361:71;;;27626:2;27611:18;12123:37;27412:228;:::o;27647:395::-;27833:2;27818:18;;39674:1;39664:12;;39654:2;;39680:9;28049:310;;28196:2;28217:17;28210:47;14090:5;34132:12;34670:6;28196:2;28185:9;28181:18;34658:19;14184:52;14229:6;34698:14;28185:9;34698:14;28196:2;14210:5;14206:16;14184:52;:::i;:::-;39086:2;39066:14;39082:7;39062:28;14248:39;;;;34698:14;14248:39;;28167:192;-1:-1;;28167:192::o;28366:416::-;28566:2;28580:47;;;14524:2;28551:18;;;34658:19;14560:34;34698:14;;;14540:55;14629:32;14615:12;;;14608:54;14681:12;;;28537:245::o;28789:416::-;28989:2;29003:47;;;15339:2;28974:18;;;34658:19;15375:34;34698:14;;;15355:55;15444:34;15430:12;;;15423:56;15513:10;15499:12;;;15492:32;15543:12;;;28960:245::o;29212:416::-;29412:2;29426:47;;;15794:2;29397:18;;;34658:19;15830:34;34698:14;;;15810:55;15899:27;15885:12;;;15878:49;15946:12;;;29383:245::o;29635:416::-;29835:2;29849:47;;;16502:2;29820:18;;;34658:19;16538:34;34698:14;;;16518:55;16607:6;16593:12;;;16586:28;16633:12;;;29806:245::o;30058:416::-;30258:2;30272:47;;;16884:2;30243:18;;;34658:19;16920:34;34698:14;;;16900:55;16989:27;16975:12;;;16968:49;17036:12;;;30229:245::o;30481:342::-;17365:23;;12123:37;;17538:4;17527:16;;17521:23;30668:2;30653:18;;;39427:1;39417:12;;39407:2;;39433:9;39407:2;37902:40;17538:4;17616:3;17612:14;13519:64;;30639:184;;;;:::o;30830:767::-;17945:23;;31173:3;31158:19;;;37287:60;;;:::i;:::-;13022:3;13015:73;36724:42;18145:4;18138:5;18134:16;18128:23;36713:54;18145:4;18232:3;18228:14;13015:73;18329:4;18322:5;18318:16;18312:23;36604:34;;20192:5;36593:46;18329:4;18393:3;18389:14;20162:37;36604:34;18490:4;18483:5;18479:16;18473:23;36593:46;18490:4;18554:3;18550:14;20162:37;;;18645:4;18638:5;18634:16;18628:23;18657:63;18645:4;18709:3;18705:14;18691:12;18657:63;:::i;:::-;;18800:4;18793:5;18789:16;18783:23;18812:63;18800:4;18864:3;18860:14;18846:12;18812:63;:::i;:::-;;18958:4;18951:5;18947:16;18941:23;18970:63;18958:4;19022:3;19018:14;19004:12;18970:63;:::i;:::-;;19122:4;19115:5;19111:16;19105:23;19122:4;19186:3;19182:14;12123:37;31322:127;31444:3;31433:9;31429:19;31420:6;31322:127;:::i;:::-;31460;31582:3;31571:9;31567:19;31558:6;31460:127;:::i;31604:222::-;36604:34;36593:46;;;;20162:37;;31731:2;31716:18;;31702:124::o;32062:333::-;36604:34;36593:46;;;20162:37;;36593:46;;32381:2;32366:18;;20162:37;32217:2;32202:18;;32188:207::o;32631:256::-;32693:2;32687:9;32719:17;;;32794:18;32779:34;;32815:22;;;32776:62;32773:2;;;32851:1;;32841:12;32773:2;32693;32860:22;32671:216;;-1:-1;32671:216::o;32894:301::-;;33050:18;33042:6;33039:30;33036:2;;;-1:-1;;33072:12;33036:2;-1:-1;33117:4;33105:17;;;33170:15;;32973:222::o;35205:91::-;36724:42;36713:54;;35250:46::o;38641:268::-;38706:1;38713:101;38727:6;38724:1;38721:13;38713:101;;;38794:11;;;38788:18;38775:11;;;38768:39;38749:2;38742:10;38713:101;;;38829:6;38826:1;38823:13;38820:2;;;-1:-1;;38706:1;38876:16;;38869:27;38690:219::o;39103:111::-;39192:1;39185:5;39182:12;39172:2;;39198:9;39172:2;39166:48;:::o;39703:117::-;36724:42;39790:5;36713:54;39765:5;39762:35;39752:2;;39811:1;;39801:12;40358:117;36604:34;40445:5;36593:46;40420:5;40417:35;40407:2;;40466:1;;40456:12"
            },
            "methodIdentifiers": {
                "EIP712_DOMAIN_SEPARATOR()": "dab400f3",
                "FEATURE_NAME()": "6ae4b4f7",
                "FEATURE_VERSION()": "031b905c",
                "_fillOtcOrder((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32),uint128,address,bool,address)": "e4ba8439",
                "batchFillTakerSignedOtcOrders((address,address,uint128,uint128,address,address,address,uint256)[],(uint8,uint8,bytes32,bytes32)[],(uint8,uint8,bytes32,bytes32)[],bool[])": "e52d1764",
                "fillOtcOrder((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32),uint128)": "dac748d4",
                "fillOtcOrderForEth((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32),uint128)": "a578efaf",
                "fillOtcOrderWithEth((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32))": "706394d5",
                "fillTakerSignedOtcOrder((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32),(uint8,uint8,bytes32,bytes32))": "4f948110",
                "fillTakerSignedOtcOrderForEth((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32),(uint8,uint8,bytes32,bytes32))": "724d3953",
                "getOtcOrderHash((address,address,uint128,uint128,address,address,address,uint256))": "53476b89",
                "getOtcOrderInfo((address,address,uint128,uint128,address,address,address,uint256))": "8c807c43",
                "lastOtcTxOriginNonce(address,uint64)": "59ebfb45",
                "migrate()": "8fd3ab80"
            }
        }
    },
    "sourceTreeHashHex": "0xd468328642e7ab2e3ad3399199c470480c4dfe38e75d399f9430ecf160f41bb8",
    "sources": {
        "./OtcOrdersFeature.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"../errors/LibNativeOrdersRichErrors.sol\";\nimport \"../fixins/FixinCommon.sol\";\nimport \"../fixins/FixinEIP712.sol\";\nimport \"../fixins/FixinTokenSpender.sol\";\nimport \"../migrations/LibMigrate.sol\";\nimport \"../storage/LibNativeOrdersStorage.sol\";\nimport \"../storage/LibOtcOrdersStorage.sol\";\nimport \"./interfaces/IFeature.sol\";\nimport \"./interfaces/IOtcOrdersFeature.sol\";\nimport \"./libs/LibNativeOrder.sol\";\nimport \"./libs/LibSignature.sol\";\n\n\n/// @dev Feature for interacting with OTC orders.\ncontract OtcOrdersFeature is\n    IFeature,\n    IOtcOrdersFeature,\n    FixinCommon,\n    FixinEIP712,\n    FixinTokenSpender\n{\n    using LibSafeMathV06 for uint256;\n    using LibSafeMathV06 for uint128;\n\n    /// @dev Name of this feature.\n    string public constant override FEATURE_NAME = \"OtcOrders\";\n    /// @dev Version of this feature.\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 0, 0);\n    /// @dev ETH pseudo-token address.\n    address constant private ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev The WETH token contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(address zeroExAddress, IEtherTokenV06 weth)\n        public\n        FixinEIP712(zeroExAddress)\n    {\n        WETH = weth;\n    }\n\n    /// @dev Initialize and register this feature.\n    ///      Should be delegatecalled by `Migrate.migrate()`.\n    /// @return success `LibMigrate.SUCCESS` on success.\n    function migrate()\n        external\n        returns (bytes4 success)\n    {\n        _registerFeatureFunction(this.fillOtcOrder.selector);\n        _registerFeatureFunction(this.fillOtcOrderForEth.selector);\n        _registerFeatureFunction(this.fillOtcOrderWithEth.selector);\n        _registerFeatureFunction(this.fillTakerSignedOtcOrderForEth.selector);\n        _registerFeatureFunction(this.fillTakerSignedOtcOrder.selector);\n        _registerFeatureFunction(this.batchFillTakerSignedOtcOrders.selector);\n        _registerFeatureFunction(this._fillOtcOrder.selector);\n        _registerFeatureFunction(this.getOtcOrderInfo.selector);\n        _registerFeatureFunction(this.getOtcOrderHash.selector);\n        _registerFeatureFunction(this.lastOtcTxOriginNonce.selector);\n        return LibMigrate.MIGRATE_SUCCESS;\n    }\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrder(\n        LibNativeOrder.OtcOrder memory order,\n        LibSignature.Signature memory makerSignature,\n        uint128 takerTokenFillAmount\n    )\n        public\n        override\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\n        _validateOtcOrder(\n            order, \n            orderInfo,\n            makerSignature,\n            msg.sender\n        );\n        (takerTokenFilledAmount, makerTokenFilledAmount) = _settleOtcOrder(\n            order,\n            takerTokenFillAmount,\n            msg.sender,\n            msg.sender\n        );\n\n        emit OtcOrderFilled(\n            orderInfo.orderHash,\n            order.maker,\n            msg.sender,\n            address(order.makerToken),\n            address(order.takerToken),\n            makerTokenFilledAmount,\n            takerTokenFilledAmount\n        );\n    }\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    ///      Unwraps bought WETH into ETH. before sending it to \n    ///      the taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrderForEth(\n        LibNativeOrder.OtcOrder memory order,\n        LibSignature.Signature memory makerSignature,\n        uint128 takerTokenFillAmount\n    )\n        public\n        override\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        require(\n            order.makerToken == WETH,\n            \"OtcOrdersFeature::fillOtcOrderForEth/MAKER_TOKEN_NOT_WETH\"\n        );\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\n        _validateOtcOrder(\n            order, \n            orderInfo,\n            makerSignature,\n            msg.sender\n        );\n        (takerTokenFilledAmount, makerTokenFilledAmount) = _settleOtcOrder(\n            order,\n            takerTokenFillAmount, \n            msg.sender,\n            address(this)\n        );\n        // Unwrap WETH\n        WETH.withdraw(makerTokenFilledAmount);\n        // Transfer ETH to taker\n        _transferEth(msg.sender, makerTokenFilledAmount);\n\n        emit OtcOrderFilled(\n            orderInfo.orderHash,\n            order.maker,\n            msg.sender,\n            address(order.makerToken),\n            address(order.takerToken),\n            makerTokenFilledAmount,\n            takerTokenFilledAmount\n        );\n    }\n\n    /// @dev Fill an OTC order whose taker token is WETH for up\n    ///      to `msg.value`.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrderWithEth(\n        LibNativeOrder.OtcOrder memory order,\n        LibSignature.Signature memory makerSignature\n    )\n        public\n        override\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        if (order.takerToken == WETH) {\n            // Wrap ETH\n            WETH.deposit{value: msg.value}();\n        } else {\n            require(\n                address(order.takerToken) == ETH_TOKEN_ADDRESS,\n                \"OtcOrdersFeature::fillOtcOrderWithEth/INVALID_TAKER_TOKEN\"\n            );\n        }\n\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\n        _validateOtcOrder(\n            order, \n            orderInfo,\n            makerSignature,\n            msg.sender\n        );\n\n        (takerTokenFilledAmount, makerTokenFilledAmount) =  _settleOtcOrder(\n            order,\n            msg.value.safeDowncastToUint128(),\n            address(this),\n            msg.sender\n        );\n        if (takerTokenFilledAmount < msg.value) {\n            uint256 refundAmount = msg.value - uint256(takerTokenFilledAmount);\n            if (order.takerToken == WETH) {\n                WETH.withdraw(refundAmount);\n            }\n            // Refund unused ETH\n            _transferEth(msg.sender, refundAmount);\n        }\n\n        emit OtcOrderFilled(\n            orderInfo.orderHash,\n            order.maker,\n            msg.sender,\n            address(order.makerToken),\n            address(order.takerToken),\n            makerTokenFilledAmount,\n            takerTokenFilledAmount\n        );\n    }\n\n    /// @dev Fully fill an OTC order. \"Meta-transaction\" variant,\n    ///      requires order to be signed by both maker and taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerSignature The order signature from the taker.\n    function fillTakerSignedOtcOrder(\n        LibNativeOrder.OtcOrder memory order,\n        LibSignature.Signature memory makerSignature,\n        LibSignature.Signature memory takerSignature\n    )\n        public\n        override\n    {\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\n        address taker = LibSignature.getSignerOfHash(orderInfo.orderHash, takerSignature);\n        \n        _validateOtcOrder(\n            order, \n            orderInfo,\n            makerSignature,\n            taker\n        );\n        _settleOtcOrder(\n            order,\n            order.takerAmount,\n            taker,\n            taker\n        );\n\n        emit OtcOrderFilled(\n            orderInfo.orderHash,\n            order.maker,\n            taker,\n            address(order.makerToken),\n            address(order.takerToken),\n            order.makerAmount,\n            order.takerAmount\n        );\n    }\n\n    /// @dev Fully fill an OTC order. \"Meta-transaction\" variant,\n    ///      requires order to be signed by both maker and taker.\n    ///      Unwraps bought WETH into ETH. before sending it to \n    ///      the taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerSignature The order signature from the taker.\n    function fillTakerSignedOtcOrderForEth(\n        LibNativeOrder.OtcOrder memory order,\n        LibSignature.Signature memory makerSignature,\n        LibSignature.Signature memory takerSignature\n    )\n        public\n        override\n    {\n        require(\n            order.makerToken == WETH,\n            \"OtcOrdersFeature::fillTakerSignedOtcOrder/MAKER_TOKEN_NOT_WETH\"\n        );\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\n        address taker = LibSignature.getSignerOfHash(orderInfo.orderHash, takerSignature);\n        \n        _validateOtcOrder(\n            order, \n            orderInfo,\n            makerSignature,\n            taker\n        );\n        _settleOtcOrder(\n            order,\n            order.takerAmount,\n            taker,\n            address(this)\n        );\n        // Unwrap WETH\n        WETH.withdraw(order.makerAmount);\n        // Transfer ETH to taker\n        _transferEth(taker, order.makerAmount);\n\n        emit OtcOrderFilled(\n            orderInfo.orderHash,\n            order.maker,\n            taker,\n            address(order.makerToken),\n            address(order.takerToken),\n            order.makerAmount,\n            order.takerAmount\n        );\n    }\n\n    /// @dev Fills multiple taker-signed OTC orders.\n    /// @param orders Array of OTC orders.\n    /// @param makerSignatures Array of maker signatures for each order.\n    /// @param takerSignatures Array of taker signatures for each order.\n    /// @param unwrapWeth Array of booleans representing whether or not \n    ///        to unwrap bought WETH into ETH for each order. Should be set \n    ///        to false if the maker token is not WETH.\n    /// @return successes Array of booleans representing whether or not\n    ///         each order in `orders` was filled successfully.\n    function batchFillTakerSignedOtcOrders(\n        LibNativeOrder.OtcOrder[] memory orders,\n        LibSignature.Signature[] memory makerSignatures,\n        LibSignature.Signature[] memory takerSignatures,\n        bool[] memory unwrapWeth\n    )\n        public\n        override\n        returns (bool[] memory successes)\n    {\n        require(\n            orders.length == makerSignatures.length && \n            orders.length == takerSignatures.length &&\n            orders.length == unwrapWeth.length,\n            \"OtcOrdersFeature::batchFillTakerSignedOtcOrders/MISMATCHED_ARRAY_LENGTHS\"\n        );\n        successes = new bool[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            bytes4 fnSelector = unwrapWeth[i] \n                ? this.fillTakerSignedOtcOrderForEth.selector\n                : this.fillTakerSignedOtcOrder.selector;\n            // Swallow reverts\n            (successes[i], ) = _implementation.delegatecall(\n                abi.encodeWithSelector(\n                    fnSelector,\n                    orders[i],\n                    makerSignatures[i],\n                    takerSignatures[i]\n                )\n            );\n        }\n    }\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    ///      Internal variant.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @param taker The address to fill the order in the context of.\n    /// @param useSelfBalance Whether to use the Exchange Proxy's balance\n    ///        of input tokens.\n    /// @param recipient The recipient of the bought maker tokens.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillOtcOrder(\n        LibNativeOrder.OtcOrder memory order,\n        LibSignature.Signature memory makerSignature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        bool useSelfBalance,\n        address recipient\n    )\n        public\n        override\n        onlySelf\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\n        _validateOtcOrder(\n            order, \n            orderInfo,\n            makerSignature,\n            taker\n        );\n        (takerTokenFilledAmount, makerTokenFilledAmount) = _settleOtcOrder(\n            order,\n            takerTokenFillAmount,\n            useSelfBalance ? address(this) : taker,\n            recipient\n        );\n\n        emit OtcOrderFilled(\n            orderInfo.orderHash,\n            order.maker,\n            taker,\n            address(order.makerToken),\n            address(order.takerToken),\n            makerTokenFilledAmount,\n            takerTokenFilledAmount\n        );\n    }\n\n    /// @dev Validates an OTC order, reverting if the order cannot be \n    ///      filled by the given taker.\n    /// @param order The OTC order.\n    /// @param orderInfo Info on the order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param taker The order taker.\n    function _validateOtcOrder(\n        LibNativeOrder.OtcOrder memory order,\n        LibNativeOrder.OtcOrderInfo memory orderInfo,\n        LibSignature.Signature memory makerSignature,\n        address taker\n    )\n        private\n        view\n    {\n        // Must be fillable.\n        if (orderInfo.status != LibNativeOrder.OrderStatus.FILLABLE) {\n            LibNativeOrdersRichErrors.OrderNotFillableError(\n                orderInfo.orderHash,\n                uint8(orderInfo.status)\n            ).rrevert();\n        }\n\n        // Must be a valid taker for the order.\n        if (order.taker != address(0) && order.taker != taker) {\n            LibNativeOrdersRichErrors.OrderNotFillableByTakerError(\n                orderInfo.orderHash,\n                taker,\n                order.taker\n            ).rrevert();\n        }\n\n        LibNativeOrdersStorage.Storage storage stor =\n            LibNativeOrdersStorage.getStorage();\n\n        // Must be fillable by the tx.origin.\n        if (\n            order.txOrigin != tx.origin &&\n            !stor.originRegistry[order.txOrigin][tx.origin]\n        ) {\n            LibNativeOrdersRichErrors.OrderNotFillableByOriginError(\n                orderInfo.orderHash,\n                tx.origin,\n                order.txOrigin\n            ).rrevert();\n        }\n\n        // Maker signature must be valid for the order.\n        address makerSigner = LibSignature.getSignerOfHash(orderInfo.orderHash, makerSignature);\n        if (\n            makerSigner != order.maker &&\n            !stor.orderSignerRegistry[order.maker][makerSigner]\n        ) {\n            LibNativeOrdersRichErrors.OrderNotSignedByMakerError(\n                orderInfo.orderHash,\n                makerSigner,\n                order.maker\n            ).rrevert();\n        }\n    }\n\n    /// @dev Settle the trade between an OTC order's maker and taker.\n    /// @param order The OTC order.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @param payer The address holding the taker tokens.\n    /// @param recipient The recipient of the maker tokens.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _settleOtcOrder(\n        LibNativeOrder.OtcOrder memory order,\n        uint128 takerTokenFillAmount,\n        address payer,\n        address recipient\n    )\n        private\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        {\n            // Unpack nonce fields\n            uint64 nonceBucket = uint64(order.expiryAndNonce >> 128);\n            uint128 nonce = uint128(order.expiryAndNonce);\n            // Update tx origin nonce for the order\n            LibOtcOrdersStorage.getStorage().txOriginNonces\n                [order.txOrigin][nonceBucket] = nonce;\n        }\n\n        if (takerTokenFillAmount == order.takerAmount) {\n            takerTokenFilledAmount = order.takerAmount;\n            makerTokenFilledAmount = order.makerAmount;\n        } else {\n            // Clamp the taker token fill amount to the fillable amount.\n            takerTokenFilledAmount = LibSafeMathV06.min128(\n                takerTokenFillAmount,\n                order.takerAmount\n            );\n            // Compute the maker token amount.\n            // This should never overflow because the values are all clamped to\n            // (2^128-1).\n            makerTokenFilledAmount = uint128(LibMathV06.getPartialAmountFloor(\n                uint256(takerTokenFilledAmount),\n                uint256(order.takerAmount),\n                uint256(order.makerAmount)\n            ));\n        }\n\n        if (payer == address(this)) {\n            if (address(order.takerToken) == ETH_TOKEN_ADDRESS) {\n                // Transfer ETH to the maker.\n                payable(order.maker).transfer(takerTokenFilledAmount);\n            } else {\n                // Transfer this -> maker.\n                _transferERC20Tokens(\n                    order.takerToken,\n                    order.maker,\n                    takerTokenFilledAmount\n                );                \n            }\n        } else {\n            // Transfer taker -> maker\n            _transferERC20TokensFrom(\n                order.takerToken,\n                payer,\n                order.maker,\n                takerTokenFilledAmount\n            );\n        }\n        // Transfer maker -> recipient.\n        _transferERC20TokensFrom(\n            order.makerToken,\n            order.maker,\n            recipient,\n            makerTokenFilledAmount\n        );\n    }\n\n    /// @dev Get the order info for an OTC order.\n    /// @param order The OTC order.\n    /// @return orderInfo Info about the order.\n    function getOtcOrderInfo(LibNativeOrder.OtcOrder memory order)\n        public\n        override\n        view\n        returns (LibNativeOrder.OtcOrderInfo memory orderInfo)\n    {\n        // compute order hash.\n        orderInfo.orderHash = getOtcOrderHash(order);\n\n        LibOtcOrdersStorage.Storage storage stor =\n            LibOtcOrdersStorage.getStorage();\n\n        // Unpack expiry and nonce fields\n        uint64 expiry = uint64(order.expiryAndNonce >> 192);\n        uint64 nonceBucket = uint64(order.expiryAndNonce >> 128);\n        uint128 nonce = uint128(order.expiryAndNonce);\n\n        // check tx origin nonce\n        uint128 lastNonce = stor.txOriginNonces\n            [order.txOrigin]\n            [nonceBucket];\n        if (nonce <= lastNonce) {\n            orderInfo.status = LibNativeOrder.OrderStatus.INVALID;\n            return orderInfo;\n        }\n\n        // Check for expiration.\n        if (expiry <= uint64(block.timestamp)) {\n            orderInfo.status = LibNativeOrder.OrderStatus.EXPIRED;\n            return orderInfo;\n        }\n\n        orderInfo.status = LibNativeOrder.OrderStatus.FILLABLE;\n        return orderInfo;\n    }\n\n    /// @dev Get the canonical hash of an OTC order.\n    /// @param order The OTC order.\n    /// @return orderHash The order hash.\n    function getOtcOrderHash(LibNativeOrder.OtcOrder memory order)\n        public\n        override\n        view\n        returns (bytes32 orderHash)\n    {\n        return _getEIP712Hash(\n            LibNativeOrder.getOtcOrderStructHash(order)\n        );\n    }\n\n    /// @dev Get the last nonce used for a particular\n    ///      tx.origin address and nonce bucket.\n    /// @param txOrigin The address.\n    /// @param nonceBucket The nonce bucket index.\n    /// @return lastNonce The last nonce value used.\n    function lastOtcTxOriginNonce(address txOrigin, uint64 nonceBucket)\n        public\n        override\n        view\n        returns (uint128 lastNonce)\n    {\n        LibOtcOrdersStorage.Storage storage stor =\n            LibOtcOrdersStorage.getStorage();\n        return stor.txOriginNonces\n            [txOrigin]\n            [nonceBucket];\n    }\n\n    function _transferEth(address recipient, uint256 amount)\n        private\n    {\n        // Transfer ETH to recipient\n        (bool success, bytes memory revertData) =\n            recipient.call{value: amount}(\"\");\n        // Revert on failure\n        if (!success) {\n            revertData.rrevert();\n        }\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": {
            "id": 19,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 18,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 21,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 23,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 24,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 20,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 22,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n"
        },
        "../errors/LibNativeOrdersRichErrors.sol": {
            "id": 1,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibNativeOrdersRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function ProtocolFeeRefundFailed(\n        address receiver,\n        uint256 refundAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"ProtocolFeeRefundFailed(address,uint256)\")),\n            receiver,\n            refundAmount\n        );\n    }\n\n    function OrderNotFillableByOriginError(\n        bytes32 orderHash,\n        address txOrigin,\n        address orderTxOrigin\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByOriginError(bytes32,address,address)\")),\n            orderHash,\n            txOrigin,\n            orderTxOrigin\n        );\n    }\n\n    function OrderNotFillableError(\n        bytes32 orderHash,\n        uint8 orderStatus\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableError(bytes32,uint8)\")),\n            orderHash,\n            orderStatus\n        );\n    }\n\n    function OrderNotSignedByMakerError(\n        bytes32 orderHash,\n        address signer,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotSignedByMakerError(bytes32,address,address)\")),\n            orderHash,\n            signer,\n            maker\n        );\n    }\n\n    function InvalidSignerError(\n        address maker,\n        address signer\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidSignerError(address,address)\")),\n            maker,\n            signer\n        );\n    }\n\n    function OrderNotFillableBySenderError(\n        bytes32 orderHash,\n        address sender,\n        address orderSender\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableBySenderError(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            orderSender\n        );\n    }\n\n    function OrderNotFillableByTakerError(\n        bytes32 orderHash,\n        address taker,\n        address orderTaker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByTakerError(bytes32,address,address)\")),\n            orderHash,\n            taker,\n            orderTaker\n        );\n    }\n\n    function CancelSaltTooLowError(\n        uint256 minValidSalt,\n        uint256 oldMinValidSalt\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"CancelSaltTooLowError(uint256,uint256)\")),\n            minValidSalt,\n            oldMinValidSalt\n        );\n    }\n\n    function FillOrKillFailedError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"FillOrKillFailedError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n\n    function OnlyOrderMakerAllowed(\n        bytes32 orderHash,\n        address sender,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOrderMakerAllowed(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            maker\n        );\n    }\n\n    function BatchFillIncompleteError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"BatchFillIncompleteError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n}\n"
        },
        "../fixins/FixinCommon.sol": {
            "id": 11,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\nimport \"../features/interfaces/IOwnableFeature.sol\";\nimport \"../features/interfaces/ISimpleFunctionRegistryFeature.sol\";\n\n\n/// @dev Common feature utilities.\nabstract contract FixinCommon {\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The implementation address of this feature.\n    address internal immutable _implementation;\n\n    /// @dev The caller must be this contract.\n    modifier onlySelf() virtual {\n        if (msg.sender != address(this)) {\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\n        }\n        _;\n    }\n\n    /// @dev The caller of this function must be the owner.\n    modifier onlyOwner() virtual {\n        {\n            address owner = IOwnableFeature(address(this)).owner();\n            if (msg.sender != owner) {\n                LibOwnableRichErrors.OnlyOwnerError(\n                    msg.sender,\n                    owner\n                ).rrevert();\n            }\n        }\n        _;\n    }\n\n    constructor() internal {\n        // Remember this feature's original address.\n        _implementation = address(this);\n    }\n\n    /// @dev Registers a function implemented by this feature at `_implementation`.\n    ///      Can and should only be called within a `migrate()`.\n    /// @param selector The selector of the function whose implementation\n    ///        is at `_implementation`.\n    function _registerFeatureFunction(bytes4 selector)\n        internal\n    {\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\n    }\n\n    /// @dev Encode a feature version as a `uint256`.\n    /// @param major The major version number of the feature.\n    /// @param minor The minor version number of the feature.\n    /// @param revision The revision number of the feature.\n    /// @return encodedVersion The encoded version number.\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\n        internal\n        pure\n        returns (uint256 encodedVersion)\n    {\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\n    }\n}\n"
        },
        "../errors/LibCommonRichErrors.sol": {
            "id": 0,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibCommonRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyCallableBySelfError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableBySelfError(address)\")),\n            sender\n        );\n    }\n\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IllegalReentrancyError(bytes4,uint256)\")),\n            selector,\n            reentrancyFlags\n        );\n    }\n}\n"
        },
        "../errors/LibOwnableRichErrors.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOwnerError(address,address)\")),\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n        );\n    }\n\n    function MigrateCallFailedError(address target, bytes memory resultData)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MigrateCallFailedError(address,bytes)\")),\n            target,\n            resultData\n        );\n    }\n}\n"
        },
        "./interfaces/IOwnableFeature.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\n/// @dev Owner management and migration features.\ninterface IOwnableFeature is\n    IOwnableV06\n{\n    /// @dev Emitted when `migrate()` is called.\n    /// @param caller The caller of `migrate()`.\n    /// @param migrator The migration contract.\n    /// @param newOwner The address of the new owner.\n    event Migrated(address caller, address migrator, address newOwner);\n\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\n    ///      The result of the function being called should be the magic bytes\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\n    ///      The owner will be temporarily set to `address(this)` inside the call.\n    ///      Before returning, the owner will be set to `newOwner`.\n    /// @param target The migrator contract address.\n    /// @param newOwner The address of the new owner.\n    /// @param data The call data.\n    function migrate(address target, bytes calldata data, address newOwner) external;\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": {
            "id": 25,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n"
        },
        "./interfaces/ISimpleFunctionRegistryFeature.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic registry management features.\ninterface ISimpleFunctionRegistryFeature {\n\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\n    /// @param selector The function selector.\n    /// @param oldImpl The implementation contract address being replaced.\n    /// @param newImpl The replacement implementation contract address.\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\n\n    /// @dev Roll back to a prior implementation of a function.\n    /// @param selector The function selector.\n    /// @param targetImpl The address of an older implementation of the function.\n    function rollback(bytes4 selector, address targetImpl) external;\n\n    /// @dev Register or replace a function.\n    /// @param selector The function selector.\n    /// @param impl The implementation contract for the function.\n    function extend(bytes4 selector, address impl) external;\n\n    /// @dev Retrieve the length of the rollback history for a function.\n    /// @param selector The function selector.\n    /// @return rollbackLength The number of items in the rollback history for\n    ///         the function.\n    function getRollbackLength(bytes4 selector)\n        external\n        view\n        returns (uint256 rollbackLength);\n\n    /// @dev Retrieve an entry in the rollback history for a function.\n    /// @param selector The function selector.\n    /// @param idx The index in the rollback history.\n    /// @return impl An implementation address for the function at\n    ///         index `idx`.\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\n        external\n        view\n        returns (address impl);\n}\n"
        },
        "../fixins/FixinEIP712.sol": {
            "id": 12,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\n/// @dev EIP712 helpers for features.\nabstract contract FixinEIP712 {\n\n    /// @dev The domain hash separator for the entire exchange proxy.\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\n\n    constructor(address zeroExAddress) internal {\n        // Compute `EIP712_DOMAIN_SEPARATOR`\n        {\n            uint256 chainId;\n            assembly { chainId := chainid() }\n            EIP712_DOMAIN_SEPARATOR = keccak256(\n                abi.encode(\n                    keccak256(\n                        \"EIP712Domain(\"\n                            \"string name,\"\n                            \"string version,\"\n                            \"uint256 chainId,\"\n                            \"address verifyingContract\"\n                        \")\"\n                    ),\n                    keccak256(\"ZeroEx\"),\n                    keccak256(\"1.0.0\"),\n                    chainId,\n                    zeroExAddress\n                )\n            );\n        }\n    }\n\n    function _getEIP712Hash(bytes32 structHash)\n        internal\n        view\n        returns (bytes32 eip712Hash)\n    {\n        return keccak256(abi.encodePacked(\n            hex\"1901\",\n            EIP712_DOMAIN_SEPARATOR,\n            structHash\n        ));\n    }\n}\n"
        },
        "../fixins/FixinTokenSpender.sol": {
            "id": 13,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\n/// @dev Helpers for moving tokens around.\nabstract contract FixinTokenSpender {\n\n    // Mask of the lower 20 bytes of a bytes32.\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\n\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _transferERC20TokensFrom(\n        IERC20TokenV06 token,\n        address owner,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        require(address(token) != address(this), \"FixinTokenSpender/CANNOT_INVOKE_SELF\");\n\n        assembly {\n            let ptr := mload(0x40) // free memory pointer\n\n            // selector for transferFrom(address,address,uint256)\n            mstore(ptr, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(ptr, 0x04), and(owner, ADDRESS_MASK))\n            mstore(add(ptr, 0x24), and(to, ADDRESS_MASK))\n            mstore(add(ptr, 0x44), amount)\n\n            let success := call(\n                gas(),\n                and(token, ADDRESS_MASK),\n                0,\n                ptr,\n                0x64,\n                ptr,\n                32\n            )\n\n            let rdsize := returndatasize()\n\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\n            // but some don't. We accept 0-length return data as success, or at\n            // least 32 bytes that starts with a 32-byte boolean true.\n            success := and(\n                success,                             // call itself succeeded\n                or(\n                    iszero(rdsize),                  // no return data, or\n                    and(\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\n                        eq(mload(ptr), 1)            // starts with uint256(1)\n                    )\n                )\n            )\n\n            if iszero(success) {\n                returndatacopy(ptr, 0, rdsize)\n                revert(ptr, rdsize)\n            }\n        }\n    }\n\n    /// @dev Transfers ERC20 tokens from ourselves to `to`.\n    /// @param token The token to spend.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _transferERC20Tokens(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        require(address(token) != address(this), \"FixinTokenSpender/CANNOT_INVOKE_SELF\");\n\n        assembly {\n            let ptr := mload(0x40) // free memory pointer\n\n            // selector for transfer(address,uint256)\n            mstore(ptr, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(ptr, 0x04), and(to, ADDRESS_MASK))\n            mstore(add(ptr, 0x24), amount)\n\n            let success := call(\n                gas(),\n                and(token, ADDRESS_MASK),\n                0,\n                ptr,\n                0x44,\n                ptr,\n                32\n            )\n\n            let rdsize := returndatasize()\n\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\n            // but some don't. We accept 0-length return data as success, or at\n            // least 32 bytes that starts with a 32-byte boolean true.\n            success := and(\n                success,                             // call itself succeeded\n                or(\n                    iszero(rdsize),                  // no return data, or\n                    and(\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\n                        eq(mload(ptr), 1)            // starts with uint256(1)\n                    )\n                )\n            )\n\n            if iszero(success) {\n                returndatacopy(ptr, 0, rdsize)\n                revert(ptr, rdsize)\n            }\n        }\n    }\n\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\n    ///      pulled from `owner` by this address.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @return amount The amount of tokens that can be pulled.\n    function _getSpendableERC20BalanceOf(\n        IERC20TokenV06 token,\n        address owner\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        return LibSafeMathV06.min256(\n            token.allowance(owner, address(this)),\n            token.balanceOf(owner)\n        );\n    }\n}\n"
        },
        "../migrations/LibMigrate.sol": {
            "id": 14,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\nlibrary LibMigrate {\n\n    /// @dev Magic bytes returned by a migrator to indicate success.\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\n    /// @param target The call target.\n    /// @param data The call data.\n    function delegatecallMigrateFunction(\n        address target,\n        bytes memory data\n    )\n        internal\n    {\n        (bool success, bytes memory resultData) = target.delegatecall(data);\n        if (!success ||\n            resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\n        {\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\n        }\n    }\n}\n"
        },
        "../storage/LibNativeOrdersStorage.sol": {
            "id": 15,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"./LibStorage.sol\";\n\n\n/// @dev Storage helpers for `NativeOrdersFeature`.\nlibrary LibNativeOrdersStorage {\n\n    /// @dev Storage bucket for this feature.\n    struct Storage {\n        // How much taker token has been filled in order.\n        // The lower `uint128` is the taker token fill amount.\n        // The high bit will be `1` if the order was directly cancelled.\n        mapping(bytes32 => uint256) orderHashToTakerTokenFilledAmount;\n        // The minimum valid order salt for a given maker and order pair (maker, taker)\n        // for limit orders.\n        mapping(address => mapping(address => mapping(address => uint256)))\n            limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt;\n        // The minimum valid order salt for a given maker and order pair (maker, taker)\n        // for RFQ orders.\n        mapping(address => mapping(address => mapping(address => uint256)))\n            rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt;\n        // For a given order origin, which tx.origin addresses are allowed to\n        // fill the order.\n        mapping(address => mapping(address => bool)) originRegistry;\n        // For a given maker address, which addresses are allowed to\n        // sign on its behalf.\n        mapping(address => mapping(address => bool)) orderSignerRegistry;\n    }\n\n    /// @dev Get the storage bucket for this contract.\n    function getStorage() internal pure returns (Storage storage stor) {\n        uint256 storageSlot = LibStorage.getStorageSlot(\n            LibStorage.StorageId.NativeOrders\n        );\n        // Dip into assembly to change the slot pointed to by the local\n        // variable `stor`.\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\n        assembly { stor_slot := storageSlot }\n    }\n}\n"
        },
        "../storage/LibStorage.sol": {
            "id": 17,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Common storage helpers\nlibrary LibStorage {\n\n    /// @dev What to bit-shift a storage ID by to get its slot.\n    ///      This gives us a maximum of 2**128 inline fields in each bucket.\n    uint256 private constant STORAGE_SLOT_EXP = 128;\n\n    /// @dev Storage IDs for feature storage buckets.\n    ///      WARNING: APPEND-ONLY.\n    enum StorageId {\n        Proxy,\n        SimpleFunctionRegistry,\n        Ownable,\n        TokenSpender,\n        TransformERC20,\n        MetaTransactions,\n        ReentrancyGuard,\n        NativeOrders,\n        OtcOrders\n    }\n\n    /// @dev Get the storage slot given a storage ID. We assign unique, well-spaced\n    ///     slots to storage bucket variables to ensure they do not overlap.\n    ///     See: https://solidity.readthedocs.io/en/v0.6.6/assembly.html#access-to-external-variables-functions-and-libraries\n    /// @param storageId An entry in `StorageId`\n    /// @return slot The storage slot.\n    function getStorageSlot(StorageId storageId)\n        internal\n        pure\n        returns (uint256 slot)\n    {\n        // This should never overflow with a reasonable `STORAGE_SLOT_EXP`\n        // because Solidity will do a range check on `storageId` during the cast.\n        return (uint256(storageId) + 1) << STORAGE_SLOT_EXP;\n    }\n}\n"
        },
        "../storage/LibOtcOrdersStorage.sol": {
            "id": 16,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"./LibStorage.sol\";\n\n\n/// @dev Storage helpers for `OtcOrdersFeature`.\nlibrary LibOtcOrdersStorage {\n\n    /// @dev Storage bucket for this feature.\n    struct Storage {\n        // tx origin => nonce buckets => min nonce\n        mapping(address => mapping(uint64 => uint128)) txOriginNonces;\n    }\n\n    /// @dev Get the storage bucket for this contract.\n    function getStorage() internal pure returns (Storage storage stor) {\n        uint256 storageSlot = LibStorage.getStorageSlot(\n            LibStorage.StorageId.OtcOrders\n        );\n        // Dip into assembly to change the slot pointed to by the local\n        // variable `stor`.\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\n        assembly { stor_slot := storageSlot }\n    }\n}\n"
        },
        "./interfaces/IFeature.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic interface for a feature contract.\ninterface IFeature {\n\n    // solhint-disable func-name-mixedcase\n\n    /// @dev The name of this feature set.\n    function FEATURE_NAME() external view returns (string memory name);\n\n    /// @dev The version of this feature set.\n    function FEATURE_VERSION() external view returns (uint256 version);\n}\n"
        },
        "./interfaces/IOtcOrdersFeature.sol": {
            "id": 6,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibNativeOrder.sol\";\nimport \"../libs/LibSignature.sol\";\n\n\n/// @dev Feature for interacting with OTC orders.\ninterface IOtcOrdersFeature {\n\n    /// @dev Emitted whenever an `OtcOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    event OtcOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address makerToken,\n        address takerToken,\n        uint128 makerTokenFilledAmount,\n        uint128 takerTokenFilledAmount\n    );\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrder(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    ///      Unwraps bought WETH into ETH before sending it to \n    ///      the taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrderForEth(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an OTC order whose taker token is WETH for up\n    ///      to `msg.value`.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrderWithEth(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fully fill an OTC order. \"Meta-transaction\" variant,\n    ///      requires order to be signed by both maker and taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerSignature The order signature from the taker.\n    function fillTakerSignedOtcOrder(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        LibSignature.Signature calldata takerSignature\n    )\n        external;\n\n    /// @dev Fully fill an OTC order. \"Meta-transaction\" variant,\n    ///      requires order to be signed by both maker and taker.\n    ///      Unwraps bought WETH into ETH before sending it to \n    ///      the taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerSignature The order signature from the taker.\n    function fillTakerSignedOtcOrderForEth(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        LibSignature.Signature calldata takerSignature\n    )\n        external;\n\n    /// @dev Fills multiple taker-signed OTC orders.\n    /// @param orders Array of OTC orders.\n    /// @param makerSignatures Array of maker signatures for each order.\n    /// @param takerSignatures Array of taker signatures for each order.\n    /// @param unwrapWeth Array of booleans representing whether or not \n    ///        to unwrap bought WETH into ETH for each order. Should be set \n    ///        to false if the maker token is not WETH.\n    /// @return successes Array of booleans representing whether or not\n    ///         each order in `orders` was filled successfully.\n    function batchFillTakerSignedOtcOrders(\n        LibNativeOrder.OtcOrder[] calldata orders,\n        LibSignature.Signature[] calldata makerSignatures,\n        LibSignature.Signature[] calldata takerSignatures,\n        bool[] calldata unwrapWeth\n    )\n        external\n        returns (bool[] memory successes);\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    ///      Internal variant.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @param taker The address to fill the order in the context of.\n    /// @param useSelfBalance Whether to use the Exchange Proxy's balance\n    ///        of input tokens.\n    /// @param recipient The recipient of the bought maker tokens.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillOtcOrder(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        bool useSelfBalance,\n        address recipient\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Get the order info for an OTC order.\n    /// @param order The OTC order.\n    /// @return orderInfo Info about the order.\n    function getOtcOrderInfo(LibNativeOrder.OtcOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OtcOrderInfo memory orderInfo);\n\n    /// @dev Get the canonical hash of an OTC order.\n    /// @param order The OTC order.\n    /// @return orderHash The order hash.\n    function getOtcOrderHash(LibNativeOrder.OtcOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the last nonce used for a particular\n    ///      tx.origin address and nonce bucket.\n    /// @param txOrigin The address.\n    /// @param nonceBucket The nonce bucket index.\n    /// @return lastNonce The last nonce value used.\n    function lastOtcTxOriginNonce(address txOrigin, uint64 nonceBucket)\n        external\n        view\n        returns (uint128 lastNonce);\n}\n"
        },
        "./libs/LibNativeOrder.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../errors/LibNativeOrdersRichErrors.sol\";\n\n\n/// @dev A library for common native order operations.\nlibrary LibNativeOrder {\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An OTC limit order.\n    struct OtcOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        uint256 expiryAndNonce; // [uint64 expiry, uint64 nonceBucket, uint128 nonce]\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Info on an OTC order.\n    struct OtcOrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n    }\n\n    uint256 private constant UINT_128_MASK = (1 << 128) - 1;\n    uint256 private constant UINT_64_MASK = (1 << 64) - 1;\n    uint256 private constant ADDRESS_MASK = (1 << 160) - 1;\n\n    // The type hash for limit orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"LimitOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"uint128 takerTokenFeeAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address sender,\",\n    //       \"address feeRecipient,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _LIMIT_ORDER_TYPEHASH =\n        0xce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d49;\n\n    // The type hash for RFQ orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"RfqOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _RFQ_ORDER_TYPEHASH =\n        0xe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da9;\n\n    // The type hash for OTC orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"OtcOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"uint256 expiryAndNonce\"\n    //     \")\"\n    // ))\n    uint256 private constant _OTC_ORDER_TYPEHASH =\n        0x2f754524de756ae72459efbe1ec88c19a745639821de528ac3fb88f9e65e35c8;\n\n    /// @dev Get the struct hash of a limit order.\n    /// @param order The limit order.\n    /// @return structHash The struct hash of the order.\n    function getLimitOrderStructHash(LimitOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.takerTokenFeeAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.sender,\n        //   order.feeRecipient,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _LIMIT_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.takerTokenFeeAmount;\n            mstore(add(mem, 0xA0), and(UINT_128_MASK, mload(add(order, 0x80))))\n            // order.maker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.taker;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.sender;\n            mstore(add(mem, 0x100), and(ADDRESS_MASK, mload(add(order, 0xE0))))\n            // order.feeRecipient;\n            mstore(add(mem, 0x120), and(ADDRESS_MASK, mload(add(order, 0x100))))\n            // order.pool;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            // order.expiry;\n            mstore(add(mem, 0x160), and(UINT_64_MASK, mload(add(order, 0x140))))\n            // order.salt;\n            mstore(add(mem, 0x180), mload(add(order, 0x160)))\n            structHash := keccak256(mem, 0x1A0)\n        }\n    }\n\n    /// @dev Get the struct hash of a RFQ order.\n    /// @param order The RFQ order.\n    /// @return structHash The struct hash of the order.\n    function getRfqOrderStructHash(RfqOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _RFQ_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.pool;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            // order.expiry;\n            mstore(add(mem, 0x120), and(UINT_64_MASK, mload(add(order, 0x100))))\n            // order.salt;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            structHash := keccak256(mem, 0x160)\n        }\n    }\n\n    /// @dev Get the struct hash of an OTC order.\n    /// @param order The OTC order.\n    /// @return structHash The struct hash of the order.\n    function getOtcOrderStructHash(OtcOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.expiryAndNonce,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _OTC_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.expiryAndNonce;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            structHash := keccak256(mem, 0x120)\n        }\n    }\n\n    /// @dev Refund any leftover protocol fees in `msg.value` to `msg.sender`.\n    /// @param ethProtocolFeePaid How much ETH was paid in protocol fees.\n    function refundExcessProtocolFeeToSender(uint256 ethProtocolFeePaid)\n        internal\n    {\n        if (msg.value > ethProtocolFeePaid && msg.sender != address(this)) {\n            uint256 refundAmount = msg.value.safeSub(ethProtocolFeePaid);\n            (bool success,) = msg\n                .sender\n                .call{value: refundAmount}(\"\");\n            if (!success) {\n                LibNativeOrdersRichErrors.ProtocolFeeRefundFailed(\n                    msg.sender,\n                    refundAmount\n                ).rrevert();\n            }\n        }\n    }\n}\n"
        },
        "./libs/LibSignature.sol": {
            "id": 10,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../../errors/LibSignatureRichErrors.sol\";\n\n\n/// @dev A library for validating signatures.\nlibrary LibSignature {\n    using LibRichErrorsV06 for bytes;\n\n    // '\\x19Ethereum Signed Message:\\n32\\x00\\x00\\x00\\x00' in a word.\n    uint256 private constant ETH_SIGN_HASH_PREFIX =\n        0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\n    ///      The valid range is given by fig (282) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\n    ///      The valid range is given by fig (283) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Retrieve the signer of a signature.\n    ///      Throws if the signature can't be validated.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    /// @return recovered The recovered signer address.\n    function getSignerOfHash(\n        bytes32 hash,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address recovered)\n    {\n        // Ensure this is a signature type that can be validated against a hash.\n        _validateHashCompatibleSignature(hash, signature);\n\n        if (signature.signatureType == SignatureType.EIP712) {\n            // Signed using EIP712\n            recovered = ecrecover(\n                hash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\n            // Signed using `eth_sign`\n            // Need to hash `hash` with \"\\x19Ethereum Signed Message:\\n32\" prefix\n            // in packed encoding.\n            bytes32 ethSignHash;\n            assembly {\n                // Use scratch space\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\n                mstore(28, hash) // length of 32 bytes\n                ethSignHash := keccak256(0, 60)\n            }\n            recovered = ecrecover(\n                ethSignHash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        }\n        // `recovered` can be null if the signature values are out of range.\n        if (recovered == address(0)) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n    }\n\n    /// @dev Validates that a signature is compatible with a hash signee.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    function _validateHashCompatibleSignature(\n        bytes32 hash,\n        Signature memory signature\n    )\n        private\n        pure\n    {\n        // Ensure the r and s are within malleability limits.\n        if (uint256(signature.r) >= ECDSA_SIGNATURE_R_LIMIT ||\n            uint256(signature.s) >= ECDSA_SIGNATURE_S_LIMIT)\n        {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n\n        // Always illegal signature.\n        if (signature.signatureType == SignatureType.ILLEGAL) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\n                hash\n            ).rrevert();\n        }\n\n        // Always invalid.\n        if (signature.signatureType == SignatureType.INVALID) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\n                hash\n            ).rrevert();\n        }\n\n        // Solidity should check that the signature type is within enum range for us\n        // when abi-decoding.\n    }\n}\n"
        },
        "../errors/LibSignatureRichErrors.sol": {
            "id": 3,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSignatureRichErrors {\n\n    enum SignatureValidationErrorCodes {\n        ALWAYS_INVALID,\n        INVALID_LENGTH,\n        UNSUPPORTED,\n        ILLEGAL,\n        WRONG_SIGNER,\n        BAD_SIGNATURE_DATA\n    }\n\n    // solhint-disable func-name-mixedcase\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32,address,bytes)\")),\n            code,\n            hash,\n            signerAddress,\n            signature\n        );\n    }\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32)\")),\n            code,\n            hash\n        );\n    }\n}\n"
        }
    },
    "sourceCodes": {
        "./OtcOrdersFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"../errors/LibNativeOrdersRichErrors.sol\";\nimport \"../fixins/FixinCommon.sol\";\nimport \"../fixins/FixinEIP712.sol\";\nimport \"../fixins/FixinTokenSpender.sol\";\nimport \"../migrations/LibMigrate.sol\";\nimport \"../storage/LibNativeOrdersStorage.sol\";\nimport \"../storage/LibOtcOrdersStorage.sol\";\nimport \"./interfaces/IFeature.sol\";\nimport \"./interfaces/IOtcOrdersFeature.sol\";\nimport \"./libs/LibNativeOrder.sol\";\nimport \"./libs/LibSignature.sol\";\n\n\n/// @dev Feature for interacting with OTC orders.\ncontract OtcOrdersFeature is\n    IFeature,\n    IOtcOrdersFeature,\n    FixinCommon,\n    FixinEIP712,\n    FixinTokenSpender\n{\n    using LibSafeMathV06 for uint256;\n    using LibSafeMathV06 for uint128;\n\n    /// @dev Name of this feature.\n    string public constant override FEATURE_NAME = \"OtcOrders\";\n    /// @dev Version of this feature.\n    uint256 public immutable override FEATURE_VERSION = _encodeVersion(1, 0, 0);\n    /// @dev ETH pseudo-token address.\n    address constant private ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev The WETH token contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(address zeroExAddress, IEtherTokenV06 weth)\n        public\n        FixinEIP712(zeroExAddress)\n    {\n        WETH = weth;\n    }\n\n    /// @dev Initialize and register this feature.\n    ///      Should be delegatecalled by `Migrate.migrate()`.\n    /// @return success `LibMigrate.SUCCESS` on success.\n    function migrate()\n        external\n        returns (bytes4 success)\n    {\n        _registerFeatureFunction(this.fillOtcOrder.selector);\n        _registerFeatureFunction(this.fillOtcOrderForEth.selector);\n        _registerFeatureFunction(this.fillOtcOrderWithEth.selector);\n        _registerFeatureFunction(this.fillTakerSignedOtcOrderForEth.selector);\n        _registerFeatureFunction(this.fillTakerSignedOtcOrder.selector);\n        _registerFeatureFunction(this.batchFillTakerSignedOtcOrders.selector);\n        _registerFeatureFunction(this._fillOtcOrder.selector);\n        _registerFeatureFunction(this.getOtcOrderInfo.selector);\n        _registerFeatureFunction(this.getOtcOrderHash.selector);\n        _registerFeatureFunction(this.lastOtcTxOriginNonce.selector);\n        return LibMigrate.MIGRATE_SUCCESS;\n    }\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrder(\n        LibNativeOrder.OtcOrder memory order,\n        LibSignature.Signature memory makerSignature,\n        uint128 takerTokenFillAmount\n    )\n        public\n        override\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\n        _validateOtcOrder(\n            order, \n            orderInfo,\n            makerSignature,\n            msg.sender\n        );\n        (takerTokenFilledAmount, makerTokenFilledAmount) = _settleOtcOrder(\n            order,\n            takerTokenFillAmount,\n            msg.sender,\n            msg.sender\n        );\n\n        emit OtcOrderFilled(\n            orderInfo.orderHash,\n            order.maker,\n            msg.sender,\n            address(order.makerToken),\n            address(order.takerToken),\n            makerTokenFilledAmount,\n            takerTokenFilledAmount\n        );\n    }\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    ///      Unwraps bought WETH into ETH. before sending it to \n    ///      the taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrderForEth(\n        LibNativeOrder.OtcOrder memory order,\n        LibSignature.Signature memory makerSignature,\n        uint128 takerTokenFillAmount\n    )\n        public\n        override\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        require(\n            order.makerToken == WETH,\n            \"OtcOrdersFeature::fillOtcOrderForEth/MAKER_TOKEN_NOT_WETH\"\n        );\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\n        _validateOtcOrder(\n            order, \n            orderInfo,\n            makerSignature,\n            msg.sender\n        );\n        (takerTokenFilledAmount, makerTokenFilledAmount) = _settleOtcOrder(\n            order,\n            takerTokenFillAmount, \n            msg.sender,\n            address(this)\n        );\n        // Unwrap WETH\n        WETH.withdraw(makerTokenFilledAmount);\n        // Transfer ETH to taker\n        _transferEth(msg.sender, makerTokenFilledAmount);\n\n        emit OtcOrderFilled(\n            orderInfo.orderHash,\n            order.maker,\n            msg.sender,\n            address(order.makerToken),\n            address(order.takerToken),\n            makerTokenFilledAmount,\n            takerTokenFilledAmount\n        );\n    }\n\n    /// @dev Fill an OTC order whose taker token is WETH for up\n    ///      to `msg.value`.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrderWithEth(\n        LibNativeOrder.OtcOrder memory order,\n        LibSignature.Signature memory makerSignature\n    )\n        public\n        override\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        if (order.takerToken == WETH) {\n            // Wrap ETH\n            WETH.deposit{value: msg.value}();\n        } else {\n            require(\n                address(order.takerToken) == ETH_TOKEN_ADDRESS,\n                \"OtcOrdersFeature::fillOtcOrderWithEth/INVALID_TAKER_TOKEN\"\n            );\n        }\n\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\n        _validateOtcOrder(\n            order, \n            orderInfo,\n            makerSignature,\n            msg.sender\n        );\n\n        (takerTokenFilledAmount, makerTokenFilledAmount) =  _settleOtcOrder(\n            order,\n            msg.value.safeDowncastToUint128(),\n            address(this),\n            msg.sender\n        );\n        if (takerTokenFilledAmount < msg.value) {\n            uint256 refundAmount = msg.value - uint256(takerTokenFilledAmount);\n            if (order.takerToken == WETH) {\n                WETH.withdraw(refundAmount);\n            }\n            // Refund unused ETH\n            _transferEth(msg.sender, refundAmount);\n        }\n\n        emit OtcOrderFilled(\n            orderInfo.orderHash,\n            order.maker,\n            msg.sender,\n            address(order.makerToken),\n            address(order.takerToken),\n            makerTokenFilledAmount,\n            takerTokenFilledAmount\n        );\n    }\n\n    /// @dev Fully fill an OTC order. \"Meta-transaction\" variant,\n    ///      requires order to be signed by both maker and taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerSignature The order signature from the taker.\n    function fillTakerSignedOtcOrder(\n        LibNativeOrder.OtcOrder memory order,\n        LibSignature.Signature memory makerSignature,\n        LibSignature.Signature memory takerSignature\n    )\n        public\n        override\n    {\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\n        address taker = LibSignature.getSignerOfHash(orderInfo.orderHash, takerSignature);\n        \n        _validateOtcOrder(\n            order, \n            orderInfo,\n            makerSignature,\n            taker\n        );\n        _settleOtcOrder(\n            order,\n            order.takerAmount,\n            taker,\n            taker\n        );\n\n        emit OtcOrderFilled(\n            orderInfo.orderHash,\n            order.maker,\n            taker,\n            address(order.makerToken),\n            address(order.takerToken),\n            order.makerAmount,\n            order.takerAmount\n        );\n    }\n\n    /// @dev Fully fill an OTC order. \"Meta-transaction\" variant,\n    ///      requires order to be signed by both maker and taker.\n    ///      Unwraps bought WETH into ETH. before sending it to \n    ///      the taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerSignature The order signature from the taker.\n    function fillTakerSignedOtcOrderForEth(\n        LibNativeOrder.OtcOrder memory order,\n        LibSignature.Signature memory makerSignature,\n        LibSignature.Signature memory takerSignature\n    )\n        public\n        override\n    {\n        require(\n            order.makerToken == WETH,\n            \"OtcOrdersFeature::fillTakerSignedOtcOrder/MAKER_TOKEN_NOT_WETH\"\n        );\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\n        address taker = LibSignature.getSignerOfHash(orderInfo.orderHash, takerSignature);\n        \n        _validateOtcOrder(\n            order, \n            orderInfo,\n            makerSignature,\n            taker\n        );\n        _settleOtcOrder(\n            order,\n            order.takerAmount,\n            taker,\n            address(this)\n        );\n        // Unwrap WETH\n        WETH.withdraw(order.makerAmount);\n        // Transfer ETH to taker\n        _transferEth(taker, order.makerAmount);\n\n        emit OtcOrderFilled(\n            orderInfo.orderHash,\n            order.maker,\n            taker,\n            address(order.makerToken),\n            address(order.takerToken),\n            order.makerAmount,\n            order.takerAmount\n        );\n    }\n\n    /// @dev Fills multiple taker-signed OTC orders.\n    /// @param orders Array of OTC orders.\n    /// @param makerSignatures Array of maker signatures for each order.\n    /// @param takerSignatures Array of taker signatures for each order.\n    /// @param unwrapWeth Array of booleans representing whether or not \n    ///        to unwrap bought WETH into ETH for each order. Should be set \n    ///        to false if the maker token is not WETH.\n    /// @return successes Array of booleans representing whether or not\n    ///         each order in `orders` was filled successfully.\n    function batchFillTakerSignedOtcOrders(\n        LibNativeOrder.OtcOrder[] memory orders,\n        LibSignature.Signature[] memory makerSignatures,\n        LibSignature.Signature[] memory takerSignatures,\n        bool[] memory unwrapWeth\n    )\n        public\n        override\n        returns (bool[] memory successes)\n    {\n        require(\n            orders.length == makerSignatures.length && \n            orders.length == takerSignatures.length &&\n            orders.length == unwrapWeth.length,\n            \"OtcOrdersFeature::batchFillTakerSignedOtcOrders/MISMATCHED_ARRAY_LENGTHS\"\n        );\n        successes = new bool[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            bytes4 fnSelector = unwrapWeth[i] \n                ? this.fillTakerSignedOtcOrderForEth.selector\n                : this.fillTakerSignedOtcOrder.selector;\n            // Swallow reverts\n            (successes[i], ) = _implementation.delegatecall(\n                abi.encodeWithSelector(\n                    fnSelector,\n                    orders[i],\n                    makerSignatures[i],\n                    takerSignatures[i]\n                )\n            );\n        }\n    }\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    ///      Internal variant.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @param taker The address to fill the order in the context of.\n    /// @param useSelfBalance Whether to use the Exchange Proxy's balance\n    ///        of input tokens.\n    /// @param recipient The recipient of the bought maker tokens.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillOtcOrder(\n        LibNativeOrder.OtcOrder memory order,\n        LibSignature.Signature memory makerSignature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        bool useSelfBalance,\n        address recipient\n    )\n        public\n        override\n        onlySelf\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        LibNativeOrder.OtcOrderInfo memory orderInfo = getOtcOrderInfo(order);\n        _validateOtcOrder(\n            order, \n            orderInfo,\n            makerSignature,\n            taker\n        );\n        (takerTokenFilledAmount, makerTokenFilledAmount) = _settleOtcOrder(\n            order,\n            takerTokenFillAmount,\n            useSelfBalance ? address(this) : taker,\n            recipient\n        );\n\n        emit OtcOrderFilled(\n            orderInfo.orderHash,\n            order.maker,\n            taker,\n            address(order.makerToken),\n            address(order.takerToken),\n            makerTokenFilledAmount,\n            takerTokenFilledAmount\n        );\n    }\n\n    /// @dev Validates an OTC order, reverting if the order cannot be \n    ///      filled by the given taker.\n    /// @param order The OTC order.\n    /// @param orderInfo Info on the order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param taker The order taker.\n    function _validateOtcOrder(\n        LibNativeOrder.OtcOrder memory order,\n        LibNativeOrder.OtcOrderInfo memory orderInfo,\n        LibSignature.Signature memory makerSignature,\n        address taker\n    )\n        private\n        view\n    {\n        // Must be fillable.\n        if (orderInfo.status != LibNativeOrder.OrderStatus.FILLABLE) {\n            LibNativeOrdersRichErrors.OrderNotFillableError(\n                orderInfo.orderHash,\n                uint8(orderInfo.status)\n            ).rrevert();\n        }\n\n        // Must be a valid taker for the order.\n        if (order.taker != address(0) && order.taker != taker) {\n            LibNativeOrdersRichErrors.OrderNotFillableByTakerError(\n                orderInfo.orderHash,\n                taker,\n                order.taker\n            ).rrevert();\n        }\n\n        LibNativeOrdersStorage.Storage storage stor =\n            LibNativeOrdersStorage.getStorage();\n\n        // Must be fillable by the tx.origin.\n        if (\n            order.txOrigin != tx.origin &&\n            !stor.originRegistry[order.txOrigin][tx.origin]\n        ) {\n            LibNativeOrdersRichErrors.OrderNotFillableByOriginError(\n                orderInfo.orderHash,\n                tx.origin,\n                order.txOrigin\n            ).rrevert();\n        }\n\n        // Maker signature must be valid for the order.\n        address makerSigner = LibSignature.getSignerOfHash(orderInfo.orderHash, makerSignature);\n        if (\n            makerSigner != order.maker &&\n            !stor.orderSignerRegistry[order.maker][makerSigner]\n        ) {\n            LibNativeOrdersRichErrors.OrderNotSignedByMakerError(\n                orderInfo.orderHash,\n                makerSigner,\n                order.maker\n            ).rrevert();\n        }\n    }\n\n    /// @dev Settle the trade between an OTC order's maker and taker.\n    /// @param order The OTC order.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @param payer The address holding the taker tokens.\n    /// @param recipient The recipient of the maker tokens.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _settleOtcOrder(\n        LibNativeOrder.OtcOrder memory order,\n        uint128 takerTokenFillAmount,\n        address payer,\n        address recipient\n    )\n        private\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount)\n    {\n        {\n            // Unpack nonce fields\n            uint64 nonceBucket = uint64(order.expiryAndNonce >> 128);\n            uint128 nonce = uint128(order.expiryAndNonce);\n            // Update tx origin nonce for the order\n            LibOtcOrdersStorage.getStorage().txOriginNonces\n                [order.txOrigin][nonceBucket] = nonce;\n        }\n\n        if (takerTokenFillAmount == order.takerAmount) {\n            takerTokenFilledAmount = order.takerAmount;\n            makerTokenFilledAmount = order.makerAmount;\n        } else {\n            // Clamp the taker token fill amount to the fillable amount.\n            takerTokenFilledAmount = LibSafeMathV06.min128(\n                takerTokenFillAmount,\n                order.takerAmount\n            );\n            // Compute the maker token amount.\n            // This should never overflow because the values are all clamped to\n            // (2^128-1).\n            makerTokenFilledAmount = uint128(LibMathV06.getPartialAmountFloor(\n                uint256(takerTokenFilledAmount),\n                uint256(order.takerAmount),\n                uint256(order.makerAmount)\n            ));\n        }\n\n        if (payer == address(this)) {\n            if (address(order.takerToken) == ETH_TOKEN_ADDRESS) {\n                // Transfer ETH to the maker.\n                payable(order.maker).transfer(takerTokenFilledAmount);\n            } else {\n                // Transfer this -> maker.\n                _transferERC20Tokens(\n                    order.takerToken,\n                    order.maker,\n                    takerTokenFilledAmount\n                );                \n            }\n        } else {\n            // Transfer taker -> maker\n            _transferERC20TokensFrom(\n                order.takerToken,\n                payer,\n                order.maker,\n                takerTokenFilledAmount\n            );\n        }\n        // Transfer maker -> recipient.\n        _transferERC20TokensFrom(\n            order.makerToken,\n            order.maker,\n            recipient,\n            makerTokenFilledAmount\n        );\n    }\n\n    /// @dev Get the order info for an OTC order.\n    /// @param order The OTC order.\n    /// @return orderInfo Info about the order.\n    function getOtcOrderInfo(LibNativeOrder.OtcOrder memory order)\n        public\n        override\n        view\n        returns (LibNativeOrder.OtcOrderInfo memory orderInfo)\n    {\n        // compute order hash.\n        orderInfo.orderHash = getOtcOrderHash(order);\n\n        LibOtcOrdersStorage.Storage storage stor =\n            LibOtcOrdersStorage.getStorage();\n\n        // Unpack expiry and nonce fields\n        uint64 expiry = uint64(order.expiryAndNonce >> 192);\n        uint64 nonceBucket = uint64(order.expiryAndNonce >> 128);\n        uint128 nonce = uint128(order.expiryAndNonce);\n\n        // check tx origin nonce\n        uint128 lastNonce = stor.txOriginNonces\n            [order.txOrigin]\n            [nonceBucket];\n        if (nonce <= lastNonce) {\n            orderInfo.status = LibNativeOrder.OrderStatus.INVALID;\n            return orderInfo;\n        }\n\n        // Check for expiration.\n        if (expiry <= uint64(block.timestamp)) {\n            orderInfo.status = LibNativeOrder.OrderStatus.EXPIRED;\n            return orderInfo;\n        }\n\n        orderInfo.status = LibNativeOrder.OrderStatus.FILLABLE;\n        return orderInfo;\n    }\n\n    /// @dev Get the canonical hash of an OTC order.\n    /// @param order The OTC order.\n    /// @return orderHash The order hash.\n    function getOtcOrderHash(LibNativeOrder.OtcOrder memory order)\n        public\n        override\n        view\n        returns (bytes32 orderHash)\n    {\n        return _getEIP712Hash(\n            LibNativeOrder.getOtcOrderStructHash(order)\n        );\n    }\n\n    /// @dev Get the last nonce used for a particular\n    ///      tx.origin address and nonce bucket.\n    /// @param txOrigin The address.\n    /// @param nonceBucket The nonce bucket index.\n    /// @return lastNonce The last nonce value used.\n    function lastOtcTxOriginNonce(address txOrigin, uint64 nonceBucket)\n        public\n        override\n        view\n        returns (uint128 lastNonce)\n    {\n        LibOtcOrdersStorage.Storage storage stor =\n            LibOtcOrdersStorage.getStorage();\n        return stor.txOriginNonces\n            [txOrigin]\n            [nonceBucket];\n    }\n\n    function _transferEth(address recipient, uint256 amount)\n        private\n    {\n        // Transfer ETH to recipient\n        (bool success, bytes memory revertData) =\n            recipient.call{value: amount}(\"\");\n        // Revert on failure\n        if (!success) {\n            revertData.rrevert();\n        }\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "../errors/LibNativeOrdersRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibNativeOrdersRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function ProtocolFeeRefundFailed(\n        address receiver,\n        uint256 refundAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"ProtocolFeeRefundFailed(address,uint256)\")),\n            receiver,\n            refundAmount\n        );\n    }\n\n    function OrderNotFillableByOriginError(\n        bytes32 orderHash,\n        address txOrigin,\n        address orderTxOrigin\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByOriginError(bytes32,address,address)\")),\n            orderHash,\n            txOrigin,\n            orderTxOrigin\n        );\n    }\n\n    function OrderNotFillableError(\n        bytes32 orderHash,\n        uint8 orderStatus\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableError(bytes32,uint8)\")),\n            orderHash,\n            orderStatus\n        );\n    }\n\n    function OrderNotSignedByMakerError(\n        bytes32 orderHash,\n        address signer,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotSignedByMakerError(bytes32,address,address)\")),\n            orderHash,\n            signer,\n            maker\n        );\n    }\n\n    function InvalidSignerError(\n        address maker,\n        address signer\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"InvalidSignerError(address,address)\")),\n            maker,\n            signer\n        );\n    }\n\n    function OrderNotFillableBySenderError(\n        bytes32 orderHash,\n        address sender,\n        address orderSender\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableBySenderError(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            orderSender\n        );\n    }\n\n    function OrderNotFillableByTakerError(\n        bytes32 orderHash,\n        address taker,\n        address orderTaker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OrderNotFillableByTakerError(bytes32,address,address)\")),\n            orderHash,\n            taker,\n            orderTaker\n        );\n    }\n\n    function CancelSaltTooLowError(\n        uint256 minValidSalt,\n        uint256 oldMinValidSalt\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"CancelSaltTooLowError(uint256,uint256)\")),\n            minValidSalt,\n            oldMinValidSalt\n        );\n    }\n\n    function FillOrKillFailedError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"FillOrKillFailedError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n\n    function OnlyOrderMakerAllowed(\n        bytes32 orderHash,\n        address sender,\n        address maker\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOrderMakerAllowed(bytes32,address,address)\")),\n            orderHash,\n            sender,\n            maker\n        );\n    }\n\n    function BatchFillIncompleteError(\n        bytes32 orderHash,\n        uint256 takerTokenFilledAmount,\n        uint256 takerTokenFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"BatchFillIncompleteError(bytes32,uint256,uint256)\")),\n            orderHash,\n            takerTokenFilledAmount,\n            takerTokenFillAmount\n        );\n    }\n}\n",
        "../fixins/FixinCommon.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\nimport \"../features/interfaces/IOwnableFeature.sol\";\nimport \"../features/interfaces/ISimpleFunctionRegistryFeature.sol\";\n\n\n/// @dev Common feature utilities.\nabstract contract FixinCommon {\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev The implementation address of this feature.\n    address internal immutable _implementation;\n\n    /// @dev The caller must be this contract.\n    modifier onlySelf() virtual {\n        if (msg.sender != address(this)) {\n            LibCommonRichErrors.OnlyCallableBySelfError(msg.sender).rrevert();\n        }\n        _;\n    }\n\n    /// @dev The caller of this function must be the owner.\n    modifier onlyOwner() virtual {\n        {\n            address owner = IOwnableFeature(address(this)).owner();\n            if (msg.sender != owner) {\n                LibOwnableRichErrors.OnlyOwnerError(\n                    msg.sender,\n                    owner\n                ).rrevert();\n            }\n        }\n        _;\n    }\n\n    constructor() internal {\n        // Remember this feature's original address.\n        _implementation = address(this);\n    }\n\n    /// @dev Registers a function implemented by this feature at `_implementation`.\n    ///      Can and should only be called within a `migrate()`.\n    /// @param selector The selector of the function whose implementation\n    ///        is at `_implementation`.\n    function _registerFeatureFunction(bytes4 selector)\n        internal\n    {\n        ISimpleFunctionRegistryFeature(address(this)).extend(selector, _implementation);\n    }\n\n    /// @dev Encode a feature version as a `uint256`.\n    /// @param major The major version number of the feature.\n    /// @param minor The minor version number of the feature.\n    /// @param revision The revision number of the feature.\n    /// @return encodedVersion The encoded version number.\n    function _encodeVersion(uint32 major, uint32 minor, uint32 revision)\n        internal\n        pure\n        returns (uint256 encodedVersion)\n    {\n        return (uint256(major) << 64) | (uint256(minor) << 32) | uint256(revision);\n    }\n}\n",
        "../errors/LibCommonRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibCommonRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyCallableBySelfError(address sender)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyCallableBySelfError(address)\")),\n            sender\n        );\n    }\n\n    function IllegalReentrancyError(bytes4 selector, uint256 reentrancyFlags)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"IllegalReentrancyError(bytes4,uint256)\")),\n            selector,\n            reentrancyFlags\n        );\n    }\n}\n",
        "../errors/LibOwnableRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibOwnableRichErrors {\n\n    // solhint-disable func-name-mixedcase\n\n    function OnlyOwnerError(\n        address sender,\n        address owner\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"OnlyOwnerError(address,address)\")),\n            sender,\n            owner\n        );\n    }\n\n    function TransferOwnerToZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"TransferOwnerToZeroError()\"))\n        );\n    }\n\n    function MigrateCallFailedError(address target, bytes memory resultData)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"MigrateCallFailedError(address,bytes)\")),\n            target,\n            resultData\n        );\n    }\n}\n",
        "./interfaces/IOwnableFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol\";\n\n\n// solhint-disable no-empty-blocks\n/// @dev Owner management and migration features.\ninterface IOwnableFeature is\n    IOwnableV06\n{\n    /// @dev Emitted when `migrate()` is called.\n    /// @param caller The caller of `migrate()`.\n    /// @param migrator The migration contract.\n    /// @param newOwner The address of the new owner.\n    event Migrated(address caller, address migrator, address newOwner);\n\n    /// @dev Execute a migration function in the context of the ZeroEx contract.\n    ///      The result of the function being called should be the magic bytes\n    ///      0x2c64c5ef (`keccack('MIGRATE_SUCCESS')`). Only callable by the owner.\n    ///      The owner will be temporarily set to `address(this)` inside the call.\n    ///      Before returning, the owner will be set to `newOwner`.\n    /// @param target The migrator contract address.\n    /// @param newOwner The address of the new owner.\n    /// @param data The call data.\n    function migrate(address target, bytes calldata data, address newOwner) external;\n}\n",
        "@0x/contracts-utils/contracts/src/v06/interfaces/IOwnableV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IOwnableV06 {\n\n    /// @dev Emitted by Ownable when ownership is transferred.\n    /// @param previousOwner The previous owner of the contract.\n    /// @param newOwner The new owner of the contract.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @dev Transfers ownership of the contract to a new address.\n    /// @param newOwner The address that will become the owner.\n    function transferOwnership(address newOwner) external;\n\n    /// @dev The owner of this contract.\n    /// @return ownerAddress The owner address.\n    function owner() external view returns (address ownerAddress);\n}\n",
        "./interfaces/ISimpleFunctionRegistryFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic registry management features.\ninterface ISimpleFunctionRegistryFeature {\n\n    /// @dev A function implementation was updated via `extend()` or `rollback()`.\n    /// @param selector The function selector.\n    /// @param oldImpl The implementation contract address being replaced.\n    /// @param newImpl The replacement implementation contract address.\n    event ProxyFunctionUpdated(bytes4 indexed selector, address oldImpl, address newImpl);\n\n    /// @dev Roll back to a prior implementation of a function.\n    /// @param selector The function selector.\n    /// @param targetImpl The address of an older implementation of the function.\n    function rollback(bytes4 selector, address targetImpl) external;\n\n    /// @dev Register or replace a function.\n    /// @param selector The function selector.\n    /// @param impl The implementation contract for the function.\n    function extend(bytes4 selector, address impl) external;\n\n    /// @dev Retrieve the length of the rollback history for a function.\n    /// @param selector The function selector.\n    /// @return rollbackLength The number of items in the rollback history for\n    ///         the function.\n    function getRollbackLength(bytes4 selector)\n        external\n        view\n        returns (uint256 rollbackLength);\n\n    /// @dev Retrieve an entry in the rollback history for a function.\n    /// @param selector The function selector.\n    /// @param idx The index in the rollback history.\n    /// @return impl An implementation address for the function at\n    ///         index `idx`.\n    function getRollbackEntryAtIndex(bytes4 selector, uint256 idx)\n        external\n        view\n        returns (address impl);\n}\n",
        "../fixins/FixinEIP712.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibCommonRichErrors.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\n/// @dev EIP712 helpers for features.\nabstract contract FixinEIP712 {\n\n    /// @dev The domain hash separator for the entire exchange proxy.\n    bytes32 public immutable EIP712_DOMAIN_SEPARATOR;\n\n    constructor(address zeroExAddress) internal {\n        // Compute `EIP712_DOMAIN_SEPARATOR`\n        {\n            uint256 chainId;\n            assembly { chainId := chainid() }\n            EIP712_DOMAIN_SEPARATOR = keccak256(\n                abi.encode(\n                    keccak256(\n                        \"EIP712Domain(\"\n                            \"string name,\"\n                            \"string version,\"\n                            \"uint256 chainId,\"\n                            \"address verifyingContract\"\n                        \")\"\n                    ),\n                    keccak256(\"ZeroEx\"),\n                    keccak256(\"1.0.0\"),\n                    chainId,\n                    zeroExAddress\n                )\n            );\n        }\n    }\n\n    function _getEIP712Hash(bytes32 structHash)\n        internal\n        view\n        returns (bytes32 eip712Hash)\n    {\n        return keccak256(abi.encodePacked(\n            hex\"1901\",\n            EIP712_DOMAIN_SEPARATOR,\n            structHash\n        ));\n    }\n}\n",
        "../fixins/FixinTokenSpender.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\n/// @dev Helpers for moving tokens around.\nabstract contract FixinTokenSpender {\n\n    // Mask of the lower 20 bytes of a bytes32.\n    uint256 constant private ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\n\n    /// @dev Transfers ERC20 tokens from `owner` to `to`.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _transferERC20TokensFrom(\n        IERC20TokenV06 token,\n        address owner,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        require(address(token) != address(this), \"FixinTokenSpender/CANNOT_INVOKE_SELF\");\n\n        assembly {\n            let ptr := mload(0x40) // free memory pointer\n\n            // selector for transferFrom(address,address,uint256)\n            mstore(ptr, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(ptr, 0x04), and(owner, ADDRESS_MASK))\n            mstore(add(ptr, 0x24), and(to, ADDRESS_MASK))\n            mstore(add(ptr, 0x44), amount)\n\n            let success := call(\n                gas(),\n                and(token, ADDRESS_MASK),\n                0,\n                ptr,\n                0x64,\n                ptr,\n                32\n            )\n\n            let rdsize := returndatasize()\n\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\n            // but some don't. We accept 0-length return data as success, or at\n            // least 32 bytes that starts with a 32-byte boolean true.\n            success := and(\n                success,                             // call itself succeeded\n                or(\n                    iszero(rdsize),                  // no return data, or\n                    and(\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\n                        eq(mload(ptr), 1)            // starts with uint256(1)\n                    )\n                )\n            )\n\n            if iszero(success) {\n                returndatacopy(ptr, 0, rdsize)\n                revert(ptr, rdsize)\n            }\n        }\n    }\n\n    /// @dev Transfers ERC20 tokens from ourselves to `to`.\n    /// @param token The token to spend.\n    /// @param to The recipient of the tokens.\n    /// @param amount The amount of `token` to transfer.\n    function _transferERC20Tokens(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        require(address(token) != address(this), \"FixinTokenSpender/CANNOT_INVOKE_SELF\");\n\n        assembly {\n            let ptr := mload(0x40) // free memory pointer\n\n            // selector for transfer(address,uint256)\n            mstore(ptr, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(ptr, 0x04), and(to, ADDRESS_MASK))\n            mstore(add(ptr, 0x24), amount)\n\n            let success := call(\n                gas(),\n                and(token, ADDRESS_MASK),\n                0,\n                ptr,\n                0x44,\n                ptr,\n                32\n            )\n\n            let rdsize := returndatasize()\n\n            // Check for ERC20 success. ERC20 tokens should return a boolean,\n            // but some don't. We accept 0-length return data as success, or at\n            // least 32 bytes that starts with a 32-byte boolean true.\n            success := and(\n                success,                             // call itself succeeded\n                or(\n                    iszero(rdsize),                  // no return data, or\n                    and(\n                        iszero(lt(rdsize, 32)),      // at least 32 bytes\n                        eq(mload(ptr), 1)            // starts with uint256(1)\n                    )\n                )\n            )\n\n            if iszero(success) {\n                returndatacopy(ptr, 0, rdsize)\n                revert(ptr, rdsize)\n            }\n        }\n    }\n\n    /// @dev Gets the maximum amount of an ERC20 token `token` that can be\n    ///      pulled from `owner` by this address.\n    /// @param token The token to spend.\n    /// @param owner The owner of the tokens.\n    /// @return amount The amount of tokens that can be pulled.\n    function _getSpendableERC20BalanceOf(\n        IERC20TokenV06 token,\n        address owner\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        return LibSafeMathV06.min256(\n            token.allowance(owner, address(this)),\n            token.balanceOf(owner)\n        );\n    }\n}\n",
        "../migrations/LibMigrate.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../errors/LibOwnableRichErrors.sol\";\n\n\nlibrary LibMigrate {\n\n    /// @dev Magic bytes returned by a migrator to indicate success.\n    ///      This is `keccack('MIGRATE_SUCCESS')`.\n    bytes4 internal constant MIGRATE_SUCCESS = 0x2c64c5ef;\n\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Perform a delegatecall and ensure it returns the magic bytes.\n    /// @param target The call target.\n    /// @param data The call data.\n    function delegatecallMigrateFunction(\n        address target,\n        bytes memory data\n    )\n        internal\n    {\n        (bool success, bytes memory resultData) = target.delegatecall(data);\n        if (!success ||\n            resultData.length != 32 ||\n            abi.decode(resultData, (bytes4)) != MIGRATE_SUCCESS)\n        {\n            LibOwnableRichErrors.MigrateCallFailedError(target, resultData).rrevert();\n        }\n    }\n}\n",
        "../storage/LibNativeOrdersStorage.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"./LibStorage.sol\";\n\n\n/// @dev Storage helpers for `NativeOrdersFeature`.\nlibrary LibNativeOrdersStorage {\n\n    /// @dev Storage bucket for this feature.\n    struct Storage {\n        // How much taker token has been filled in order.\n        // The lower `uint128` is the taker token fill amount.\n        // The high bit will be `1` if the order was directly cancelled.\n        mapping(bytes32 => uint256) orderHashToTakerTokenFilledAmount;\n        // The minimum valid order salt for a given maker and order pair (maker, taker)\n        // for limit orders.\n        mapping(address => mapping(address => mapping(address => uint256)))\n            limitOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt;\n        // The minimum valid order salt for a given maker and order pair (maker, taker)\n        // for RFQ orders.\n        mapping(address => mapping(address => mapping(address => uint256)))\n            rfqOrdersMakerToMakerTokenToTakerTokenToMinValidOrderSalt;\n        // For a given order origin, which tx.origin addresses are allowed to\n        // fill the order.\n        mapping(address => mapping(address => bool)) originRegistry;\n        // For a given maker address, which addresses are allowed to\n        // sign on its behalf.\n        mapping(address => mapping(address => bool)) orderSignerRegistry;\n    }\n\n    /// @dev Get the storage bucket for this contract.\n    function getStorage() internal pure returns (Storage storage stor) {\n        uint256 storageSlot = LibStorage.getStorageSlot(\n            LibStorage.StorageId.NativeOrders\n        );\n        // Dip into assembly to change the slot pointed to by the local\n        // variable `stor`.\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\n        assembly { stor_slot := storageSlot }\n    }\n}\n",
        "../storage/LibStorage.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Common storage helpers\nlibrary LibStorage {\n\n    /// @dev What to bit-shift a storage ID by to get its slot.\n    ///      This gives us a maximum of 2**128 inline fields in each bucket.\n    uint256 private constant STORAGE_SLOT_EXP = 128;\n\n    /// @dev Storage IDs for feature storage buckets.\n    ///      WARNING: APPEND-ONLY.\n    enum StorageId {\n        Proxy,\n        SimpleFunctionRegistry,\n        Ownable,\n        TokenSpender,\n        TransformERC20,\n        MetaTransactions,\n        ReentrancyGuard,\n        NativeOrders,\n        OtcOrders\n    }\n\n    /// @dev Get the storage slot given a storage ID. We assign unique, well-spaced\n    ///     slots to storage bucket variables to ensure they do not overlap.\n    ///     See: https://solidity.readthedocs.io/en/v0.6.6/assembly.html#access-to-external-variables-functions-and-libraries\n    /// @param storageId An entry in `StorageId`\n    /// @return slot The storage slot.\n    function getStorageSlot(StorageId storageId)\n        internal\n        pure\n        returns (uint256 slot)\n    {\n        // This should never overflow with a reasonable `STORAGE_SLOT_EXP`\n        // because Solidity will do a range check on `storageId` during the cast.\n        return (uint256(storageId) + 1) << STORAGE_SLOT_EXP;\n    }\n}\n",
        "../storage/LibOtcOrdersStorage.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"./LibStorage.sol\";\n\n\n/// @dev Storage helpers for `OtcOrdersFeature`.\nlibrary LibOtcOrdersStorage {\n\n    /// @dev Storage bucket for this feature.\n    struct Storage {\n        // tx origin => nonce buckets => min nonce\n        mapping(address => mapping(uint64 => uint128)) txOriginNonces;\n    }\n\n    /// @dev Get the storage bucket for this contract.\n    function getStorage() internal pure returns (Storage storage stor) {\n        uint256 storageSlot = LibStorage.getStorageSlot(\n            LibStorage.StorageId.OtcOrders\n        );\n        // Dip into assembly to change the slot pointed to by the local\n        // variable `stor`.\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\n        assembly { stor_slot := storageSlot }\n    }\n}\n",
        "./interfaces/IFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\n\n/// @dev Basic interface for a feature contract.\ninterface IFeature {\n\n    // solhint-disable func-name-mixedcase\n\n    /// @dev The name of this feature set.\n    function FEATURE_NAME() external view returns (string memory name);\n\n    /// @dev The version of this feature set.\n    function FEATURE_VERSION() external view returns (uint256 version);\n}\n",
        "./interfaces/IOtcOrdersFeature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"../libs/LibNativeOrder.sol\";\nimport \"../libs/LibSignature.sol\";\n\n\n/// @dev Feature for interacting with OTC orders.\ninterface IOtcOrdersFeature {\n\n    /// @dev Emitted whenever an `OtcOrder` is filled.\n    /// @param orderHash The canonical hash of the order.\n    /// @param maker The maker of the order.\n    /// @param taker The taker of the order.\n    /// @param makerTokenFilledAmount How much maker token was filled.\n    /// @param takerTokenFilledAmount How much taker token was filled.\n    event OtcOrderFilled(\n        bytes32 orderHash,\n        address maker,\n        address taker,\n        address makerToken,\n        address takerToken,\n        uint128 makerTokenFilledAmount,\n        uint128 takerTokenFilledAmount\n    );\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrder(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    ///      Unwraps bought WETH into ETH before sending it to \n    ///      the taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrderForEth(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        uint128 takerTokenFillAmount\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fill an OTC order whose taker token is WETH for up\n    ///      to `msg.value`.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function fillOtcOrderWithEth(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature\n    )\n        external\n        payable\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Fully fill an OTC order. \"Meta-transaction\" variant,\n    ///      requires order to be signed by both maker and taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerSignature The order signature from the taker.\n    function fillTakerSignedOtcOrder(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        LibSignature.Signature calldata takerSignature\n    )\n        external;\n\n    /// @dev Fully fill an OTC order. \"Meta-transaction\" variant,\n    ///      requires order to be signed by both maker and taker.\n    ///      Unwraps bought WETH into ETH before sending it to \n    ///      the taker.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerSignature The order signature from the taker.\n    function fillTakerSignedOtcOrderForEth(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        LibSignature.Signature calldata takerSignature\n    )\n        external;\n\n    /// @dev Fills multiple taker-signed OTC orders.\n    /// @param orders Array of OTC orders.\n    /// @param makerSignatures Array of maker signatures for each order.\n    /// @param takerSignatures Array of taker signatures for each order.\n    /// @param unwrapWeth Array of booleans representing whether or not \n    ///        to unwrap bought WETH into ETH for each order. Should be set \n    ///        to false if the maker token is not WETH.\n    /// @return successes Array of booleans representing whether or not\n    ///         each order in `orders` was filled successfully.\n    function batchFillTakerSignedOtcOrders(\n        LibNativeOrder.OtcOrder[] calldata orders,\n        LibSignature.Signature[] calldata makerSignatures,\n        LibSignature.Signature[] calldata takerSignatures,\n        bool[] calldata unwrapWeth\n    )\n        external\n        returns (bool[] memory successes);\n\n    /// @dev Fill an OTC order for up to `takerTokenFillAmount` taker tokens.\n    ///      Internal variant.\n    /// @param order The OTC order.\n    /// @param makerSignature The order signature from the maker.\n    /// @param takerTokenFillAmount Maximum taker token amount to fill this\n    ///        order with.\n    /// @param taker The address to fill the order in the context of.\n    /// @param useSelfBalance Whether to use the Exchange Proxy's balance\n    ///        of input tokens.\n    /// @param recipient The recipient of the bought maker tokens.\n    /// @return takerTokenFilledAmount How much taker token was filled.\n    /// @return makerTokenFilledAmount How much maker token was filled.\n    function _fillOtcOrder(\n        LibNativeOrder.OtcOrder calldata order,\n        LibSignature.Signature calldata makerSignature,\n        uint128 takerTokenFillAmount,\n        address taker,\n        bool useSelfBalance,\n        address recipient\n    )\n        external\n        returns (uint128 takerTokenFilledAmount, uint128 makerTokenFilledAmount);\n\n    /// @dev Get the order info for an OTC order.\n    /// @param order The OTC order.\n    /// @return orderInfo Info about the order.\n    function getOtcOrderInfo(LibNativeOrder.OtcOrder calldata order)\n        external\n        view\n        returns (LibNativeOrder.OtcOrderInfo memory orderInfo);\n\n    /// @dev Get the canonical hash of an OTC order.\n    /// @param order The OTC order.\n    /// @return orderHash The order hash.\n    function getOtcOrderHash(LibNativeOrder.OtcOrder calldata order)\n        external\n        view\n        returns (bytes32 orderHash);\n\n    /// @dev Get the last nonce used for a particular\n    ///      tx.origin address and nonce bucket.\n    /// @param txOrigin The address.\n    /// @param nonceBucket The nonce bucket index.\n    /// @return lastNonce The last nonce value used.\n    function lastOtcTxOriginNonce(address txOrigin, uint64 nonceBucket)\n        external\n        view\n        returns (uint128 lastNonce);\n}\n",
        "./libs/LibNativeOrder.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../errors/LibNativeOrdersRichErrors.sol\";\n\n\n/// @dev A library for common native order operations.\nlibrary LibNativeOrder {\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An OTC limit order.\n    struct OtcOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        uint256 expiryAndNonce; // [uint64 expiry, uint64 nonceBucket, uint128 nonce]\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Info on an OTC order.\n    struct OtcOrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n    }\n\n    uint256 private constant UINT_128_MASK = (1 << 128) - 1;\n    uint256 private constant UINT_64_MASK = (1 << 64) - 1;\n    uint256 private constant ADDRESS_MASK = (1 << 160) - 1;\n\n    // The type hash for limit orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"LimitOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"uint128 takerTokenFeeAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address sender,\",\n    //       \"address feeRecipient,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _LIMIT_ORDER_TYPEHASH =\n        0xce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d49;\n\n    // The type hash for RFQ orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"RfqOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"bytes32 pool,\",\n    //       \"uint64 expiry,\",\n    //       \"uint256 salt\"\n    //     \")\"\n    // ))\n    uint256 private constant _RFQ_ORDER_TYPEHASH =\n        0xe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da9;\n\n    // The type hash for OTC orders, which is:\n    // keccak256(abi.encodePacked(\n    //     \"OtcOrder(\",\n    //       \"address makerToken,\",\n    //       \"address takerToken,\",\n    //       \"uint128 makerAmount,\",\n    //       \"uint128 takerAmount,\",\n    //       \"address maker,\",\n    //       \"address taker,\",\n    //       \"address txOrigin,\",\n    //       \"uint256 expiryAndNonce\"\n    //     \")\"\n    // ))\n    uint256 private constant _OTC_ORDER_TYPEHASH =\n        0x2f754524de756ae72459efbe1ec88c19a745639821de528ac3fb88f9e65e35c8;\n\n    /// @dev Get the struct hash of a limit order.\n    /// @param order The limit order.\n    /// @return structHash The struct hash of the order.\n    function getLimitOrderStructHash(LimitOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.takerTokenFeeAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.sender,\n        //   order.feeRecipient,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _LIMIT_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.takerTokenFeeAmount;\n            mstore(add(mem, 0xA0), and(UINT_128_MASK, mload(add(order, 0x80))))\n            // order.maker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.taker;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.sender;\n            mstore(add(mem, 0x100), and(ADDRESS_MASK, mload(add(order, 0xE0))))\n            // order.feeRecipient;\n            mstore(add(mem, 0x120), and(ADDRESS_MASK, mload(add(order, 0x100))))\n            // order.pool;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            // order.expiry;\n            mstore(add(mem, 0x160), and(UINT_64_MASK, mload(add(order, 0x140))))\n            // order.salt;\n            mstore(add(mem, 0x180), mload(add(order, 0x160)))\n            structHash := keccak256(mem, 0x1A0)\n        }\n    }\n\n    /// @dev Get the struct hash of a RFQ order.\n    /// @param order The RFQ order.\n    /// @return structHash The struct hash of the order.\n    function getRfqOrderStructHash(RfqOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.pool,\n        //   order.expiry,\n        //   order.salt,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _RFQ_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.pool;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            // order.expiry;\n            mstore(add(mem, 0x120), and(UINT_64_MASK, mload(add(order, 0x100))))\n            // order.salt;\n            mstore(add(mem, 0x140), mload(add(order, 0x120)))\n            structHash := keccak256(mem, 0x160)\n        }\n    }\n\n    /// @dev Get the struct hash of an OTC order.\n    /// @param order The OTC order.\n    /// @return structHash The struct hash of the order.\n    function getOtcOrderStructHash(OtcOrder memory order)\n        internal\n        pure\n        returns (bytes32 structHash)\n    {\n        // The struct hash is:\n        // keccak256(abi.encode(\n        //   TYPE_HASH,\n        //   order.makerToken,\n        //   order.takerToken,\n        //   order.makerAmount,\n        //   order.takerAmount,\n        //   order.maker,\n        //   order.taker,\n        //   order.txOrigin,\n        //   order.expiryAndNonce,\n        // ))\n        assembly {\n            let mem := mload(0x40)\n            mstore(mem, _OTC_ORDER_TYPEHASH)\n            // order.makerToken;\n            mstore(add(mem, 0x20), and(ADDRESS_MASK, mload(order)))\n            // order.takerToken;\n            mstore(add(mem, 0x40), and(ADDRESS_MASK, mload(add(order, 0x20))))\n            // order.makerAmount;\n            mstore(add(mem, 0x60), and(UINT_128_MASK, mload(add(order, 0x40))))\n            // order.takerAmount;\n            mstore(add(mem, 0x80), and(UINT_128_MASK, mload(add(order, 0x60))))\n            // order.maker;\n            mstore(add(mem, 0xA0), and(ADDRESS_MASK, mload(add(order, 0x80))))\n            // order.taker;\n            mstore(add(mem, 0xC0), and(ADDRESS_MASK, mload(add(order, 0xA0))))\n            // order.txOrigin;\n            mstore(add(mem, 0xE0), and(ADDRESS_MASK, mload(add(order, 0xC0))))\n            // order.expiryAndNonce;\n            mstore(add(mem, 0x100), mload(add(order, 0xE0)))\n            structHash := keccak256(mem, 0x120)\n        }\n    }\n\n    /// @dev Refund any leftover protocol fees in `msg.value` to `msg.sender`.\n    /// @param ethProtocolFeePaid How much ETH was paid in protocol fees.\n    function refundExcessProtocolFeeToSender(uint256 ethProtocolFeePaid)\n        internal\n    {\n        if (msg.value > ethProtocolFeePaid && msg.sender != address(this)) {\n            uint256 refundAmount = msg.value.safeSub(ethProtocolFeePaid);\n            (bool success,) = msg\n                .sender\n                .call{value: refundAmount}(\"\");\n            if (!success) {\n                LibNativeOrdersRichErrors.ProtocolFeeRefundFailed(\n                    msg.sender,\n                    refundAmount\n                ).rrevert();\n            }\n        }\n    }\n}\n",
        "./libs/LibSignature.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"../../errors/LibSignatureRichErrors.sol\";\n\n\n/// @dev A library for validating signatures.\nlibrary LibSignature {\n    using LibRichErrorsV06 for bytes;\n\n    // '\\x19Ethereum Signed Message:\\n32\\x00\\x00\\x00\\x00' in a word.\n    uint256 private constant ETH_SIGN_HASH_PREFIX =\n        0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n    /// @dev Exclusive upper limit on ECDSA signatures 'R' values.\n    ///      The valid range is given by fig (282) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_R_LIMIT =\n        uint256(0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141);\n    /// @dev Exclusive upper limit on ECDSA signatures 'S' values.\n    ///      The valid range is given by fig (283) of the yellow paper.\n    uint256 private constant ECDSA_SIGNATURE_S_LIMIT = ECDSA_SIGNATURE_R_LIMIT / 2 + 1;\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Retrieve the signer of a signature.\n    ///      Throws if the signature can't be validated.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    /// @return recovered The recovered signer address.\n    function getSignerOfHash(\n        bytes32 hash,\n        Signature memory signature\n    )\n        internal\n        pure\n        returns (address recovered)\n    {\n        // Ensure this is a signature type that can be validated against a hash.\n        _validateHashCompatibleSignature(hash, signature);\n\n        if (signature.signatureType == SignatureType.EIP712) {\n            // Signed using EIP712\n            recovered = ecrecover(\n                hash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\n            // Signed using `eth_sign`\n            // Need to hash `hash` with \"\\x19Ethereum Signed Message:\\n32\" prefix\n            // in packed encoding.\n            bytes32 ethSignHash;\n            assembly {\n                // Use scratch space\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\n                mstore(28, hash) // length of 32 bytes\n                ethSignHash := keccak256(0, 60)\n            }\n            recovered = ecrecover(\n                ethSignHash,\n                signature.v,\n                signature.r,\n                signature.s\n            );\n        }\n        // `recovered` can be null if the signature values are out of range.\n        if (recovered == address(0)) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n    }\n\n    /// @dev Validates that a signature is compatible with a hash signee.\n    /// @param hash The hash that was signed.\n    /// @param signature The signature.\n    function _validateHashCompatibleSignature(\n        bytes32 hash,\n        Signature memory signature\n    )\n        private\n        pure\n    {\n        // Ensure the r and s are within malleability limits.\n        if (uint256(signature.r) >= ECDSA_SIGNATURE_R_LIMIT ||\n            uint256(signature.s) >= ECDSA_SIGNATURE_S_LIMIT)\n        {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.BAD_SIGNATURE_DATA,\n                hash\n            ).rrevert();\n        }\n\n        // Always illegal signature.\n        if (signature.signatureType == SignatureType.ILLEGAL) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ILLEGAL,\n                hash\n            ).rrevert();\n        }\n\n        // Always invalid.\n        if (signature.signatureType == SignatureType.INVALID) {\n            LibSignatureRichErrors.SignatureValidationError(\n                LibSignatureRichErrors.SignatureValidationErrorCodes.ALWAYS_INVALID,\n                hash\n            ).rrevert();\n        }\n\n        // Solidity should check that the signature type is within enum range for us\n        // when abi-decoding.\n    }\n}\n",
        "../errors/LibSignatureRichErrors.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSignatureRichErrors {\n\n    enum SignatureValidationErrorCodes {\n        ALWAYS_INVALID,\n        INVALID_LENGTH,\n        UNSUPPORTED,\n        ILLEGAL,\n        WRONG_SIGNER,\n        BAD_SIGNATURE_DATA\n    }\n\n    // solhint-disable func-name-mixedcase\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32,address,bytes)\")),\n            code,\n            hash,\n            signerAddress,\n            signature\n        );\n    }\n\n    function SignatureValidationError(\n        SignatureValidationErrorCodes code,\n        bytes32 hash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            bytes4(keccak256(\"SignatureValidationError(uint8,bytes32)\")),\n            code,\n            hash\n        );\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/home/runner/work/protocol/protocol/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/home/runner/work/protocol/protocol/contracts/zero-ex/node_modules/@0x/contracts-erc20"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap",
                        "evm.methodIdentifiers"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
